Excel add-ins documentation

An Excel add-in interacts with objects in Excel by using the Office JavaScript API, which
includes two JavaScript object models:

      Excel JavaScript API: These are the application-specific APIs for Excel. Introduced
      with Office 2016, the Excel JavaScript API provides strongly-typed objects that you
      can use to access worksheets, ranges, tables, charts, and more.

      Common APIs: Introduced with Office 2013, the Common API can be used to
      access features such as UI, dialogs, and client settings that are common across
      multiple types of Office applications.

This section of the documentation focuses on the Excel JavaScript API, which you'll use
to develop the majority of functionality in add-ins that target Excel on the web or Excel
2016 or later. For information about the Common API, see Common JavaScript API
object model.



Learn object model concepts
See Excel JavaScript object model in Office Add-ins for information about important
object model concepts.

For hands-on experience using the Excel JavaScript API to access objects in Excel,
complete the Excel add-in tutorial.



Learn API capabilities
Each major Excel API feature has an article or set of articles exploring what that feature
can do and the relevant object model.

      Charts
      Comments
      Conditional formatting
      Custom functions
      Data validation
      Data types
      Events
      PivotTables
      Ranges and Cells
      RangeAreas (Multiple ranges)
     Shapes
     Tables
     Workbooks and Application-level APIs
     Worksheets

For detailed information about the Excel JavaScript API object model, see the Excel
JavaScript API reference documentation.



Try out code samples in Script Lab
Use Script Lab to get started quickly with a collection of built-in samples that show how
to complete tasks with the API. You can run the samples in Script Lab to instantly see the
result in the task pane or worksheet, examine the samples to learn how the API works,
and even use samples to prototype your own add-in.



Classes
                                                                                     ï¾‰   Expand table


 Excel.AllowEdit    Represents an AllowEditRange object found in a worksheet. This object works
 Range              with worksheet protection properties. When worksheet protection is enabled,
                    an AllowEditRange object can be used to allow editing of a specific range, while
                    maintaining protection on the rest of the worksheet.

 Excel.AllowEdit    Represents the set of AllowEditRange objects found in a worksheet.
 Range              AllowEditRange objects work with worksheet protection properties. When
 Collection         worksheet protection is enabled, an AllowEditRange object can be used to
                    allow editing of a specific range, while maintaining protection on the rest of the
                    worksheet.

 Excel.             Represents the Excel application that manages the workbook.
 Application

 Excel.AutoFilter   Represents the AutoFilter object. AutoFilter turns the values in Excel column
                    into specific filters based on the cell contents.

 Excel.Binding      Represents an Office.js binding that is defined in the workbook.

 Excel.Binding      Represents the collection of all the binding objects that are part of the
 Collection         workbook.

 Excel.CellValue    Represents a cell value conditional format.
 Conditional
 Format

 Excel.Chart        Represents a chart object in a workbook. To learn more about the chart object
                    model, see Work with charts using the Excel JavaScript API.

 Excel.ChartArea    Encapsulates the format properties for the overall chart area.
 Format

 Excel.ChartAxes    Represents the chart axes.

 Excel.ChartAxis    Represents a single axis in a chart.

 Excel.ChartAxis    Encapsulates the format properties for the chart axis.
 Format

 Excel.ChartAxis    Represents the title of a chart axis.
 Title

Excel.ChartAxis    Represents the chart axis title formatting.
TitleFormat

Excel.ChartBin     Encapsulates the bin options for histogram charts and pareto charts.
Options

Excel.Chart        Represents the border formatting of a chart element.
Border

Excel.Chart        Represents the properties of a box and whisker chart.
Boxwhisker
Options

Excel.Chart        A collection of all the chart objects on a worksheet.
Collection

Excel.ChartData    Represents the data label of a chart point.
Label

Excel.ChartData    Encapsulates the format properties for the chart data labels.
LabelFormat

Excel.ChartData    Represents a collection of all the data labels on a chart point.
Labels

Excel.ChartData    Represents the data table object of a chart.
Table

Excel.ChartData    Represents the format of a chart data table.
TableFormat

Excel.ChartError   This object represents the attributes for a chart's error bars.
Bars

Excel.ChartError   Encapsulates the format properties for chart error bars.
BarsFormat

Excel.ChartFill    Represents the fill formatting for a chart element.

Excel.ChartFont    This object represents the font attributes (such as font name, font size, and
                   color) for a chart object.

Excel.Chart        Represents the substring in chart related objects that contain text, like a
FormatString       ChartTitle object or ChartAxisTitle object.


Excel.Chart        Represents major or minor gridlines on a chart axis.
Gridlines

Excel.Chart        Encapsulates the format properties for chart gridlines.
GridlinesFormat
 Excel.Chart        Represents the legend in a chart.
Legend

Excel.Chart        Represents the legend entry in legendEntryCollection .
LegendEntry

Excel.Chart        Represents a collection of legend entries.
LegendEntry
Collection

Excel.Chart        Encapsulates the format properties of a chart legend.
LegendFormat

Excel.ChartLine    Encapsulates the formatting options for line elements.
Format

Excel.ChartMap     Encapsulates the properties for a region map chart.
Options

Excel.ChartPivot   Encapsulates the options for the pivot chart.
Options

Excel.ChartPlot    This object represents the attributes for a chart plot area.
Area

Excel.ChartPlot    Represents the format properties for a chart plot area.
AreaFormat

Excel.ChartPoint   Represents a point of a series in a chart.

Excel.ChartPoint   Represents the formatting object for chart points.
Format

Excel.Chart        A collection of all the chart points within a series inside a chart.
Points
Collection

Excel.Chart        Represents a series in a chart.
Series

Excel.Chart        Represents a collection of chart series.
SeriesCollection

Excel.Chart        Encapsulates the format properties for the chart series
SeriesFormat

Excel.ChartTitle   Represents a chart title object of a chart.

Excel.ChartTitle   Provides access to the formatting options for a chart title.
Format
 Excel.Chart       This object represents the attributes for a chart trendline object.
Trendline

Excel.Chart       Represents a collection of chart trendlines.
Trendline
Collection

Excel.Chart       Represents the format properties for the chart trendline.
Trendline
Format

Excel.Chart       This object represents the attributes for a chart trendline label object.
TrendlineLabel

Excel.Chart       Encapsulates the format properties for the chart trendline label.
TrendlineLabel
Format

Excel.Color       Represents the color scale criteria for conditional formatting.
Scale
Conditional
Format

Excel.Comment     Represents a comment in the workbook.

Excel.Comment     Represents a collection of comment objects that are part of the workbook.
Collection

Excel.Comment     Represents a comment reply in the workbook.
Reply

Excel.Comment     Represents a collection of comment reply objects that are part of the comment.
ReplyCollection

Excel.            Represents a conditional format for the negative side of the data bar.
Conditional
DataBar
Negative
Format

Excel.            Represents a conditional format for the positive side of the data bar.
Conditional
DataBarPositive
Format

Excel.            An object encapsulating a conditional format's range, format, rule, and other
Conditional       properties. To learn more about the conditional formatting object model, read
Format            Apply conditional formatting to Excel ranges.

Excel.            Represents a collection of all the conditional formats that are overlap the range.
Conditional
 Format
Collection

Excel.          Represents a rule, for all traditional rule/format pairings.
Conditional
FormatRule

Excel.          Represents the border of an object.
Conditional
RangeBorder

Excel.          Represents the border objects that make up range border.
Conditional
RangeBorder
Collection

Excel.          Represents the background of a conditional range object.
Conditional
RangeFill

Excel.          This object represents the font attributes (font style, color, etc.) for an object.
Conditional
RangeFont

Excel.          A format object encapsulating the conditional formats range's font, fill, borders,
Conditional     and other properties.
RangeFormat

Excel.Culture   Provides information based on current system culture settings. This includes
Info            the culture names, number formatting, and other culturally dependent settings.

Excel.Custom    Represents a custom conditional format type.
Conditional
Format

Excel.Custom    Represents a custom property.
Property

Excel.Custom    Contains the collection of custom properties.
Property
Collection

Excel.Custom    Represents a custom XML part object in a workbook.
XmlPart

Excel.Custom    A collection of custom XML parts.
XmlPart
Collection

Excel.Custom    A scoped collection of custom XML parts. A scoped collection is the result of
XmlPartScoped   some operation (e.g., filtering by namespace). A scoped collection cannot be
Collection      scoped any further.
 Excel.DataBar       Represents an Excel conditional data bar type.
Conditional
Format

Excel.Data          Represents a collection of all the data connections that are part of the
Connection          workbook.
Collection

Excel.DataPivot     Represents the Excel DataPivotHierarchy.
Hierarchy

Excel.DataPivot     Represents a collection of DataPivotHierarchy items associated with the
Hierarchy           PivotTable.
Collection

Excel.Data          Represents the data validation applied to the current range. To learn more
Validation          about the data validation object model, read Add data validation to Excel
                    ranges.

Excel.Datetime      Defines the culturally appropriate format of displaying numbers. This is based
FormatInfo          on current system culture settings.

Excel.Document      Represents workbook properties.
Properties

Excel.Document      Represents a task.
Task

Excel.Document      Represents a recorded change to the task.
TaskChange

Excel.Document      Represents a collection of change records for a task.
TaskChange
Collection

Excel.Document      Represents a collection of tasks.
TaskCollection

Excel.Filter        Manages the filtering of a table's column.

Excel.FilterPivot   Represents the Excel FilterPivotHierarchy.
Hierarchy

Excel.FilterPivot   Represents a collection of FilterPivotHierarchy items associated with the
Hierarchy           PivotTable.
Collection

Excel.Format        Represents the format protection of a range object.
Protection

Excel.Function      An object containing the result of a function-evaluation operation
Result
 Excel.Functions   An object for evaluating Excel functions.

Excel.Geometric   Represents a geometric shape inside a worksheet. A geometric shape can be a
Shape             rectangle, block arrow, equation symbol, flowchart item, star, banner, callout, or
                  any other basic shape in Excel.

Excel.Group       Represents the shape collection inside a shape group.
Shape
Collection

Excel.HeaderFooter

Excel.HeaderFooterGroup

Excel.IconSet     Represents an icon set criteria for conditional formatting.
Conditional
Format

Excel.Image       Represents an image in the worksheet. To get the corresponding Shape object,
                  use Image.shape .

Excel.Iterative   Represents the iterative calculation settings.
Calculation

Excel.Line        Represents a line inside a worksheet. To get the corresponding Shape object,
                  use Line.shape .

Excel.Linked      Represents a linked data type. A linked data type is a data type connected to an
DataType          online data source.

Excel.Linked      Represents a collection of linked data types.
DataType
Collection

Excel.Linked      Contains information about a linked workbook. If a workbook has links pointing
Workbook          to data in another workbook, the second workbook is linked to the first
                  workbook. In this scenario, the second workbook is called the "linked
                  workbook".

Excel.Linked      Represents a collection of linked workbook objects.
Workbook
Collection

Excel.Local       Provides information about the local image.
Image

Excel.Named       Represents a defined name for a range of cells or value. Names can be
Item              primitive named objects (as seen in the type below), range object, or a
                  reference to a range. This object can be used to obtain range object associated
                  with names.
 Excel.Named        Represents an object containing values and types of a named item.
ItemArray
Values

Excel.Named        A collection of all the NamedItem objects that are part of the workbook or
ItemCollection     worksheet, depending on how it was reached.

Excel.Named        Represents a named sheet view of a worksheet. A sheet view stores the sort
SheetView          and filter rules for a particular worksheet. Every sheet view (even a temporary
                   sheet view) has a unique, worksheet-scoped name that is used to access the
                   view.

Excel.Named        Represents the collection of sheet views in the worksheet.
SheetView
Collection

Excel.Number       Defines the culturally appropriate format of displaying numbers. This is based
FormatInfo         on current system culture settings.

Excel.PageBreak

Excel.PageBreakCollection

Excel.Page         Represents layout and print settings that are not dependent on any printer-
Layout             specific implementation. These settings include margins, orientation, page
                   numbering, title rows, and print area.

Excel.PivotField   Represents the Excel PivotField.

Excel.PivotField   Represents a collection of all the PivotFields that are part of a PivotTable's
Collection         hierarchy.

Excel.Pivot        Represents the Excel PivotHierarchy.
Hierarchy

Excel.Pivot        Represents a collection of all the PivotHierarchies that are part of the
Hierarchy          PivotTable.
Collection

Excel.PivotItem    Represents the Excel PivotItem.

Excel.PivotItem    Represents a collection of all the PivotItems related to their parent PivotField.
Collection

Excel.Pivot        Represents the visual layout of the PivotTable.
Layout

Excel.PivotTable   Represents an Excel PivotTable. To learn more about the PivotTable object
                   model, read Work with PivotTables using the Excel JavaScript API.

Excel.PivotTable   Represents a collection of all the PivotTables that are part of the workbook or
Collection         worksheet.
 Excel.PivotTable   Represents a scoped collection of PivotTables. The PivotTables are sorted based
Scoped             on the location of the PivotTable's top-left corner. They are ordered top-to-
Collection         bottom and then left-to-right.

Excel.PivotTable   Represents a PivotTable style, which defines style elements by PivotTable
Style              region.

Excel.PivotTable   Represents a collection of PivotTable styles.
StyleCollection

Excel.Preset       Represents the preset criteria conditional format such as above average, below
Criteria           average, unique values, contains blank, nonblank, error, and noerror.
Conditional
Format

Excel.Query        Represents a Power Query query.

Excel.Query        Represents the collection of queries in the workbook.
Collection

Excel.Range        Range represents a set of one or more contiguous cells such as a cell, a row, a
                   column, or a block of cells. To learn more about how ranges are used
                   throughout the API, start with Ranges in the Excel JavaScript API.

Excel.Range        RangeAreas represents a collection of one or more rectangular ranges in the
Areas              same worksheet. To learn how to use discontiguous ranges, read Work with
                   multiple ranges simultaneously in Excel add-ins.

Excel.Range        Contains the collection of cross-workbook level ranges.
AreasCollection

Excel.Range        Represents the border of an object.
Border

Excel.Range        Represents the border objects that make up the range border.
Border
Collection

Excel.RangeCollection

Excel.RangeFill    Represents the background of a range object.

Excel.Range        This object represents the font attributes (font name, font size, color, etc.) for
Font               an object.

Excel.Range        A format object encapsulating the range's font, fill, borders, alignment, and
Format             other properties.

Excel.RangeSort    Manages sorting operations on Range objects.

Excel.Range        RangeView represents a set of visible cells of the parent range.
View
 Excel.Range       Represents a collection of RangeView objects.
ViewCollection

Excel.Remove      Represents the results from Range.removeDuplicates .
Duplicates
Result

Excel.Request     The RequestContext object facilitates requests to the Excel application. Since
Context           the Office add-in and the Excel application run in two different processes, the
                  request context is required to get access to the Excel object model from the
                  add-in.

Excel.Row         Represents the Excel RowColumnPivotHierarchy.
ColumnPivot
Hierarchy

Excel.Row         Represents a collection of RowColumnPivotHierarchy items associated with the
ColumnPivot       PivotTable.
Hierarchy
Collection

Excel.Runtime     Represents the Excel Runtime class.

Excel.Setting     Setting represents a key-value pair of a setting persisted to the document (per
                  file, per add-in). These custom key-value pair can be used to store state or
                  lifecycle information needed by the content or task-pane add-in. Note that
                  settings are persisted in the document and hence it is not a place to store any
                  sensitive or protected information such as user information and password.

Excel.Setting     Represents a collection of key-value pair setting objects that are part of the
Collection        workbook. The scope is limited to per file and add-in (task-pane or content)
                  combination.

Excel.Shape       Represents a generic shape object in the worksheet. A shape could be a
                  geometric shape, a line, a group of shapes, etc. To learn more about the shape
                  object model, read Work with shapes using the Excel JavaScript API.

Excel.Shape       Represents a collection of all the shapes in the worksheet.
Collection

Excel.ShapeFill   Represents the fill formatting of a shape object.

Excel.Shape       Represents the font attributes, such as font name, font size, and color, for a
Font              shape's TextRange object.

Excel.Shape       Represents a shape group inside a worksheet. To get the corresponding Shape
Group             object, use ShapeGroup.shape .

Excel.ShapeLine   Represents the line formatting for the shape object. For images and geometric
Format            shapes, line formatting represents the border of the shape.
 Excel.Slicer        Represents a Slicer object in the workbook.

Excel.Slicer        Represents a collection of all the slicer objects in the workbook or a worksheet.
Collection

Excel.SlicerItem    Represents a slicer item in a slicer.

Excel.SlicerItem    Represents a collection of all the slicer item objects in the slicer.
Collection

Excel.SlicerStyle   Represents a slicer style, which defines style elements by region of the slicer.

Excel.SlicerStyle   Represents a collection of SlicerStyle objects.
Collection

Excel.Style         An object encapsulating a style's format and other properties.

Excel.Style         Represents a collection of all the styles.
Collection

Excel.Table         Represents an Excel table. To learn more about the table object model, read
                    Work with tables using the Excel JavaScript API.

Excel.Table         Represents a collection of all the tables that are part of the workbook or
Collection          worksheet, depending on how it was reached.

Excel.Table         Represents a column in a table.
Column

Excel.Table         Represents a collection of all the columns that are part of the table.
Column
Collection

Excel.TableRow      Represents a row in a table.

                    Note that unlike ranges or columns, which will adjust if new rows or columns
                    are added before them, a TableRow object represents the physical location of
                    the table row, but not the data. That is, if the data is sorted or if new rows are
                    added, a table row will continue to point at the index for which it was created.

Excel.TableRow      Represents a collection of all the rows that are part of the table.
Collection
                    Note that unlike ranges or columns, which will adjust if new rows or columns
                    are added before them, a TableRow object represents the physical location of
                    the table row, but not the data. That is, if the data is sorted or if new rows are
                    added, a table row will continue to point at the index for which it was created.

Excel.Table         Represents a scoped collection of tables. For each table its top-left corner is
Scoped              considered its anchor location, and the tables are sorted top-to-bottom and
Collection          then left-to-right.

Excel.TableSort     Manages sorting operations on Table objects.
 Excel.TableStyle   Represents a table style, which defines the style elements by region of the
                   table.

Excel.TableStyle   Represents a collection of table styles.
Collection

Excel.Text         Represents a specific text conditional format.
Conditional
Format

Excel.TextFrame    Represents the text frame of a shape object.

Excel.TextRange    Contains the text that is attached to a shape, in addition to properties and
                   methods for manipulating the text.

Excel.Timeline     Represents a TimelineStyle , which defines style elements by region in the
Style              timeline.

Excel.Timeline     Represents a collection of timeline styles.
StyleCollection

Excel.Top          Represents a top/bottom conditional format.
Bottom
Conditional
Format

Excel.Workbook     Workbook is the top level object which contains related workbook objects such
                   as worksheets, tables, and ranges. To learn more about the workbook object
                   model, read Work with workbooks using the Excel JavaScript API.

Excel.Workbook     The WorkbookCreated object is the top level object created by
Created            Application.CreateWorkbook . A WorkbookCreated object is a special Workbook
                   object.

Excel.Workbook     Represents the protection of a workbook object.
Protection

Excel.Workbook     Represents a collection of one or more rectangular ranges in multiple
RangeAreas         worksheets.

Excel.             An Excel worksheet is a grid of cells. It can contain data, tables, charts, etc. To
Worksheet          learn more about the worksheet object model, read Work with worksheets
                   using the Excel JavaScript API.

Excel.             Represents a collection of worksheet objects that are part of the workbook.
Worksheet
Collection

Excel.             Represents a worksheet-level custom property.
Worksheet
 Custom
Property

Excel.               Contains the collection of worksheet-level custom property.
Worksheet
Custom
Property
Collection

Excel.WorksheetFreezePanes

Excel.               Represents the protection of a worksheet object.
Worksheet
Protection




Interfaces
                                                                                   ï¾‰   Expand table


Excel.AllowEdit         The interface used to construct optional fields of the AllowEditRange
RangeOptions            object.

Excel.ArrayCell         Represents a 2D array of cell values.
Value

Excel.                  The base64 encoding type and data of an image.
Base64Encoded
Image

Excel.BasicData         Represents the basic type data validation criteria.
Validation

Excel.BindingData       Provides information about the binding that raised the data changed event.
ChangedEventArgs

Excel.Binding           Provides information about the selection that raised the selection changed
SelectionChanged        event.
EventArgs
                        Note*: If multiple, discontiguous cells are selected,
                        Binding.onSelectionChanged only reports row and column information for
                        one selection. Use Worksheet.onSelectionChanged for multiple selected
                        ranges.

Excel.BlockedError      Represents the value of a cell containing a #BLOCKED! error.
CellValue

Excel.BooleanCell       Represents the value of a cell containing a boolean.
Value
 Excel.BusyErrorCell    Represents the value of a cell containing a #BUSY! error.
Value

Excel.CalcErrorCell    Represents the value of a cell containing a #CALC! error.
Value

Excel.CardLayout       Represents a section of a card that is arranged as a list in card view.
ListSection

Excel.CardLayout       Represents a reference to a property used by the card layout.
PropertyReference

Excel.CardLayout       Properties of a card layout relevant to most card layouts.
SectionStandard
Properties

Excel.CardLayout       Properties of a card layout relevant to most card layouts.
StandardProperties

Excel.CardLayout       Represents a section of a card that is arranged as a table in card view.
TableSection

Excel.CellBorder       Represents the properties of a single border returned by
                       getCellProperties , getRowProperties , and getColumnProperties , or the
                       border property input parameter of setCellProperties , setRowProperties ,
                       and setColumnProperties .

Excel.CellBorder       Represents the format.borders properties of getCellProperties ,
Collection             getRowProperties , and getColumnProperties , or the format.borders input
                       parameter of setCellProperties , setRowProperties , and
                       setColumnProperties .


Excel.CellProperties   Represents the returned properties of getCellProperties.

                       [ API set: ExcelApi 1.9 ]

Excel.CellProperties   Specifies which properties to load on the format.borders object.
BorderLoadOptions

Excel.CellProperties   Represents the format.fill properties of getCellProperties ,
Fill                   getRowProperties , and getColumnProperties or the format.fill input
                       parameter of setCellProperties , setRowProperties , and
                       setColumnProperties .


Excel.CellProperties   Specifies which properties to load on the format.fill object.
FillLoadOptions

Excel.CellProperties   Represents the format.font properties of getCellProperties ,
Font                   getRowProperties , and getColumnProperties , or the format.font input
                       parameter of setCellProperties , setRowProperties , and
                       setColumnProperties .
 Excel.CellProperties   Specifies which properties to load on the format.font object.
FontLoadOptions

Excel.CellProperties   Represents the returned format properties of getCellProperties or format
Format                 input parameter of setCellProperties.

                       [ API set: ExcelApi 1.9 ]

Excel.CellProperties   Represents which properties to load on the format object.
FormatLoad
Options                [ API set: ExcelApi 1.9 ]


Excel.CellProperties   Represents which cell properties to load, when used as part of a
LoadOptions            "range.getCellProperties" method.

                       [ API set: ExcelApi 1.9 ]

Excel.CellProperties   Represents the format.protection properties of getCellProperties ,
Protection             getRowProperties , and getColumnProperties , or the format.protection
                       input parameter of setCellProperties , setRowProperties , and
                       setColumnProperties .


Excel.CellValue        The attribution attributes object represents the set of details that can be
Attribution            used to describe where information came from, if the information comes
Attributes             from a public source.

Excel.CellValueExtra   These extra properties may appear on a CellValue and provide information
Properties             about that CellValue , but the extra properties are not part of the value in
                       the cell.

Excel.CellValue        Metadata about a property in EntityCellValue.properties .
PropertyMetadata

Excel.CellValue        Represents the exclusion of a property in EntityCellValue.properties from
PropertyMetadata       features of Excel.
Exclusions

Excel.CellValue        The provider attributes object represents the set of details used in card view
ProviderAttributes     to provide specified branding information for a CellValue type that
                       supports provider attributes.

Excel.Changed          Provides information about the details of a WorksheetChangedEvent or
EventDetail            TableChangedEvent .


Excel.Change           Represents the direction that existing or remaining cells in a worksheet will
DirectionState         shift when cells are inserted into or deleted from a worksheet.

Excel.Chart            Provides information about the chart that raised the activated event.
ActivatedEventArgs

Excel.ChartAdded       Provides information about the chart that raised the added event.
 EventArgs

Excel.Chart           Provides information about the chart that raised the deactivated event.
DeactivatedEvent
Args

Excel.ChartDeleted    Provides information about the chart that raised the deleted event.
EventArgs

Excel.CheckboxCell    Represents a checkbox. This is a cell control that allows a user to toggle the
Control               boolean value in a cell. [ API set: ExcelApi BETA (PREVIEW ONLY) ]

Excel.Column          Represents the returned properties of getColumnProperties.
Properties
                      [ API set: ExcelApi 1.9 ]

Excel.Column          Represents which column properties to load, when used as part of a
PropertiesLoad        "range.getColumnProperties" method.
Options
                      [ API set: ExcelApi 1.9 ]

Excel.Comment         Provides information about the comments that raised the comment added
AddedEventArgs        event.

Excel.Comment         Occurs when existing comments are changed.
ChangedEventArgs

Excel.Comment         Provides information about the comments that raised the comment deleted
DeletedEventArgs      event.

Excel.Comment         A structure for the comment ID and IDs of its related replies.
Detail

Excel.Comment         Represents the entity that is mentioned in comments.
Mention

Excel.CommentRich     Represents the content contained within a comment or comment reply.
Content               Rich content incudes the text string and any other objects contained within
                      the comment body, such as mentions.

Excel.Conditional     Represents a cell value conditional format rule.
CellValueRule

Excel.Conditional     Represents the criteria of the color scale.
ColorScaleCriteria

Excel.Conditional     Represents a color scale criterion which contains a type, value, and a color.
ColorScaleCriterion

Excel.Conditional     Represents a rule-type for a data bar.
DataBarRule
 Excel.Conditional      Represents an icon criterion which contains a type, value, an operator, and
IconCriterion          an optional custom icon, if not using an icon set.

Excel.Conditional      Represents the preset criteria conditional format rule.
PresetCriteriaRule

Excel.Conditional      Represents a cell value conditional format rule.
TextComparison
Rule

Excel.Conditional      Represents the rule of the top/bottom conditional format.
TopBottomRule

Excel.ConnectError     Represents the value of a cell containing a #CONNECT! error.
CellValue

Excel.CustomData       Represents the custom data validation criteria.
Validation

Excel.Data             Represents the error alert properties for the data validation.
ValidationErrorAlert

Excel.Data             Represents the user prompt properties for the data validation.
ValidationPrompt

Excel.Data             A data validation rule contains different types of data validation. You can
ValidationRule         only use one of them at a time according the Excel.DataValidationType .

Excel.DateTimeData     Represents the date data validation criteria.
Validation

Excel.Div0ErrorCell    Represents the value of a cell containing a #DIV/0! error.
Value

Excel.Document         Represents information about a task's schedule.
TaskSchedule

Excel.DoubleCell       Represents the value of a cell containing a double.
Value

Excel.EmailIdentity    Represents information about a user's identity.

Excel.EmptyCell        Represents an empty cell control. This represents the state where a cell
Control                does not have a control. [ API set: ExcelApi BETA (PREVIEW ONLY) ]

Excel.EmptyCell        Represents the value of a cell that's empty and has no formulas or data.
Value

Excel.EntityArray      Represents a card layout that is best used for an array.
CardLayout
 Excel.EntityCard       Represents a card layout that is best used for an array.
Layout

Excel.EntityCell       Represents a set of properties without a schema or defined structure.
Value

Excel.Entity           The compact layout properties for an entity.
CompactLayout

Excel.EntityProperty   Properties used by CellValueAndPropertyMetadata . These properties refer to
ExtraProperties        the metadata and not to a CellValue .

Excel.EntityView       Represents layout information for various views of the entity.
Layouts

Excel.ExternalCode     Represents the value of a cell containing an External Code Service Object,
ServiceObjectCell      such as Python code formula.
Value

Excel.ExternalError    Represents the value of a cell containing an #EXTERNAL! error.
CellValue

Excel.FieldErrorCell   Represents the value of a cell containing a #FIELD! error.
Value

Excel.FilterCriteria   Represents the filtering criteria applied to a column.

Excel.FilterDatetime   Represents how to filter a date when filtering on values.

Excel.FiveArrows       [ API set: ExcelApi 1.2 ]
GraySet

Excel.FiveArrowsSet    [ API set: ExcelApi 1.2 ]

Excel.FiveBoxesSet     [ API set: ExcelApi 1.2 ]

Excel.FiveQuarters     [ API set: ExcelApi 1.2 ]
Set

Excel.FiveRatingSet    [ API set: ExcelApi 1.2 ]

Excel.Formatted        Represents the value of a cell containing a number with a format string.
NumberCellValue        Number format strings must conform to Excel guidelines. To learn more,
                       see Review guidelines for customizing a number format . In this scenario,
                       the format is applied to the value and not to the cell, so the value retains its
                       format string throughout calculation.

Excel.Formula          Provides information about a changed formula during a formula changed
ChangedEvent           event.
Detail
 Excel.FourArrows      [ API set: ExcelApi 1.2 ]
GraySet

Excel.FourArrows      [ API set: ExcelApi 1.2 ]
Set

Excel.FourRatingSet   [ API set: ExcelApi 1.2 ]

Excel.FourRed         [ API set: ExcelApi 1.2 ]
ToBlackSet

Excel.FourTraffic     [ API set: ExcelApi 1.2 ]
LightsSet

Excel.GettingData     Represents the value of a cell containing a #GETTING_DATA error.
ErrorCellValue

Excel.Icon            Represents a cell icon.

Excel.Icon            [ API set: ExcelApi 1.2 ]
Collections

Excel.Identity        Represents information about a user's identity.

Excel.Insert          The options that define which worksheets to insert and where in the
WorksheetOptions      workbook the new worksheets will be inserted.

Excel.Interfaces.     An interface describing the data returned by calling
AllowEditRange        allowEditRangeCollection.toJSON() .
CollectionData

Excel.Interfaces.     Represents the set of AllowEditRange objects found in a worksheet.
AllowEditRange        AllowEditRange objects work with worksheet protection properties. When
CollectionLoad        worksheet protection is enabled, an AllowEditRange object can be used to
Options               allow editing of a specific range, while maintaining protection on the rest of
                      the worksheet.

Excel.Interfaces.     An interface for updating data on the AllowEditRangeCollection object, for
AllowEditRange        use in allowEditRangeCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.     An interface describing the data returned by calling
AllowEditRange        allowEditRange.toJSON() .
Data

Excel.Interfaces.     Represents an AllowEditRange object found in a worksheet. This object
AllowEditRange        works with worksheet protection properties. When worksheet protection is
LoadOptions           enabled, an AllowEditRange object can be used to allow editing of a
                      specific range, while maintaining protection on the rest of the worksheet.
 Excel.Interfaces.       An interface for updating data on the AllowEditRange object, for use in
AllowEditRange          allowEditRange.set({ ... }) .
UpdateData

Excel.Interfaces.       An interface describing the data returned by calling application.toJSON() .
ApplicationData

Excel.Interfaces.       Represents the Excel application that manages the workbook.
ApplicationLoad
Options

Excel.Interfaces.       An interface for updating data on the Application object, for use in
ApplicationUpdate       application.set({ ... }) .
Data

Excel.Interfaces.       An interface describing the data returned by calling autoFilter.toJSON() .
AutoFilterData

Excel.Interfaces.       Represents the AutoFilter object. AutoFilter turns the values in Excel
AutoFilterLoad          column into specific filters based on the cell contents.
Options

Excel.Interfaces.       An interface describing the data returned by calling
BindingCollection       bindingCollection.toJSON() .
Data

Excel.Interfaces.       Represents the collection of all the binding objects that are part of the
BindingCollection       workbook.
LoadOptions

Excel.Interfaces.       An interface for updating data on the BindingCollection object, for use in
BindingCollection       bindingCollection.set({ ... }) .
UpdateData

Excel.Interfaces.       An interface describing the data returned by calling binding.toJSON() .
BindingData

Excel.Interfaces.       Represents an Office.js binding that is defined in the workbook.
BindingLoad
Options

Excel.Interfaces.Cell   An interface describing the data returned by calling
ValueConditional        cellValueConditionalFormat.toJSON() .
FormatData

Excel.Interfaces.Cell   Represents a cell value conditional format.
ValueConditional
FormatLoad
Options
 Excel.Interfaces.Cell   An interface for updating data on the CellValueConditionalFormat object,
ValueConditional        for use in cellValueConditionalFormat.set({ ... }) .
FormatUpdateData

Excel.Interfaces.       An interface describing the data returned by calling
ChartAreaFormat         chartAreaFormat.toJSON() .
Data

Excel.Interfaces.       Encapsulates the format properties for the overall chart area.
ChartAreaFormat
LoadOptions

Excel.Interfaces.       An interface for updating data on the ChartAreaFormat object, for use in
ChartAreaFormat         chartAreaFormat.set({ ... }) .
UpdateData

Excel.Interfaces.       An interface describing the data returned by calling chartAxes.toJSON() .
ChartAxesData

Excel.Interfaces.       Represents the chart axes.
ChartAxesLoad
Options

Excel.Interfaces.       An interface for updating data on the ChartAxes object, for use in
ChartAxesUpdate         chartAxes.set({ ... }) .
Data

Excel.Interfaces.       An interface describing the data returned by calling chartAxis.toJSON() .
ChartAxisData

Excel.Interfaces.       An interface describing the data returned by calling
ChartAxisFormat         chartAxisFormat.toJSON() .
Data

Excel.Interfaces.       Encapsulates the format properties for the chart axis.
ChartAxisFormat
LoadOptions

Excel.Interfaces.       An interface for updating data on the ChartAxisFormat object, for use in
ChartAxisFormat         chartAxisFormat.set({ ... }) .
UpdateData

Excel.Interfaces.       Represents a single axis in a chart.
ChartAxisLoad
Options

Excel.Interfaces.       An interface describing the data returned by calling
ChartAxisTitleData      chartAxisTitle.toJSON() .


Excel.Interfaces.       An interface describing the data returned by calling
ChartAxisTitle          chartAxisTitleFormat.toJSON() .
 FormatData

Excel.Interfaces.    Represents the chart axis title formatting.
ChartAxisTitle
FormatLoad
Options

Excel.Interfaces.    An interface for updating data on the ChartAxisTitleFormat object, for use
ChartAxisTitle       in chartAxisTitleFormat.set({ ... }) .
FormatUpdateData

Excel.Interfaces.    Represents the title of a chart axis.
ChartAxisTitleLoad
Options

Excel.Interfaces.    An interface for updating data on the ChartAxisTitle object, for use in
ChartAxisTitle       chartAxisTitle.set({ ... }) .
UpdateData

Excel.Interfaces.    An interface for updating data on the ChartAxis object, for use in
ChartAxisUpdate      chartAxis.set({ ... }) .
Data

Excel.Interfaces.    An interface describing the data returned by calling
ChartBinOptions      chartBinOptions.toJSON() .
Data

Excel.Interfaces.    Encapsulates the bin options for histogram charts and pareto charts.
ChartBinOptions
LoadOptions

Excel.Interfaces.    An interface for updating data on the ChartBinOptions object, for use in
ChartBinOptions      chartBinOptions.set({ ... }) .
UpdateData

Excel.Interfaces.    An interface describing the data returned by calling chartBorder.toJSON() .
ChartBorderData

Excel.Interfaces.    Represents the border formatting of a chart element.
ChartBorderLoad
Options

Excel.Interfaces.    An interface for updating data on the ChartBorder object, for use in
ChartBorderUpdate    chartBorder.set({ ... }) .
Data

Excel.Interfaces.    An interface describing the data returned by calling
ChartBoxwhisker      chartBoxwhiskerOptions.toJSON() .
OptionsData

Excel.Interfaces.    Represents the properties of a box and whisker chart.
ChartBoxwhisker
 OptionsLoad
Options

Excel.Interfaces.   An interface for updating data on the ChartBoxwhiskerOptions object, for
ChartBoxwhisker     use in chartBoxwhiskerOptions.set({ ... }) .
OptionsUpdate
Data

Excel.Interfaces.   An interface describing the data returned by calling
ChartCollection     chartCollection.toJSON() .
Data

Excel.Interfaces.   A collection of all the chart objects on a worksheet.
ChartCollection
LoadOptions

Excel.Interfaces.   An interface for updating data on the ChartCollection object, for use in
ChartCollection     chartCollection.set({ ... }) .
UpdateData

Excel.Interfaces.   An interface describing the data returned by calling chart.toJSON() .
ChartData

Excel.Interfaces.   An interface describing the data returned by calling
ChartDataLabel      chartDataLabel.toJSON() .
Data

Excel.Interfaces.   An interface describing the data returned by calling
ChartDataLabel      chartDataLabelFormat.toJSON() .
FormatData

Excel.Interfaces.   Encapsulates the format properties for the chart data labels.
ChartDataLabel
FormatLoad
Options

Excel.Interfaces.   An interface for updating data on the ChartDataLabelFormat object, for use
ChartDataLabel      in chartDataLabelFormat.set({ ... }) .
FormatUpdateData

Excel.Interfaces.   Represents the data label of a chart point.
ChartDataLabel
LoadOptions

Excel.Interfaces.   An interface describing the data returned by calling
ChartDataLabels     chartDataLabels.toJSON() .
Data

Excel.Interfaces.   Represents a collection of all the data labels on a chart point.
ChartDataLabels
LoadOptions
 Excel.Interfaces.    An interface for updating data on the ChartDataLabels object, for use in
ChartDataLabels      chartDataLabels.set({ ... }) .
UpdateData

Excel.Interfaces.    An interface for updating data on the ChartDataLabel object, for use in
ChartDataLabel       chartDataLabel.set({ ... }) .
UpdateData

Excel.Interfaces.    An interface describing the data returned by calling
ChartDataTable       chartDataTable.toJSON() .
Data

Excel.Interfaces.    An interface describing the data returned by calling
ChartDataTable       chartDataTableFormat.toJSON() .
FormatData

Excel.Interfaces.    Represents the format of a chart data table.
ChartDataTable
FormatLoad
Options

Excel.Interfaces.    An interface for updating data on the ChartDataTableFormat object, for use
ChartDataTable       in chartDataTableFormat.set({ ... }) .
FormatUpdateData

Excel.Interfaces.    Represents the data table object of a chart.
ChartDataTable
LoadOptions

Excel.Interfaces.    An interface for updating data on the ChartDataTable object, for use in
ChartDataTable       chartDataTable.set({ ... }) .
UpdateData

Excel.Interfaces.    An interface describing the data returned by calling
ChartErrorBarsData   chartErrorBars.toJSON() .


Excel.Interfaces.    An interface describing the data returned by calling
ChartErrorBars       chartErrorBarsFormat.toJSON() .
FormatData

Excel.Interfaces.    Encapsulates the format properties for chart error bars.
ChartErrorBars
FormatLoad
Options

Excel.Interfaces.    An interface for updating data on the ChartErrorBarsFormat object, for use
ChartErrorBars       in chartErrorBarsFormat.set({ ... }) .
FormatUpdateData

Excel.Interfaces.    This object represents the attributes for a chart's error bars.
ChartErrorBarsLoad
 Options

Excel.Interfaces.    An interface for updating data on the ChartErrorBars object, for use in
ChartErrorBars       chartErrorBars.set({ ... }) .
UpdateData

Excel.Interfaces.    An interface describing the data returned by calling chartFont.toJSON() .
ChartFontData

Excel.Interfaces.    This object represents the font attributes (such as font name, font size, and
ChartFontLoad        color) for a chart object.
Options

Excel.Interfaces.    An interface for updating data on the ChartFont object, for use in
ChartFontUpdate      chartFont.set({ ... }) .
Data

Excel.Interfaces.    An interface describing the data returned by calling
ChartFormatString    chartFormatString.toJSON() .
Data

Excel.Interfaces.    Represents the substring in chart related objects that contain text, like a
ChartFormatString    ChartTitle object or ChartAxisTitle object.
LoadOptions

Excel.Interfaces.    An interface for updating data on the ChartFormatString object, for use in
ChartFormatString    chartFormatString.set({ ... }) .
UpdateData

Excel.Interfaces.    An interface describing the data returned by calling
ChartGridlinesData   chartGridlines.toJSON() .


Excel.Interfaces.    An interface describing the data returned by calling
ChartGridlines       chartGridlinesFormat.toJSON() .
FormatData

Excel.Interfaces.    Encapsulates the format properties for chart gridlines.
ChartGridlines
FormatLoad
Options

Excel.Interfaces.    An interface for updating data on the ChartGridlinesFormat object, for use
ChartGridlines       in chartGridlinesFormat.set({ ... }) .
FormatUpdateData

Excel.Interfaces.    Represents major or minor gridlines on a chart axis.
ChartGridlinesLoad
Options

Excel.Interfaces.    An interface for updating data on the ChartGridlines object, for use in
ChartGridlines       chartGridlines.set({ ... }) .
UpdateData
 Excel.Interfaces.   An interface describing the data returned by calling chartLegend.toJSON() .
ChartLegendData

Excel.Interfaces.   An interface describing the data returned by calling
ChartLegendEntry    chartLegendEntryCollection.toJSON() .
CollectionData

Excel.Interfaces.   Represents a collection of legend entries.
ChartLegendEntry
CollectionLoad
Options

Excel.Interfaces.   An interface for updating data on the ChartLegendEntryCollection object,
ChartLegendEntry    for use in chartLegendEntryCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.   An interface describing the data returned by calling
ChartLegendEntry    chartLegendEntry.toJSON() .
Data

Excel.Interfaces.   Represents the legend entry in legendEntryCollection .
ChartLegendEntry
LoadOptions

Excel.Interfaces.   An interface for updating data on the ChartLegendEntry object, for use in
ChartLegendEntry    chartLegendEntry.set({ ... }) .
UpdateData

Excel.Interfaces.   An interface describing the data returned by calling
ChartLegend         chartLegendFormat.toJSON() .
FormatData

Excel.Interfaces.   Encapsulates the format properties of a chart legend.
ChartLegend
FormatLoad
Options

Excel.Interfaces.   An interface for updating data on the ChartLegendFormat object, for use in
ChartLegend         chartLegendFormat.set({ ... }) .
FormatUpdateData

Excel.Interfaces.   Represents the legend in a chart.
ChartLegendLoad
Options

Excel.Interfaces.   An interface for updating data on the ChartLegend object, for use in
ChartLegend         chartLegend.set({ ... }) .
UpdateData
 Excel.Interfaces.   An interface describing the data returned by calling
ChartLineFormat     chartLineFormat.toJSON() .
Data

Excel.Interfaces.   Encapsulates the formatting options for line elements.
ChartLineFormat
LoadOptions

Excel.Interfaces.   An interface for updating data on the ChartLineFormat object, for use in
ChartLineFormat     chartLineFormat.set({ ... }) .
UpdateData

Excel.Interfaces.   Represents a chart object in a workbook. To learn more about the chart
ChartLoadOptions    object model, see Work with charts using the Excel JavaScript API.

Excel.Interfaces.   An interface describing the data returned by calling
ChartMapOptions     chartMapOptions.toJSON() .
Data

Excel.Interfaces.   Encapsulates the properties for a region map chart.
ChartMapOptions
LoadOptions

Excel.Interfaces.   An interface for updating data on the ChartMapOptions object, for use in
ChartMapOptions     chartMapOptions.set({ ... }) .
UpdateData

Excel.Interfaces.   An interface describing the data returned by calling
ChartPivotOptions   chartPivotOptions.toJSON() .
Data

Excel.Interfaces.   Encapsulates the options for the pivot chart.
ChartPivotOptions
LoadOptions

Excel.Interfaces.   An interface for updating data on the ChartPivotOptions object, for use in
ChartPivotOptions   chartPivotOptions.set({ ... }) .
UpdateData

Excel.Interfaces.   An interface describing the data returned by calling
ChartPlotAreaData   chartPlotArea.toJSON() .


Excel.Interfaces.   An interface describing the data returned by calling
ChartPlotArea       chartPlotAreaFormat.toJSON() .
FormatData

Excel.Interfaces.   Represents the format properties for a chart plot area.
ChartPlotArea
FormatLoad
Options
 Excel.Interfaces.   An interface for updating data on the ChartPlotAreaFormat object, for use
ChartPlotArea       in chartPlotAreaFormat.set({ ... }) .
FormatUpdateData

Excel.Interfaces.   This object represents the attributes for a chart plot area.
ChartPlotAreaLoad
Options

Excel.Interfaces.   An interface for updating data on the ChartPlotArea object, for use in
ChartPlotArea       chartPlotArea.set({ ... }) .
UpdateData

Excel.Interfaces.   An interface describing the data returned by calling chartPoint.toJSON() .
ChartPointData

Excel.Interfaces.   An interface describing the data returned by calling
ChartPointFormat    chartPointFormat.toJSON() .
Data

Excel.Interfaces.   Represents the formatting object for chart points.
ChartPointFormat
LoadOptions

Excel.Interfaces.   An interface for updating data on the ChartPointFormat object, for use in
ChartPointFormat    chartPointFormat.set({ ... }) .
UpdateData

Excel.Interfaces.   Represents a point of a series in a chart.
ChartPointLoad
Options

Excel.Interfaces.   An interface describing the data returned by calling
ChartPoints         chartPointsCollection.toJSON() .
CollectionData

Excel.Interfaces.   A collection of all the chart points within a series inside a chart.
ChartPoints
CollectionLoad
Options

Excel.Interfaces.   An interface for updating data on the ChartPointsCollection object, for use
ChartPoints         in chartPointsCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.   An interface for updating data on the ChartPoint object, for use in
ChartPointUpdate    chartPoint.set({ ... }) .
Data

Excel.Interfaces.   An interface describing the data returned by calling
ChartSeries         chartSeriesCollection.toJSON() .
 CollectionData

Excel.Interfaces.   Represents a collection of chart series.
ChartSeries
CollectionLoad
Options

Excel.Interfaces.   An interface for updating data on the ChartSeriesCollection object, for use
ChartSeries         in chartSeriesCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.   An interface describing the data returned by calling chartSeries.toJSON() .
ChartSeriesData

Excel.Interfaces.   An interface describing the data returned by calling
ChartSeriesFormat   chartSeriesFormat.toJSON() .
Data

Excel.Interfaces.   Encapsulates the format properties for the chart series
ChartSeriesFormat
LoadOptions

Excel.Interfaces.   An interface for updating data on the ChartSeriesFormat object, for use in
ChartSeriesFormat   chartSeriesFormat.set({ ... }) .
UpdateData

Excel.Interfaces.   Represents a series in a chart.
ChartSeriesLoad
Options

Excel.Interfaces.   An interface for updating data on the ChartSeries object, for use in
ChartSeriesUpdate   chartSeries.set({ ... }) .
Data

Excel.Interfaces.   An interface describing the data returned by calling chartTitle.toJSON() .
ChartTitleData

Excel.Interfaces.   An interface describing the data returned by calling
ChartTitleFormat    chartTitleFormat.toJSON() .
Data

Excel.Interfaces.   Provides access to the formatting options for a chart title.
ChartTitleFormat
LoadOptions

Excel.Interfaces.   An interface for updating data on the ChartTitleFormat object, for use in
ChartTitleFormat    chartTitleFormat.set({ ... }) .
UpdateData

Excel.Interfaces.   Represents a chart title object of a chart.
ChartTitleLoad
 Options

Excel.Interfaces.    An interface for updating data on the ChartTitle object, for use in
ChartTitleUpdate     chartTitle.set({ ... }) .
Data

Excel.Interfaces.    An interface describing the data returned by calling
ChartTrendline       chartTrendlineCollection.toJSON() .
CollectionData

Excel.Interfaces.    Represents a collection of chart trendlines.
ChartTrendline
CollectionLoad
Options

Excel.Interfaces.    An interface for updating data on the ChartTrendlineCollection object, for
ChartTrendline       use in chartTrendlineCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.    An interface describing the data returned by calling
ChartTrendlineData   chartTrendline.toJSON() .


Excel.Interfaces.    An interface describing the data returned by calling
ChartTrendline       chartTrendlineFormat.toJSON() .
FormatData

Excel.Interfaces.    Represents the format properties for the chart trendline.
ChartTrendline
FormatLoad
Options

Excel.Interfaces.    An interface for updating data on the ChartTrendlineFormat object, for use
ChartTrendline       in chartTrendlineFormat.set({ ... }) .
FormatUpdateData

Excel.Interfaces.    An interface describing the data returned by calling
ChartTrendline       chartTrendlineLabel.toJSON() .
LabelData

Excel.Interfaces.    An interface describing the data returned by calling
ChartTrendline       chartTrendlineLabelFormat.toJSON() .
LabelFormatData

Excel.Interfaces.    Encapsulates the format properties for the chart trendline label.
ChartTrendline
LabelFormatLoad
Options

Excel.Interfaces.    An interface for updating data on the ChartTrendlineLabelFormat object, for
ChartTrendline       use in chartTrendlineLabelFormat.set({ ... }) .
 LabelFormatUpdate
Data

Excel.Interfaces.    This object represents the attributes for a chart trendline label object.
ChartTrendline
LabelLoadOptions

Excel.Interfaces.    An interface for updating data on the ChartTrendlineLabel object, for use in
ChartTrendline       chartTrendlineLabel.set({ ... }) .
LabelUpdateData

Excel.Interfaces.    This object represents the attributes for a chart trendline object.
ChartTrendlineLoad
Options

Excel.Interfaces.    An interface for updating data on the ChartTrendline object, for use in
ChartTrendline       chartTrendline.set({ ... }) .
UpdateData

Excel.Interfaces.    An interface for updating data on the Chart object, for use in chart.set({
ChartUpdateData      ... }) .


Excel.Interfaces.    Provides ways to load properties of only a subset of members of a
CollectionLoad       collection.
Options

Excel.Interfaces.    An interface describing the data returned by calling
ColorScale           colorScaleConditionalFormat.toJSON() .
ConditionalFormat
Data

Excel.Interfaces.    Represents the color scale criteria for conditional formatting.
ColorScale
ConditionalFormat
LoadOptions

Excel.Interfaces.    An interface for updating data on the ColorScaleConditionalFormat object,
ColorScale           for use in colorScaleConditionalFormat.set({ ... }) .
ConditionalFormat
UpdateData

Excel.Interfaces.    An interface describing the data returned by calling
Comment              commentCollection.toJSON() .
CollectionData

Excel.Interfaces.    Represents a collection of comment objects that are part of the workbook.
Comment
CollectionLoad
Options
 Excel.Interfaces.    An interface for updating data on the CommentCollection object, for use in
Comment              commentCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.    An interface describing the data returned by calling comment.toJSON() .
CommentData

Excel.Interfaces.    Represents a comment in the workbook.
CommentLoad
Options

Excel.Interfaces.    An interface describing the data returned by calling
CommentReply         commentReplyCollection.toJSON() .
CollectionData

Excel.Interfaces.    Represents a collection of comment reply objects that are part of the
CommentReply         comment.
CollectionLoad
Options

Excel.Interfaces.    An interface for updating data on the CommentReplyCollection object, for
CommentReply         use in commentReplyCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.    An interface describing the data returned by calling commentReply.toJSON() .
CommentReply
Data

Excel.Interfaces.    Represents a comment reply in the workbook.
CommentReply
LoadOptions

Excel.Interfaces.    An interface for updating data on the CommentReply object, for use in
CommentReply         commentReply.set({ ... }) .
UpdateData

Excel.Interfaces.    An interface for updating data on the Comment object, for use in
CommentUpdate        comment.set({ ... }) .
Data

Excel.Interfaces.    An interface describing the data returned by calling
ConditionalDataBar   conditionalDataBarNegativeFormat.toJSON() .
NegativeFormat
Data

Excel.Interfaces.    Represents a conditional format for the negative side of the data bar.
ConditionalDataBar
NegativeFormat
LoadOptions
 Excel.Interfaces.    An interface for updating data on the ConditionalDataBarNegativeFormat
ConditionalDataBar   object, for use in conditionalDataBarNegativeFormat.set({ ... }) .
NegativeFormat
UpdateData

Excel.Interfaces.    An interface describing the data returned by calling
ConditionalDataBar   conditionalDataBarPositiveFormat.toJSON() .
PositiveFormatData

Excel.Interfaces.    Represents a conditional format for the positive side of the data bar.
ConditionalDataBar
PositiveFormatLoad
Options

Excel.Interfaces.    An interface for updating data on the ConditionalDataBarPositiveFormat
ConditionalDataBar   object, for use in conditionalDataBarPositiveFormat.set({ ... }) .
PositiveFormat
UpdateData

Excel.Interfaces.    An interface describing the data returned by calling
ConditionalFormat    conditionalFormatCollection.toJSON() .
CollectionData

Excel.Interfaces.    Represents a collection of all the conditional formats that are overlap the
ConditionalFormat    range.
CollectionLoad
Options

Excel.Interfaces.    An interface for updating data on the ConditionalFormatCollection object,
ConditionalFormat    for use in conditionalFormatCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.    An interface describing the data returned by calling
ConditionalFormat    conditionalFormat.toJSON() .
Data

Excel.Interfaces.    An object encapsulating a conditional format's range, format, rule, and
ConditionalFormat    other properties. To learn more about the conditional formatting object
LoadOptions          model, read Apply conditional formatting to Excel ranges.

Excel.Interfaces.    An interface describing the data returned by calling
ConditionalFormat    conditionalFormatRule.toJSON() .
RuleData

Excel.Interfaces.    Represents a rule, for all traditional rule/format pairings.
ConditionalFormat
RuleLoadOptions

Excel.Interfaces.    An interface for updating data on the ConditionalFormatRule object, for use
ConditionalFormat    in conditionalFormatRule.set({ ... }) .
 RuleUpdateData

Excel.Interfaces.   An interface for updating data on the ConditionalFormat object, for use in
ConditionalFormat   conditionalFormat.set({ ... }) .
UpdateData

Excel.Interfaces.   An interface describing the data returned by calling
ConditionalRange    conditionalRangeBorderCollection.toJSON() .
BorderCollection
Data

Excel.Interfaces.   Represents the border objects that make up range border.
ConditionalRange
BorderCollection
LoadOptions

Excel.Interfaces.   An interface for updating data on the ConditionalRangeBorderCollection
ConditionalRange    object, for use in conditionalRangeBorderCollection.set({ ... }) .
BorderCollection
UpdateData

Excel.Interfaces.   An interface describing the data returned by calling
ConditionalRange    conditionalRangeBorder.toJSON() .
BorderData

Excel.Interfaces.   Represents the border of an object.
ConditionalRange
BorderLoadOptions

Excel.Interfaces.   An interface for updating data on the ConditionalRangeBorder object, for
ConditionalRange    use in conditionalRangeBorder.set({ ... }) .
BorderUpdateData

Excel.Interfaces.   An interface describing the data returned by calling
ConditionalRange    conditionalRangeFill.toJSON() .
FillData

Excel.Interfaces.   Represents the background of a conditional range object.
ConditionalRange
FillLoadOptions

Excel.Interfaces.   An interface for updating data on the ConditionalRangeFill object, for use in
ConditionalRange    conditionalRangeFill.set({ ... }) .
FillUpdateData

Excel.Interfaces.   An interface describing the data returned by calling
ConditionalRange    conditionalRangeFont.toJSON() .
FontData

Excel.Interfaces.   This object represents the font attributes (font style, color, etc.) for an
ConditionalRange    object.
 FontLoadOptions

Excel.Interfaces.   An interface for updating data on the ConditionalRangeFont object, for use
ConditionalRange    in conditionalRangeFont.set({ ... }) .
FontUpdateData

Excel.Interfaces.   An interface describing the data returned by calling
ConditionalRange    conditionalRangeFormat.toJSON() .
FormatData

Excel.Interfaces.   A format object encapsulating the conditional formats range's font, fill,
ConditionalRange    borders, and other properties.
FormatLoad
Options

Excel.Interfaces.   An interface for updating data on the ConditionalRangeFormat object, for
ConditionalRange    use in conditionalRangeFormat.set({ ... }) .
FormatUpdateData

Excel.Interfaces.   An interface describing the data returned by calling cultureInfo.toJSON() .
CultureInfoData

Excel.Interfaces.   Provides information based on current system culture settings. This
CultureInfoLoad     includes the culture names, number formatting, and other culturally
Options             dependent settings.

Excel.Interfaces.   An interface describing the data returned by calling
CustomConditional   customConditionalFormat.toJSON() .
FormatData

Excel.Interfaces.   Represents a custom conditional format type.
CustomConditional
FormatLoad
Options

Excel.Interfaces.   An interface for updating data on the CustomConditionalFormat object, for
CustomConditional   use in customConditionalFormat.set({ ... }) .
FormatUpdateData

Excel.Interfaces.   An interface describing the data returned by calling
CustomProperty      customPropertyCollection.toJSON() .
CollectionData

Excel.Interfaces.   Contains the collection of custom properties.
CustomProperty
CollectionLoad
Options

Excel.Interfaces.   An interface for updating data on the CustomPropertyCollection object, for
CustomProperty      use in customPropertyCollection.set({ ... }) .
 CollectionUpdate
Data

Excel.Interfaces.   An interface describing the data returned by calling
CustomProperty      customProperty.toJSON() .
Data

Excel.Interfaces.   Represents a custom property.
CustomProperty
LoadOptions

Excel.Interfaces.   An interface for updating data on the CustomProperty object, for use in
CustomProperty      customProperty.set({ ... }) .
UpdateData

Excel.Interfaces.   An interface describing the data returned by calling
CustomXmlPart       customXmlPartCollection.toJSON() .
CollectionData

Excel.Interfaces.   A collection of custom XML parts.
CustomXmlPart
CollectionLoad
Options

Excel.Interfaces.   An interface for updating data on the CustomXmlPartCollection object, for
CustomXmlPart       use in customXmlPartCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.   An interface describing the data returned by calling
CustomXmlPart       customXmlPart.toJSON() .
Data

Excel.Interfaces.   Represents a custom XML part object in a workbook.
CustomXmlPart
LoadOptions

Excel.Interfaces.   An interface describing the data returned by calling
CustomXmlPart       customXmlPartScopedCollection.toJSON() .
ScopedCollection
Data

Excel.Interfaces.   A scoped collection of custom XML parts. A scoped collection is the result
CustomXmlPart       of some operation (e.g., filtering by namespace). A scoped collection
ScopedCollection    cannot be scoped any further.
LoadOptions

Excel.Interfaces.   An interface for updating data on the CustomXmlPartScopedCollection
CustomXmlPart       object, for use in customXmlPartScopedCollection.set({ ... }) .
ScopedCollection
UpdateData
 Excel.Interfaces.    An interface describing the data returned by calling
DataBarConditional   dataBarConditionalFormat.toJSON() .
FormatData

Excel.Interfaces.    Represents an Excel conditional data bar type.
DataBarConditional
FormatLoad
Options

Excel.Interfaces.    An interface for updating data on the DataBarConditionalFormat object, for
DataBarConditional   use in dataBarConditionalFormat.set({ ... }) .
FormatUpdateData

Excel.Interfaces.    An interface describing the data returned by calling
DataPivotHierarchy   dataPivotHierarchyCollection.toJSON() .
CollectionData

Excel.Interfaces.    Represents a collection of DataPivotHierarchy items associated with the
DataPivotHierarchy   PivotTable.
CollectionLoad
Options

Excel.Interfaces.    An interface for updating data on the DataPivotHierarchyCollection object,
DataPivotHierarchy   for use in dataPivotHierarchyCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.    An interface describing the data returned by calling
DataPivotHierarchy   dataPivotHierarchy.toJSON() .
Data

Excel.Interfaces.    Represents the Excel DataPivotHierarchy.
DataPivotHierarchy
LoadOptions

Excel.Interfaces.    An interface for updating data on the DataPivotHierarchy object, for use in
DataPivotHierarchy   dataPivotHierarchy.set({ ... }) .
UpdateData

Excel.Interfaces.    An interface describing the data returned by calling
DataValidationData   dataValidation.toJSON() .


Excel.Interfaces.    Represents the data validation applied to the current range. To learn more
DataValidationLoad   about the data validation object model, read Add data validation to Excel
Options              ranges.

Excel.Interfaces.    An interface for updating data on the DataValidation object, for use in
DataValidation       dataValidation.set({ ... }) .
UpdateData
 Excel.Interfaces.   An interface describing the data returned by calling
DatetimeFormat      datetimeFormatInfo.toJSON() .
InfoData

Excel.Interfaces.   Defines the culturally appropriate format of displaying numbers. This is
DatetimeFormat      based on current system culture settings.
InfoLoadOptions

Excel.Interfaces.   An interface describing the data returned by calling
Document            documentProperties.toJSON() .
PropertiesData

Excel.Interfaces.   Represents workbook properties.
Document
PropertiesLoad
Options

Excel.Interfaces.   An interface for updating data on the DocumentProperties object, for use in
Document            documentProperties.set({ ... }) .
PropertiesUpdate
Data

Excel.Interfaces.   An interface describing the data returned by calling
DocumentTask        documentTaskChangeCollection.toJSON() .
ChangeCollection
Data

Excel.Interfaces.   Represents a collection of change records for a task.
DocumentTask
ChangeCollection
LoadOptions

Excel.Interfaces.   An interface for updating data on the DocumentTaskChangeCollection
DocumentTask        object, for use in documentTaskChangeCollection.set({ ... }) .
ChangeCollection
UpdateData

Excel.Interfaces.   An interface describing the data returned by calling
DocumentTask        documentTaskChange.toJSON() .
ChangeData

Excel.Interfaces.   Represents a recorded change to the task.
DocumentTask
ChangeLoad
Options

Excel.Interfaces.   An interface describing the data returned by calling
DocumentTask        documentTaskCollection.toJSON() .
CollectionData
 Excel.Interfaces.      Represents a collection of tasks.
DocumentTask
CollectionLoad
Options

Excel.Interfaces.      An interface for updating data on the DocumentTaskCollection object, for
DocumentTask           use in documentTaskCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.      An interface describing the data returned by calling documentTask.toJSON() .
DocumentTaskData

Excel.Interfaces.      Represents a task.
DocumentTaskLoad
Options

Excel.Interfaces.      An interface for updating data on the DocumentTask object, for use in
DocumentTask           documentTask.set({ ... }) .
UpdateData

Excel.Interfaces.      An interface describing the data returned by calling filter.toJSON() .
FilterData

Excel.Interfaces.      Manages the filtering of a table's column.
FilterLoadOptions

Excel.Interfaces.      An interface describing the data returned by calling
FilterPivotHierarchy   filterPivotHierarchyCollection.toJSON() .
CollectionData

Excel.Interfaces.      Represents a collection of FilterPivotHierarchy items associated with the
FilterPivotHierarchy   PivotTable.
CollectionLoad
Options

Excel.Interfaces.      An interface for updating data on the FilterPivotHierarchyCollection object,
FilterPivotHierarchy   for use in filterPivotHierarchyCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.      An interface describing the data returned by calling
FilterPivotHierarchy   filterPivotHierarchy.toJSON() .
Data

Excel.Interfaces.      Represents the Excel FilterPivotHierarchy.
FilterPivotHierarchy
LoadOptions

Excel.Interfaces.      An interface for updating data on the FilterPivotHierarchy object, for use in
FilterPivotHierarchy   filterPivotHierarchy.set({ ... }) .
 UpdateData

Excel.Interfaces.    An interface describing the data returned by calling
FormatProtection     formatProtection.toJSON() .
Data

Excel.Interfaces.    Represents the format protection of a range object.
FormatProtection
LoadOptions

Excel.Interfaces.    An interface for updating data on the FormatProtection object, for use in
FormatProtection     formatProtection.set({ ... }) .
UpdateData

Excel.Interfaces.    An interface describing the data returned by calling
FunctionResultData   functionResult.toJSON() .


Excel.Interfaces.    An object containing the result of a function-evaluation operation
FunctionResultLoad
Options

Excel.Interfaces.    An interface describing the data returned by calling
GeometricShape       geometricShape.toJSON() .
Data

Excel.Interfaces.    Represents a geometric shape inside a worksheet. A geometric shape can
GeometricShape       be a rectangle, block arrow, equation symbol, flowchart item, star, banner,
LoadOptions          callout, or any other basic shape in Excel.

Excel.Interfaces.    An interface describing the data returned by calling
GroupShape           groupShapeCollection.toJSON() .
CollectionData

Excel.Interfaces.    Represents the shape collection inside a shape group.
GroupShape
CollectionLoad
Options

Excel.Interfaces.    An interface for updating data on the GroupShapeCollection object, for use
GroupShape           in groupShapeCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.    An interface describing the data returned by calling headerFooter.toJSON() .
HeaderFooterData

Excel.Interfaces.    An interface describing the data returned by calling
HeaderFooter         headerFooterGroup.toJSON() .
GroupData

Excel.Interfaces.HeaderFooterGroupLoadOptions
 Excel.Interfaces.       An interface for updating data on the HeaderFooterGroup object, for use in
HeaderFooter            headerFooterGroup.set({ ... }) .
GroupUpdateData

Excel.Interfaces.HeaderFooterLoadOptions

Excel.Interfaces.       An interface for updating data on the HeaderFooter object, for use in
HeaderFooter            headerFooter.set({ ... }) .
UpdateData

Excel.Interfaces.       An interface describing the data returned by calling
IconSetConditional      iconSetConditionalFormat.toJSON() .
FormatData

Excel.Interfaces.       Represents an icon set criteria for conditional formatting.
IconSetConditional
FormatLoad
Options

Excel.Interfaces.       An interface for updating data on the IconSetConditionalFormat object, for
IconSetConditional      use in iconSetConditionalFormat.set({ ... }) .
FormatUpdateData

Excel.Interfaces.       An interface describing the data returned by calling image.toJSON() .
ImageData

Excel.Interfaces.       Represents an image in the worksheet. To get the corresponding Shape
ImageLoadOptions        object, use Image.shape .

Excel.Interfaces.       An interface describing the data returned by calling
IterativeCalculation    iterativeCalculation.toJSON() .
Data

Excel.Interfaces.       Represents the iterative calculation settings.
IterativeCalculation
LoadOptions

Excel.Interfaces.       An interface for updating data on the IterativeCalculation object, for use in
IterativeCalculation    iterativeCalculation.set({ ... }) .
UpdateData

Excel.Interfaces.Line   An interface describing the data returned by calling line.toJSON() .
Data

Excel.Interfaces.Line   Represents a line inside a worksheet. To get the corresponding Shape
LoadOptions             object, use Line.shape .

Excel.Interfaces.Line   An interface for updating data on the Line object, for use in line.set({ ...
UpdateData              }) .
 Excel.Interfaces.   An interface describing the data returned by calling
LinkedDataType      linkedDataTypeCollection.toJSON() .
CollectionData

Excel.Interfaces.   Represents a collection of linked data types.
LinkedDataType
CollectionLoad
Options

Excel.Interfaces.   An interface for updating data on the LinkedDataTypeCollection object, for
LinkedDataType      use in linkedDataTypeCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.   An interface describing the data returned by calling
LinkedDataType      linkedDataType.toJSON() .
Data

Excel.Interfaces.   Represents a linked data type. A linked data type is a data type connected
LinkedDataType      to an online data source.
LoadOptions

Excel.Interfaces.   An interface describing the data returned by calling
LinkedWorkbook      linkedWorkbookCollection.toJSON() .
CollectionData

Excel.Interfaces.   Represents a collection of linked workbook objects.
LinkedWorkbook
CollectionLoad
Options

Excel.Interfaces.   An interface for updating data on the LinkedWorkbookCollection object, for
LinkedWorkbook      use in linkedWorkbookCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.   An interface describing the data returned by calling
LinkedWorkbook      linkedWorkbook.toJSON() .
Data

Excel.Interfaces.   Contains information about a linked workbook. If a workbook has links
LinkedWorkbook      pointing to data in another workbook, the second workbook is linked to the
LoadOptions         first workbook. In this scenario, the second workbook is called the "linked
                    workbook".

Excel.Interfaces.   An interface describing the data returned by calling
NamedItemArray      namedItemArrayValues.toJSON() .
ValuesData

Excel.Interfaces.   Represents an object containing values and types of a named item.
NamedItemArray
 ValuesLoadOptions

Excel.Interfaces.   An interface describing the data returned by calling
NamedItem           namedItemCollection.toJSON() .
CollectionData

Excel.Interfaces.   A collection of all the NamedItem objects that are part of the workbook or
NamedItem           worksheet, depending on how it was reached.
CollectionLoad
Options

Excel.Interfaces.   An interface for updating data on the NamedItemCollection object, for use
NamedItem           in namedItemCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.   An interface describing the data returned by calling namedItem.toJSON() .
NamedItemData

Excel.Interfaces.   Represents a defined name for a range of cells or value. Names can be
NamedItemLoad       primitive named objects (as seen in the type below), range object, or a
Options             reference to a range. This object can be used to obtain range object
                    associated with names.

Excel.Interfaces.   An interface for updating data on the NamedItem object, for use in
NamedItemUpdate     namedItem.set({ ... }) .
Data

Excel.Interfaces.   An interface describing the data returned by calling
NamedSheetView      namedSheetViewCollection.toJSON() .
CollectionData

Excel.Interfaces.   Represents the collection of sheet views in the worksheet.
NamedSheetView
CollectionLoad
Options

Excel.Interfaces.   An interface for updating data on the NamedSheetViewCollection object,
NamedSheetView      for use in namedSheetViewCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.   An interface describing the data returned by calling
NamedSheetView      namedSheetView.toJSON() .
Data

Excel.Interfaces.   Represents a named sheet view of a worksheet. A sheet view stores the sort
NamedSheetView      and filter rules for a particular worksheet. Every sheet view (even a
LoadOptions         temporary sheet view) has a unique, worksheet-scoped name that is used
                    to access the view.
 Excel.Interfaces.      An interface for updating data on the NamedSheetView object, for use in
NamedSheetView         namedSheetView.set({ ... }) .
UpdateData

Excel.Interfaces.      An interface describing the data returned by calling
NumberFormatInfo       numberFormatInfo.toJSON() .
Data

Excel.Interfaces.      Defines the culturally appropriate format of displaying numbers. This is
NumberFormatInfo       based on current system culture settings.
LoadOptions

Excel.Interfaces.      An interface describing the data returned by calling
PageBreak              pageBreakCollection.toJSON() .
CollectionData

Excel.Interfaces.PageBreakCollectionLoadOptions

Excel.Interfaces.      An interface for updating data on the PageBreakCollection object, for use in
PageBreak              pageBreakCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.      An interface describing the data returned by calling pageBreak.toJSON() .
PageBreakData

Excel.Interfaces.PageBreakLoadOptions

Excel.Interfaces.      An interface describing the data returned by calling pageLayout.toJSON() .
PageLayoutData

Excel.Interfaces.      Represents layout and print settings that are not dependent on any printer-
PageLayoutLoad         specific implementation. These settings include margins, orientation, page
Options                numbering, title rows, and print area.

Excel.Interfaces.      An interface for updating data on the PageLayout object, for use in
PageLayoutUpdate       pageLayout.set({ ... }) .
Data

Excel.Interfaces.      An interface describing the data returned by calling
PivotFieldCollection   pivotFieldCollection.toJSON() .
Data

Excel.Interfaces.      Represents a collection of all the PivotFields that are part of a PivotTable's
PivotFieldCollection   hierarchy.
LoadOptions

Excel.Interfaces.      An interface for updating data on the PivotFieldCollection object, for use in
PivotFieldCollection   pivotFieldCollection.set({ ... }) .
UpdateData
 Excel.Interfaces.     An interface describing the data returned by calling pivotField.toJSON() .
PivotFieldData

Excel.Interfaces.     Represents the Excel PivotField.
PivotFieldLoad
Options

Excel.Interfaces.     An interface for updating data on the PivotField object, for use in
PivotFieldUpdate      pivotField.set({ ... }) .
Data

Excel.Interfaces.     An interface describing the data returned by calling
PivotHierarchy        pivotHierarchyCollection.toJSON() .
CollectionData

Excel.Interfaces.     Represents a collection of all the PivotHierarchies that are part of the
PivotHierarchy        PivotTable.
CollectionLoad
Options

Excel.Interfaces.     An interface for updating data on the PivotHierarchyCollection object, for
PivotHierarchy        use in pivotHierarchyCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.     An interface describing the data returned by calling
PivotHierarchyData    pivotHierarchy.toJSON() .


Excel.Interfaces.     Represents the Excel PivotHierarchy.
PivotHierarchyLoad
Options

Excel.Interfaces.     An interface for updating data on the PivotHierarchy object, for use in
PivotHierarchy        pivotHierarchy.set({ ... }) .
UpdateData

Excel.Interfaces.     An interface describing the data returned by calling
PivotItemCollection   pivotItemCollection.toJSON() .
Data

Excel.Interfaces.     Represents a collection of all the PivotItems related to their parent
PivotItemCollection   PivotField.
LoadOptions

Excel.Interfaces.     An interface for updating data on the PivotItemCollection object, for use in
PivotItemCollection   pivotItemCollection.set({ ... }) .
UpdateData

Excel.Interfaces.     An interface describing the data returned by calling pivotItem.toJSON() .
PivotItemData
 Excel.Interfaces.   Represents the Excel PivotItem.
PivotItemLoad
Options

Excel.Interfaces.   An interface for updating data on the PivotItem object, for use in
PivotItemUpdate     pivotItem.set({ ... }) .
Data

Excel.Interfaces.   An interface describing the data returned by calling pivotLayout.toJSON() .
PivotLayoutData

Excel.Interfaces.   Represents the visual layout of the PivotTable.
PivotLayoutLoad
Options

Excel.Interfaces.   An interface for updating data on the PivotLayout object, for use in
PivotLayoutUpdate   pivotLayout.set({ ... }) .
Data

Excel.Interfaces.   An interface describing the data returned by calling
PivotTable          pivotTableCollection.toJSON() .
CollectionData

Excel.Interfaces.   Represents a collection of all the PivotTables that are part of the workbook
PivotTable          or worksheet.
CollectionLoad
Options

Excel.Interfaces.   An interface for updating data on the PivotTableCollection object, for use in
PivotTable          pivotTableCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.   An interface describing the data returned by calling pivotTable.toJSON() .
PivotTableData

Excel.Interfaces.   Represents an Excel PivotTable. To learn more about the PivotTable object
PivotTableLoad      model, read Work with PivotTables using the Excel JavaScript API.
Options

Excel.Interfaces.   An interface describing the data returned by calling
PivotTableScoped    pivotTableScopedCollection.toJSON() .
CollectionData

Excel.Interfaces.   Represents a scoped collection of PivotTables. The PivotTables are sorted
PivotTableScoped    based on the location of the PivotTable's top-left corner. They are ordered
CollectionLoad      top-to-bottom and then left-to-right.
Options

Excel.Interfaces.   An interface for updating data on the PivotTableScopedCollection object,
PivotTableScoped    for use in pivotTableScopedCollection.set({ ... }) .
 CollectionUpdate
Data

Excel.Interfaces.     An interface describing the data returned by calling
PivotTableStyle       pivotTableStyleCollection.toJSON() .
CollectionData

Excel.Interfaces.     Represents a collection of PivotTable styles.
PivotTableStyle
CollectionLoad
Options

Excel.Interfaces.     An interface for updating data on the PivotTableStyleCollection object, for
PivotTableStyle       use in pivotTableStyleCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.     An interface describing the data returned by calling
PivotTableStyleData   pivotTableStyle.toJSON() .


Excel.Interfaces.     Represents a PivotTable style, which defines style elements by PivotTable
PivotTableStyle       region.
LoadOptions

Excel.Interfaces.     An interface for updating data on the PivotTableStyle object, for use in
PivotTableStyle       pivotTableStyle.set({ ... }) .
UpdateData

Excel.Interfaces.     An interface for updating data on the PivotTable object, for use in
PivotTableUpdate      pivotTable.set({ ... }) .
Data

Excel.Interfaces.     An interface describing the data returned by calling
PresetCriteria        presetCriteriaConditionalFormat.toJSON() .
ConditionalFormat
Data

Excel.Interfaces.     Represents the preset criteria conditional format such as above average,
PresetCriteria        below average, unique values, contains blank, nonblank, error, and noerror.
ConditionalFormat
LoadOptions

Excel.Interfaces.     An interface for updating data on the PresetCriteriaConditionalFormat
PresetCriteria        object, for use in presetCriteriaConditionalFormat.set({ ... }) .
ConditionalFormat
UpdateData

Excel.Interfaces.     An interface describing the data returned by calling
QueryCollection       queryCollection.toJSON() .
Data
 Excel.Interfaces.   Represents the collection of queries in the workbook.
QueryCollection
LoadOptions

Excel.Interfaces.   An interface for updating data on the QueryCollection object, for use in
QueryCollection     queryCollection.set({ ... }) .
UpdateData

Excel.Interfaces.   An interface describing the data returned by calling query.toJSON() .
QueryData

Excel.Interfaces.   Represents a Power Query query.
QueryLoadOptions

Excel.Interfaces.   An interface describing the data returned by calling
RangeAreas          rangeAreasCollection.toJSON() .
CollectionData

Excel.Interfaces.   Contains the collection of cross-workbook level ranges.
RangeAreas
CollectionLoad
Options

Excel.Interfaces.   An interface for updating data on the RangeAreasCollection object, for use
RangeAreas          in rangeAreasCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.   An interface describing the data returned by calling rangeAreas.toJSON() .
RangeAreasData

Excel.Interfaces.   RangeAreas represents a collection of one or more rectangular ranges in the
RangeAreasLoad      same worksheet. To learn how to use discontiguous ranges, read Work with
Options             multiple ranges simultaneously in Excel add-ins.

Excel.Interfaces.   An interface for updating data on the RangeAreas object, for use in
RangeAreasUpdate    rangeAreas.set({ ... }) .
Data

Excel.Interfaces.   An interface describing the data returned by calling
RangeBorder         rangeBorderCollection.toJSON() .
CollectionData

Excel.Interfaces.   Represents the border objects that make up the range border.
RangeBorder
CollectionLoad
Options

Excel.Interfaces.   An interface for updating data on the RangeBorderCollection object, for use
RangeBorder         in rangeBorderCollection.set({ ... }) .
 CollectionUpdate
Data

Excel.Interfaces.    An interface describing the data returned by calling rangeBorder.toJSON() .
RangeBorderData

Excel.Interfaces.    Represents the border of an object.
RangeBorderLoad
Options

Excel.Interfaces.    An interface for updating data on the RangeBorder object, for use in
RangeBorder          rangeBorder.set({ ... }) .
UpdateData

Excel.Interfaces.    An interface describing the data returned by calling
RangeCollection      rangeCollection.toJSON() .
Data

Excel.Interfaces.RangeCollectionLoadOptions

Excel.Interfaces.    An interface for updating data on the RangeCollection object, for use in
RangeCollection      rangeCollection.set({ ... }) .
UpdateData

Excel.Interfaces.    An interface describing the data returned by calling range.toJSON() .
RangeData

Excel.Interfaces.    An interface describing the data returned by calling rangeFill.toJSON() .
RangeFillData

Excel.Interfaces.    Represents the background of a range object.
RangeFillLoad
Options

Excel.Interfaces.    An interface for updating data on the RangeFill object, for use in
RangeFillUpdate      rangeFill.set({ ... }) .
Data

Excel.Interfaces.    An interface describing the data returned by calling rangeFont.toJSON() .
RangeFontData

Excel.Interfaces.    This object represents the font attributes (font name, font size, color, etc.)
RangeFontLoad        for an object.
Options

Excel.Interfaces.    An interface for updating data on the RangeFont object, for use in
RangeFontUpdate      rangeFont.set({ ... }) .
Data

Excel.Interfaces.    An interface describing the data returned by calling rangeFormat.toJSON() .
RangeFormatData
 Excel.Interfaces.   A format object encapsulating the range's font, fill, borders, alignment, and
RangeFormatLoad     other properties.
Options

Excel.Interfaces.   An interface for updating data on the RangeFormat object, for use in
RangeFormat         rangeFormat.set({ ... }) .
UpdateData

Excel.Interfaces.   Range represents a set of one or more contiguous cells such as a cell, a
RangeLoadOptions    row, a column, or a block of cells. To learn more about how ranges are used
                    throughout the API, start with Ranges in the Excel JavaScript API.

Excel.Interfaces.   An interface for updating data on the Range object, for use in range.set({
RangeUpdateData     ... }) .


Excel.Interfaces.   An interface describing the data returned by calling
RangeView           rangeViewCollection.toJSON() .
CollectionData

Excel.Interfaces.   Represents a collection of RangeView objects.
RangeView
CollectionLoad
Options

Excel.Interfaces.   An interface for updating data on the RangeViewCollection object, for use
RangeView           in rangeViewCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.   An interface describing the data returned by calling rangeView.toJSON() .
RangeViewData

Excel.Interfaces.   RangeView represents a set of visible cells of the parent range.
RangeViewLoad
Options

Excel.Interfaces.   An interface for updating data on the RangeView object, for use in
RangeViewUpdate     rangeView.set({ ... }) .
Data

Excel.Interfaces.   An interface describing the data returned by calling
RemoveDuplicates    removeDuplicatesResult.toJSON() .
ResultData

Excel.Interfaces.   Represents the results from Range.removeDuplicates .
RemoveDuplicates
ResultLoadOptions

Excel.Interfaces.   An interface describing the data returned by calling
RowColumnPivot      rowColumnPivotHierarchyCollection.toJSON() .
 HierarchyCollection
Data

Excel.Interfaces.     Represents a collection of RowColumnPivotHierarchy items associated with
RowColumnPivot        the PivotTable.
HierarchyCollection
LoadOptions

Excel.Interfaces.     An interface for updating data on the RowColumnPivotHierarchyCollection
RowColumnPivot        object, for use in rowColumnPivotHierarchyCollection.set({ ... }) .
HierarchyCollection
UpdateData

Excel.Interfaces.     An interface describing the data returned by calling
RowColumnPivot        rowColumnPivotHierarchy.toJSON() .
HierarchyData

Excel.Interfaces.     Represents the Excel RowColumnPivotHierarchy.
RowColumnPivot
HierarchyLoad
Options

Excel.Interfaces.     An interface for updating data on the RowColumnPivotHierarchy object, for
RowColumnPivot        use in rowColumnPivotHierarchy.set({ ... }) .
HierarchyUpdate
Data

Excel.Interfaces.     An interface describing the data returned by calling runtime.toJSON() .
RuntimeData

Excel.Interfaces.     Represents the Excel Runtime class.
RuntimeLoad
Options

Excel.Interfaces.     An interface for updating data on the Runtime object, for use in
RuntimeUpdate         runtime.set({ ... }) .
Data

Excel.Interfaces.     An interface describing the data returned by calling
SettingCollection     settingCollection.toJSON() .
Data

Excel.Interfaces.     Represents a collection of key-value pair setting objects that are part of the
SettingCollection     workbook. The scope is limited to per file and add-in (task-pane or content)
LoadOptions           combination.

Excel.Interfaces.     An interface for updating data on the SettingCollection object, for use in
SettingCollection     settingCollection.set({ ... }) .
UpdateData

Excel.Interfaces.     An interface describing the data returned by calling setting.toJSON() .
 SettingData

Excel.Interfaces.   Setting represents a key-value pair of a setting persisted to the document
SettingLoad         (per file, per add-in). These custom key-value pair can be used to store
Options             state or lifecycle information needed by the content or task-pane add-in.
                    Note that settings are persisted in the document and hence it is not a place
                    to store any sensitive or protected information such as user information
                    and password.

Excel.Interfaces.   An interface for updating data on the Setting object, for use in
SettingUpdateData   setting.set({ ... }) .


Excel.Interfaces.   An interface describing the data returned by calling
ShapeCollection     shapeCollection.toJSON() .
Data

Excel.Interfaces.   Represents a collection of all the shapes in the worksheet.
ShapeCollection
LoadOptions

Excel.Interfaces.   An interface for updating data on the ShapeCollection object, for use in
ShapeCollection     shapeCollection.set({ ... }) .
UpdateData

Excel.Interfaces.   An interface describing the data returned by calling shape.toJSON() .
ShapeData

Excel.Interfaces.   An interface describing the data returned by calling shapeFill.toJSON() .
ShapeFillData

Excel.Interfaces.   Represents the fill formatting of a shape object.
ShapeFillLoad
Options

Excel.Interfaces.   An interface for updating data on the ShapeFill object, for use in
ShapeFillUpdate     shapeFill.set({ ... }) .
Data

Excel.Interfaces.   An interface describing the data returned by calling shapeFont.toJSON() .
ShapeFontData

Excel.Interfaces.   Represents the font attributes, such as font name, font size, and color, for a
ShapeFontLoad       shape's TextRange object.
Options

Excel.Interfaces.   An interface for updating data on the ShapeFont object, for use in
ShapeFontUpdate     shapeFont.set({ ... }) .
Data

Excel.Interfaces.   An interface describing the data returned by calling shapeGroup.toJSON() .
ShapeGroupData
 Excel.Interfaces.   Represents a shape group inside a worksheet. To get the corresponding
ShapeGroupLoad      Shape object, use ShapeGroup.shape .
Options

Excel.Interfaces.   An interface describing the data returned by calling
ShapeLineFormat     shapeLineFormat.toJSON() .
Data

Excel.Interfaces.   Represents the line formatting for the shape object. For images and
ShapeLineFormat     geometric shapes, line formatting represents the border of the shape.
LoadOptions

Excel.Interfaces.   An interface for updating data on the ShapeLineFormat object, for use in
ShapeLineFormat     shapeLineFormat.set({ ... }) .
UpdateData

Excel.Interfaces.   Represents a generic shape object in the worksheet. A shape could be a
ShapeLoadOptions    geometric shape, a line, a group of shapes, etc. To learn more about the
                    shape object model, read Work with shapes using the Excel JavaScript API.

Excel.Interfaces.   An interface for updating data on the Shape object, for use in shape.set({
ShapeUpdateData     ... }) .


Excel.Interfaces.   An interface describing the data returned by calling
SlicerCollection    slicerCollection.toJSON() .
Data

Excel.Interfaces.   Represents a collection of all the slicer objects in the workbook or a
SlicerCollection    worksheet.
LoadOptions

Excel.Interfaces.   An interface for updating data on the SlicerCollection object, for use in
SlicerCollection    slicerCollection.set({ ... }) .
UpdateData

Excel.Interfaces.   An interface describing the data returned by calling slicer.toJSON() .
SlicerData

Excel.Interfaces.   An interface describing the data returned by calling
SlicerItem          slicerItemCollection.toJSON() .
CollectionData

Excel.Interfaces.   Represents a collection of all the slicer item objects in the slicer.
SlicerItem
CollectionLoad
Options

Excel.Interfaces.   An interface for updating data on the SlicerItemCollection object, for use in
SlicerItem          slicerItemCollection.set({ ... }) .
CollectionUpdate
Data
 Excel.Interfaces.     An interface describing the data returned by calling slicerItem.toJSON() .
SlicerItemData

Excel.Interfaces.     Represents a slicer item in a slicer.
SlicerItemLoad
Options

Excel.Interfaces.     An interface for updating data on the SlicerItem object, for use in
SlicerItemUpdate      slicerItem.set({ ... }) .
Data

Excel.Interfaces.     Represents a Slicer object in the workbook.
SlicerLoadOptions

Excel.Interfaces.     An interface describing the data returned by calling
SlicerStyle           slicerStyleCollection.toJSON() .
CollectionData

Excel.Interfaces.     Represents a collection of SlicerStyle objects.
SlicerStyle
CollectionLoad
Options

Excel.Interfaces.     An interface for updating data on the SlicerStyleCollection object, for use in
SlicerStyle           slicerStyleCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.     An interface describing the data returned by calling slicerStyle.toJSON() .
SlicerStyleData

Excel.Interfaces.     Represents a slicer style, which defines style elements by region of the
SlicerStyleLoad       slicer.
Options

Excel.Interfaces.     An interface for updating data on the SlicerStyle object, for use in
SlicerStyleUpdate     slicerStyle.set({ ... }) .
Data

Excel.Interfaces.     An interface for updating data on the Slicer object, for use in slicer.set({
SlicerUpdateData      ... }) .


Excel.Interfaces.     An interface describing the data returned by calling
StyleCollectionData   styleCollection.toJSON() .


Excel.Interfaces.     Represents a collection of all the styles.
StyleCollectionLoad
Options

Excel.Interfaces.     An interface for updating data on the StyleCollection object, for use in
StyleCollection       styleCollection.set({ ... }) .
 UpdateData

Excel.Interfaces.   An interface describing the data returned by calling style.toJSON() .
StyleData

Excel.Interfaces.   An object encapsulating a style's format and other properties.
StyleLoadOptions

Excel.Interfaces.   An interface for updating data on the Style object, for use in style.set({
StyleUpdateData     ... }) .


Excel.Interfaces.   An interface describing the data returned by calling
TableCollection     tableCollection.toJSON() .
Data

Excel.Interfaces.   Represents a collection of all the tables that are part of the workbook or
TableCollection     worksheet, depending on how it was reached.
LoadOptions

Excel.Interfaces.   An interface for updating data on the TableCollection object, for use in
TableCollection     tableCollection.set({ ... }) .
UpdateData

Excel.Interfaces.   An interface describing the data returned by calling
TableColumn         tableColumnCollection.toJSON() .
CollectionData

Excel.Interfaces.   Represents a collection of all the columns that are part of the table.
TableColumn
CollectionLoad
Options

Excel.Interfaces.   An interface for updating data on the TableColumnCollection object, for use
TableColumn         in tableColumnCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.   An interface describing the data returned by calling tableColumn.toJSON() .
TableColumnData

Excel.Interfaces.   Represents a column in a table.
TableColumnLoad
Options

Excel.Interfaces.   An interface for updating data on the TableColumn object, for use in
TableColumn         tableColumn.set({ ... }) .
UpdateData

Excel.Interfaces.   An interface describing the data returned by calling table.toJSON() .
TableData
 Excel.Interfaces.    Represents an Excel table. To learn more about the table object model, read
TableLoadOptions     Work with tables using the Excel JavaScript API.

Excel.Interfaces.    An interface describing the data returned by calling
TableRowCollection   tableRowCollection.toJSON() .
Data

Excel.Interfaces.    Represents a collection of all the rows that are part of the table.
TableRowCollection
LoadOptions          Note that unlike ranges or columns, which will adjust if new rows or
                     columns are added before them, a TableRow object represents the physical
                     location of the table row, but not the data. That is, if the data is sorted or if
                     new rows are added, a table row will continue to point at the index for
                     which it was created.

Excel.Interfaces.    An interface for updating data on the TableRowCollection object, for use in
TableRowCollection   tableRowCollection.set({ ... }) .
UpdateData

Excel.Interfaces.    An interface describing the data returned by calling tableRow.toJSON() .
TableRowData

Excel.Interfaces.    Represents a row in a table.
TableRowLoad
Options              Note that unlike ranges or columns, which will adjust if new rows or
                     columns are added before them, a TableRow object represents the physical
                     location of the table row, but not the data. That is, if the data is sorted or if
                     new rows are added, a table row will continue to point at the index for
                     which it was created.

Excel.Interfaces.    An interface for updating data on the TableRow object, for use in
TableRowUpdate       tableRow.set({ ... }) .
Data

Excel.Interfaces.    An interface describing the data returned by calling
TableScoped          tableScopedCollection.toJSON() .
CollectionData

Excel.Interfaces.    Represents a scoped collection of tables. For each table its top-left corner is
TableScoped          considered its anchor location, and the tables are sorted top-to-bottom
CollectionLoad       and then left-to-right.
Options

Excel.Interfaces.    An interface for updating data on the TableScopedCollection object, for use
TableScoped          in tableScopedCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.    An interface describing the data returned by calling tableSort.toJSON() .
TableSortData
 Excel.Interfaces.       Manages sorting operations on Table objects.
TableSortLoad
Options

Excel.Interfaces.       An interface describing the data returned by calling
TableStyle              tableStyleCollection.toJSON() .
CollectionData

Excel.Interfaces.       Represents a collection of table styles.
TableStyle
CollectionLoad
Options

Excel.Interfaces.       An interface for updating data on the TableStyleCollection object, for use in
TableStyle              tableStyleCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.       An interface describing the data returned by calling tableStyle.toJSON() .
TableStyleData

Excel.Interfaces.       Represents a table style, which defines the style elements by region of the
TableStyleLoad          table.
Options

Excel.Interfaces.       An interface for updating data on the TableStyle object, for use in
TableStyleUpdate        tableStyle.set({ ... }) .
Data

Excel.Interfaces.       An interface for updating data on the Table object, for use in table.set({
TableUpdateData         ... }) .


Excel.Interfaces.Text   An interface describing the data returned by calling
ConditionalFormat       textConditionalFormat.toJSON() .
Data

Excel.Interfaces.Text   Represents a specific text conditional format.
ConditionalFormat
LoadOptions

Excel.Interfaces.Text   An interface for updating data on the TextConditionalFormat object, for use
ConditionalFormat       in textConditionalFormat.set({ ... }) .
UpdateData

Excel.Interfaces.Text   An interface describing the data returned by calling textFrame.toJSON() .
FrameData

Excel.Interfaces.Text   Represents the text frame of a shape object.
FrameLoadOptions
 Excel.Interfaces.Text   An interface for updating data on the TextFrame object, for use in
FrameUpdateData         textFrame.set({ ... }) .


Excel.Interfaces.Text   An interface describing the data returned by calling textRange.toJSON() .
RangeData

Excel.Interfaces.Text   Contains the text that is attached to a shape, in addition to properties and
RangeLoadOptions        methods for manipulating the text.

Excel.Interfaces.Text   An interface for updating data on the TextRange object, for use in
RangeUpdateData         textRange.set({ ... }) .


Excel.Interfaces.       An interface describing the data returned by calling
TimelineStyle           timelineStyleCollection.toJSON() .
CollectionData

Excel.Interfaces.       Represents a collection of timeline styles.
TimelineStyle
CollectionLoad
Options

Excel.Interfaces.       An interface for updating data on the TimelineStyleCollection object, for
TimelineStyle           use in timelineStyleCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.       An interface describing the data returned by calling
TimelineStyleData       timelineStyle.toJSON() .


Excel.Interfaces.       Represents a TimelineStyle , which defines style elements by region in the
TimelineStyleLoad       timeline.
Options

Excel.Interfaces.       An interface for updating data on the TimelineStyle object, for use in
TimelineStyle           timelineStyle.set({ ... }) .
UpdateData

Excel.Interfaces.Top    An interface describing the data returned by calling
BottomConditional       topBottomConditionalFormat.toJSON() .
FormatData

Excel.Interfaces.Top    Represents a top/bottom conditional format.
BottomConditional
FormatLoad
Options

Excel.Interfaces.Top    An interface for updating data on the TopBottomConditionalFormat object,
BottomConditional       for use in topBottomConditionalFormat.set({ ... }) .
FormatUpdateData
 Excel.Interfaces.    An interface describing the data returned by calling
WorkbookCreated      workbookCreated.toJSON() .
Data

Excel.Interfaces.    An interface describing the data returned by calling workbook.toJSON() .
WorkbookData

Excel.Interfaces.    Workbook is the top level object which contains related workbook objects
WorkbookLoad         such as worksheets, tables, and ranges. To learn more about the workbook
Options              object model, read Work with workbooks using the Excel JavaScript API.

Excel.Interfaces.    An interface describing the data returned by calling
Workbook             workbookProtection.toJSON() .
ProtectionData

Excel.Interfaces.    Represents the protection of a workbook object.
Workbook
ProtectionLoad
Options

Excel.Interfaces.    An interface describing the data returned by calling
WorkbookRange        workbookRangeAreas.toJSON() .
AreasData

Excel.Interfaces.    Represents a collection of one or more rectangular ranges in multiple
WorkbookRange        worksheets.
AreasLoadOptions

Excel.Interfaces.    An interface for updating data on the Workbook object, for use in
WorkbookUpdate       workbook.set({ ... }) .
Data

Excel.Interfaces.    An interface describing the data returned by calling
Worksheet            worksheetCollection.toJSON() .
CollectionData

Excel.Interfaces.    Represents a collection of worksheet objects that are part of the workbook.
Worksheet
CollectionLoad
Options

Excel.Interfaces.    An interface for updating data on the WorksheetCollection object, for use
Worksheet            in worksheetCollection.set({ ... }) .
CollectionUpdate
Data

Excel.Interfaces.    An interface describing the data returned by calling
WorksheetCustom      worksheetCustomPropertyCollection.toJSON() .
PropertyCollection
Data
 Excel.Interfaces.    Contains the collection of worksheet-level custom property.
WorksheetCustom
PropertyCollection
LoadOptions

Excel.Interfaces.    An interface for updating data on the WorksheetCustomPropertyCollection
WorksheetCustom      object, for use in worksheetCustomPropertyCollection.set({ ... }) .
PropertyCollection
UpdateData

Excel.Interfaces.    An interface describing the data returned by calling
WorksheetCustom      worksheetCustomProperty.toJSON() .
PropertyData

Excel.Interfaces.    Represents a worksheet-level custom property.
WorksheetCustom
PropertyLoad
Options

Excel.Interfaces.    An interface for updating data on the WorksheetCustomProperty object, for
WorksheetCustom      use in worksheetCustomProperty.set({ ... }) .
PropertyUpdate
Data

Excel.Interfaces.    An interface describing the data returned by calling worksheet.toJSON() .
WorksheetData

Excel.Interfaces.    An Excel worksheet is a grid of cells. It can contain data, tables, charts, etc.
WorksheetLoad        To learn more about the worksheet object model, read Work with
Options              worksheets using the Excel JavaScript API.

Excel.Interfaces.    An interface describing the data returned by calling
Worksheet            worksheetProtection.toJSON() .
ProtectionData

Excel.Interfaces.    Represents the protection of a worksheet object.
Worksheet
ProtectionLoad
Options

Excel.Interfaces.    An interface for updating data on the Worksheet object, for use in
WorksheetUpdate      worksheet.set({ ... }) .
Data

Excel.LinkedData     The argument that is passed to the event handler after a new linked data
TypeAddedEvent       type is added to the workbook.
Args

Excel.LinkedEntity   Represents a value whose properties derive from a service.
CellValue
 Excel.LinkedEntityId   The linked entity ID object represents a set of properties that describes a
                       service and culture for locating this service defined value.

Excel.ListData         Represents the List data validation criteria.
Validation

Excel.LocalImage       Represents the value of a cell containing a locally stored or generated
CellValue              image.

Excel.LocalImage       The UID of a previously cached image.
CellValueCacheId

Excel.MixedCell        Represents the result of a query that resulted in multiple cell controls. If the
Control                result has multiple controls, then they can't be represented as a single
                       result. [ API set: ExcelApi BETA (PREVIEW ONLY) ]

Excel.NameError        Represents the value of a cell containing a #NAME? error.
CellValue

Excel.NotAvailable     Represents the value of a cell containing a #N/A! error.
ErrorCellValue

Excel.NullErrorCell    Represents the value of a cell containing a #NULL! error.
Value

Excel.NumErrorCell     Represents the value of a cell containing a #NUM! error.
Value

Excel.PageLayout       Represents the options in page layout margins.
MarginOptions

Excel.PageLayout       Represents page zoom properties.
ZoomOptions

Excel.PivotDate        Configurable template for a date filter to apply to a PivotField. The
Filter                 condition defines what criteria need to be set in order for the filter to
                       operate.

Excel.PivotFilters     An interface representing all PivotFilters currently applied to a given
                       PivotField.

Excel.PivotLabel       Configurable template for a label filter to apply to a PivotField. The
Filter                 condition defines what criteria need to be set in order for the filter to
                       operate.

Excel.PivotManual      Configurable template for a manual filter to apply to a PivotField. The
Filter                 condition defines what criteria need to be set in order for the filter to
                       operate.

Excel.PivotValue       Configurable template for a value filter to apply to a PivotField. The
Filter                 condition defines what criteria need to be set in order for the filter to
                        operate.

Excel.Placeholder      Represents the value of a cell containing a #BUSY! error. This type of error
ErrorCellValue         is used as a placeholder while the value of a cell is downloaded.

Excel.PythonError      Represents the value of a cell containing a #PYTHON! error.
CellValue

Excel.Range            Represents the necessary strings to get/set a hyperlink (XHL) object.
Hyperlink

Excel.Range            Represents a string reference of the form "SheetName!A1:B5", or a global
Reference              or local named range.

Excel.ReferenceCell    Represents a reference into referencedValues . One scenario for using this
Value                  reference is to avoid duplicating cell value objects (such as an
                       EntityCellValue ). Define a cell value object once in referencedValues , and
                       then refer to that cell value from many places by using a
                       ReferenceCellValue where the duplicated value would have appeared.


Excel.RefErrorCell     Represents the value of a cell containing a #REF! error.
Value

Excel.RefreshMode      Represents information about a newly added linked data type, such as
ChangedEventArgs       source and ID.

Excel.Refresh          The argument that is passed to the event handler upon completion of
RequestCompleted       refresh request to an external service or link.
EventArgs

Excel.Replace          Represents the replace criteria to be used.
Criteria

Excel.Root             Represents a reference to the value which contains referencedValues .
ReferenceCellValue

Excel.Row              Represents the returned properties of getRowProperties.
Properties
                       [ API set: ExcelApi 1.9 ]

Excel.Row              Represents which row properties to load, when used as part of a
PropertiesLoad         "range.getRowProperties" method.
Options
                       [ API set: ExcelApi 1.9 ]

Excel.RunOptions

Excel.SearchCriteria   Represents the search criteria to be used.

Excel.Selection        Provides information about the document that raised the selection changed
ChangedEventArgs       event.
 Excel.Session

Excel.SettableCell     Represents the input parameter of setCellProperties.
Properties
                       [ API set: ExcelApi 1.9 ]

Excel.Settable         Represents the input parameter of setColumnProperties.
ColumnProperties
                       [ API set: ExcelApi 1.9 ]

Excel.SettableRow      Represents the input parameter of setRowProperties.
Properties
                       [ API set: ExcelApi 1.9 ]

Excel.Settings         Provides information about the setting that raised the settings changed
ChangedEventArgs       event

Excel.Shape            Provides information about the shape that raised the activated event.
ActivatedEventArgs

Excel.Shape            Provides information about the shape that raised the deactivated event.
DeactivatedEvent
Args

Excel.ShowAsRule

Excel.SortField        Represents a condition in a sorting operation.

Excel.SpillErrorCell   Represents the value of a cell containing a #SPILL! error.
Value

Excel.StringCell       Represents the value of a cell containing a string.
Value

Excel.Subtotals        Subtotals for the Pivot Field.

Excel.TableAdded       Provides information about the table that raised the added event.
EventArgs

Excel.TableChanged     Provides information about the table that raised the changed event.
EventArgs

Excel.TableDeleted     Provides information about the table that raised the deleted event.
EventArgs

Excel.TableFiltered    Provides information about the table that raised the filter applied event.
EventArgs

Excel.TableSelection   Provides information about the table that raised the selection changed
ChangedEventArgs       event.

Excel.ThreeArrows      [ API set: ExcelApi 1.2 ]
GraySet
 Excel.ThreeArrows      [ API set: ExcelApi 1.2 ]
Set

Excel.ThreeFlagsSet    [ API set: ExcelApi 1.2 ]

Excel.ThreeSignsSet    [ API set: ExcelApi 1.2 ]

Excel.ThreeStarsSet    [ API set: ExcelApi 1.2 ]

Excel.Three            [ API set: ExcelApi 1.2 ]
Symbols2Set

Excel.ThreeSymbols     [ API set: ExcelApi 1.2 ]
Set

Excel.ThreeTraffic     [ API set: ExcelApi 1.2 ]
Lights1Set

Excel.ThreeTraffic     [ API set: ExcelApi 1.2 ]
Lights2Set

Excel.Three            [ API set: ExcelApi 1.2 ]
TrianglesSet

Excel.TimeoutError     Represents the value of a cell containing a #TIMEOUT! error.
CellValue

Excel.UnknownCell      Represents an unknown cell control. This represents a control that was
Control                added in a future version of Excel, and the current version of Excel doesn't
                       know how to display this control. [ API set: ExcelApi BETA (PREVIEW ONLY) ]

Excel.ValueErrorCell   Represents the value of a cell containing a #VALUE! error.
Value

Excel.ValueTypeNot     Represents the value of a cell containing a type of value which cannot be
AvailableCellValue     serialized. For example, an #UNKNOWN! error which represents a type of
                       rich value not known to this version of Excel.

Excel.WebImage         Represents the value of a cell containing an image downloaded from the
CellValue              internet.

Excel.Workbook         Provides information about the workbook that raised the activated event.
ActivatedEventArgs

Excel.Workbook         Provides information about the workbook's onAutoSaveSettingChanged
AutoSaveSetting        event.
ChangedEventArgs

Excel.Worksheet        Provides information about the worksheet that raised the activated event.
ActivatedEventArgs
 Excel.Worksheet     Provides information about the worksheet that raised the added event.
AddedEventArgs

Excel.Worksheet     Provides information about the worksheet that raised the calculated event.
CalculatedEvent
Args

Excel.Worksheet     Provides information about the worksheet that raised the changed event.
ChangedEventArgs

Excel.Worksheet     Provides information about the column-sorted event and its related
ColumnSorted        worksheet.
EventArgs

Excel.Worksheet     Provides information about the worksheet that raised the deactivated
DeactivatedEvent    event.
Args

Excel.Worksheet     Provides information about the worksheet that raised the deleted event.
DeletedEventArgs

Excel.Worksheet     Provides information about the worksheet that raised the filter applied
FilteredEventArgs   event.

Excel.Worksheet     Provides information about the worksheet format change event.
FormatChanged
EventArgs

Excel.Worksheet     Provides information about the worksheet and formulas that raised the
FormulaChanged      formula changed event.
EventArgs

Excel.Worksheet     Notifies when a worksheet is moved within a workbook.
MovedEventArgs
                    If a worksheet is moved from one position within the workbook to another
                    via the Excel UI, then this API will trigger an event. Note that if the position
                    of a worksheet changes as a result of moving a different worksheet, then
                    this event won't trigger for both position changes. This event only triggers
                    for the primary worksheet move, and not any worksheet position changes
                    that occur as a result of that primary move.

Excel.Worksheet     Provides information about the worksheet whose name has changed.
NameChanged
EventArgs

Excel.Worksheet     Provides information about the worksheet that raised the protection status
ProtectionChanged   changed event, which fires when the protection status is updated in a
EventArgs           worksheet.

Excel.Worksheet     Represents the options in sheet protection.
ProtectionOptions
 Excel.Worksheet        Provides information about the worksheet's row hidden change event.
RowHidden
ChangedEventArgs

Excel.Worksheet        Provides information about the row-sorted event and its related worksheet.
RowSortedEvent
Args

Excel.Worksheet        Represents the worksheet search criteria to be used.
SearchCriteria

Excel.Worksheet        Provides information about the worksheet that raised the selection
SelectionChanged       changed event.
EventArgs

Excel.Worksheet        Provides information about the left-clicked/tapped event and its related
SingleClickedEvent     worksheet.
Args

Excel.Worksheet        Provides information about the worksheet whose visibility has changed.
VisibilityChanged
EventArgs




Type Aliases
                                                                                   ï¾‰    Expand table


Excel.CardLayout         Represents the layout of a card in card view.

Excel.CardLayout         Represents the layout of a section of a card in card view.
Section

Excel.CellControl        Represents an interactable control inside of a cell. [ API set: ExcelApi
                         BETA (PREVIEW ONLY) ]

Excel.CellValue          Represents the value in a cell.

Excel.CellValueAnd       Represents the value and metadata of a property. The metadata applies
PropertyMetadata         to the property (and not the value), but it is combined with the value in
                         this type.

Excel.CompactLayout      Represents the layout used when there is limited space to represent the
                         entity.

Excel.EntityProperty     Represents the value of a property.
Type

Excel.ErrorCellValue     Represents a cell value which contains an error.
 Excel.ReferencedValue    Represents the value in a cell.




Enums
                                                                               ï¾‰   Expand table


Excel.Aggregation       Aggregation function for the DataPivotHierarchy .
Function

Excel.ArrowheadLength

Excel.ArrowheadStyle

Excel.ArrowheadWidth

Excel.AutoFillType      The behavior types when AutoFill is used on a range in the workbook.

Excel.                  The file type represented by the base64 encoding.
Base64EncodingType

Excel.BindingType

Excel.BlockedError      Represents types of #BLOCKED! errors.
CellValueSubType

Excel.BorderIndex

Excel.BorderLineStyle

Excel.BorderWeight

Excel.BuiltInPivot      Represents a built-in PivotTable style
TableStyle

Excel.BuiltInSlicer     Represents a built-in slicer style.
Style

Excel.BuiltInStyle

Excel.BuiltInTable      Represents a built-in table style.
Style

Excel.BusyErrorCell     Represents types of #BUSY! errors.
ValueSubType

Excel.CalcErrorCell     Represents types of #CALC! errors.
ValueSubType

Excel.CalculationMode
 Excel.Calculation         Represents the state of calculation across the entire Excel application.
State

Excel.CalculationType

Excel.CellControlType     Represents the type of cell control. [ API set: ExcelApi BETA (PREVIEW
                          ONLY) ]

Excel.CellValueType       Represents the types of the CellValue object.

Excel.ChartAxis           Specifies the type of the category axis.
CategoryType

Excel.ChartAxisDisplayUnit

Excel.ChartAxisGroup

Excel.ChartAxisPosition

Excel.ChartAxisScaleType

Excel.ChartAxisTickLabelPosition

Excel.ChartAxisTickMark

Excel.ChartAxisTime       Specifies the unit of time for chart axes and data series.
Unit

Excel.ChartAxisType

Excel.ChartBinType        Specifies the bin type of a histogram chart or pareto chart series.

Excel.ChartBox            Represents the quartile calculation type of chart series layout. Only applies
QuartileCalculation       to a box and whisker chart.

Excel.ChartColorScheme

Excel.ChartDataLabelPosition

Excel.ChartData           Specifies the data source type of the chart series.
SourceType

Excel.ChartDisplayBlanksAs

Excel.ChartErrorBars      Represents which parts of the error bar to include.
Include

Excel.ChartErrorBars      Represents the range type for error bars.
Type

Excel.ChartGradient       Represents the gradient style of a chart series. This is only applicable for
Style                     region map charts.
 Excel.ChartGradient      Represents the gradient style type of a chart series. This is only applicable
StyleType                for region map charts.

Excel.ChartLegendPosition

Excel.ChartLineStyle

Excel.ChartMapArea       Represents the mapping level of a chart series. This only applies to region
Level                    map charts.

Excel.ChartMapLabel      Represents the region level of a chart series layout. This only applies to
Strategy                 region map charts.

Excel.ChartMap           Represents the region projection type of a chart series layout. This only
ProjectionType           applies to region map charts.

Excel.ChartMarkerStyle

Excel.ChartParent        Represents the parent label strategy of the chart series layout. This only
LabelStrategy            applies to treemap charts

Excel.ChartPlotAreaPosition

Excel.ChartPlotBy

Excel.ChartSeriesBy      Specifies whether the series are by rows or by columns. In Excel on
                         desktop, the "auto" option will inspect the source data shape to
                         automatically guess whether the data is by rows or columns. In Excel on
                         the web, "auto" will simply default to "columns".

Excel.ChartSeries        Represents the dimensions when getting values from chart series.
Dimension

Excel.ChartSplitType

Excel.ChartText          Represents the horizontal alignment for the specified object.
HorizontalAlignment

Excel.ChartText          Represents the vertical alignment for the specified object.
VerticalAlignment

Excel.ChartTickLabelAlignment

Excel.ChartTitle         Represents the position of the chart title.
Position

Excel.ChartTrendlineType

Excel.ChartType

Excel.ChartUnderlineStyle

Excel.ClearApplyTo
 Excel.CloseBehavior     Specifies the close behavior for Workbook.close .

Excel.Comment           Represents how the comments in the event were changed.
ChangeType

Excel.ConditionalCell   Represents the operator of the text conditional format type.
ValueOperator

Excel.Conditional       Represents the format options for a data bar axis.
DataBarAxisFormat

Excel.Conditional       Represents the data bar direction within a cell.
DataBarDirection

Excel.Conditional       Represents the types of color criterion for conditional formatting.
FormatColorCriterion
Type

Excel.Conditional       Represents the direction for a selection.
FormatDirection

Excel.Conditional       Represents the types of icon conditional format.
FormatIconRuleType

Excel.Conditional       Represents the criteria of the preset criteria conditional format type.
FormatPreset
Criterion

Excel.Conditional       Represents the types of conditional format values.
FormatRuleType

Excel.ConditionalFormatType

Excel.ConditionalIcon   Represents the operator for each icon criteria.
CriterionOperator

Excel.ConditionalRangeBorderIndex

Excel.ConditionalRangeBorderLineStyle

Excel.ConditionalRangeFontUnderlineStyle

Excel.ConditionalText   Represents the operator of the text conditional format type.
Operator

Excel.ConditionalTop    Represents the criteria for the above/below average conditional format
BottomCriterionType     type.

Excel.ConnectError      Represents types of #CONNECT! errors.
CellValueSubType

Excel.ConnectorType
 Excel.ContentType

Excel.DataChangeType

Excel.DataSource        Represents a command type of DataConnection .
Type

Excel.DataValidation    Represents the data validation error alert style. The default is Stop .
AlertStyle

Excel.DataValidation    Represents the data validation operator enum.
Operator

Excel.DataValidation    Represents the data validation type enum.
Type

Excel.DateFilter        Enum representing all accepted conditions by which a date filter can be
Condition               applied. Used to configure the type of PivotFilter that is applied to the
                        field.

Excel.DeleteShiftDirection

Excel.DocumentPropertyItem

Excel.DocumentPropertyType

Excel.DocumentTask      Represents the type of change recorded in the task change record.
ChangeAction

Excel.DynamicFilterCriteria

Excel.EntityCard        Types of entity card layouts.
LayoutType

Excel.EntityCompact     The list of icons available for EntityCompactLayout . An icon displays in the
LayoutIcons             Excel UI, either to the left of the title in a cell that contains an entity card,
                        or to the left of the title of a referenced entity inside an entity card.
                        Selecting the icon opens the entity card.

Excel.ErrorCellValue    Represents the types of the ErrorCellValue object.
Type

Excel.ErrorCodes

Excel.EventSource

Excel.EventTriggerSource

Excel.EventType

Excel.ExternalError     Represents types of #EXTERNAL! errors.
CellValueSubType
 Excel.FieldErrorCell     Represents types of #FIELD! errors.
ValueSubType

Excel.FillPattern

Excel.FilterDatetimeSpecificity

Excel.FilterOn

Excel.FilterOperator

Excel.Geometric          Specifies the shape type for a GeometricShape object.
ShapeType

Excel.GroupOption

Excel.HeaderFooterState

Excel.HorizontalAlignment

Excel.IconSet

Excel.ImageFittingMode

Excel.InsertShift        Determines the direction in which existing cells will be shifted to
Direction                accommodate what is being inserted.

Excel.KeyboardDirection

Excel.LabelFilter        Enum representing all accepted conditions by which a label filter can be
Condition                applied. Used to configure the type of PivotFilter that is applied to the
                         field. PivotFilter.criteria.exclusive can be set to true to invert many
                         of these conditions.

Excel.LinkedData         Representation of a refresh mode.
TypeRefreshMode

Excel.LinkedDataTypeState

Excel.LoadToType         An enum that specifies the query load to destination.

Excel.NamedItemScope

Excel.NamedItemType

Excel.NumberFormat       Represents a category of number formats.
Category

Excel.NumErrorCell       Represents types of #NUM! errors.
ValueSubType

Excel.PageOrientation
 Excel.PaperType

Excel.PictureFormat     The format of the image.

Excel.PivotAxis         Represents the axis from which to get the PivotItems.

Excel.PivotFilterTop    Represents the criteria for the top/bottom values filter.
BottomCriterion

Excel.PivotFilterType   A simple enum that represents a type of filter for a PivotField.

Excel.PivotLayoutType

Excel.PivotTableDate    Represents the DateTime Grouping condition.
GroupBy

Excel.Placement         Specifies the way that an object is attached to its underlying cells.

Excel.PrintComments

Excel.PrintErrorType

Excel.PrintMarginUnit

Excel.PrintOrder

Excel.ProtectionSelectionMode

Excel.QueryError        An enum that specifies the query load error message.

Excel.RangeCopyType

Excel.RangeUnderlineStyle

Excel.RangeValueType

Excel.ReadingOrder

Excel.ReferenceValue    Represents the types of the ReferenceValue object.
Type

Excel.RefErrorCell      Represents types of #REF! errors.
ValueSubType

Excel.RibbonTab

Excel.RowHiddenChangeType

Excel.SaveBehavior      Specifies the save behavior for Workbook.save .

Excel.SearchDirection   Specifies the search direction.

Excel.ShapeAutoSize     Determines the type of automatic sizing allowed.
 Excel.ShapeFillType     Specifies a shape's fill type.

Excel.ShapeFont         The type of underline applied to a font.
UnderlineStyle

Excel.ShapeLineDash     The dash style for a line.
Style

Excel.ShapeLineStyle    The style for a line.

Excel.ShapeScale        Specifies which part of the shape retains its position when the shape is
From                    scaled.

Excel.ShapeScale        Specifies whether the shape is scaled relative to its original or current size.
Type

Excel.ShapeText         Specifies the horizontal alignment for the text frame in a shape.
HorizontalAlignment

Excel.ShapeText         Specifies the horizontal overflow for the text frame in a shape.
HorizontalOverflow

Excel.ShapeText         Specifies the orientation for the text frame in a shape.
Orientation

Excel.ShapeText         Specifies the reading order for the text frame in a shape.
ReadingOrder

Excel.ShapeText         Specifies the vertical alignment for the text frame in a shape.
VerticalAlignment

Excel.ShapeText         Specifies the vertical overflow for the text frame in a shape.
VerticalOverflow

Excel.ShapeType         Specifies the type of a shape.

Excel.ShapeZOrder       Specifies where in the z-order a shape should be moved relative to other
                        shapes.

Excel.SheetVisibility

Excel.Show              The ShowAs calculation function for the DataPivotField.
AsCalculation

Excel.SlicerSortType    Specifies the slicer sort behavior for Slicer.sortBy .

Excel.SortBy            Represents the sort direction.

Excel.SortDataOption

Excel.SortMethod        Represents the ordering method to be used when sorting Chinese
                        characters.
 Excel.SortOn              Represents the part of the cell used as the sorting criteria.

Excel.SortOrientation

Excel.SpecialCellType

Excel.SpecialCellValueType

Excel.SpillErrorCell      Represents types of #SPILL! errors.
ValueSubType

Excel.SubtotalLocationType

Excel.TimeoutError        Represents types of #TIMEOUT! errors.
CellValueSubType

Excel.TopBottom           A simple enum for top/bottom filters to select whether to filter by the top
SelectionType             N or bottom N percent, number, or sum of values.

Excel.ValueErrorCell      Represents types of #VALUE! errors.
ValueSubType

Excel.ValueFilter         Enum representing all accepted conditions by which a value filter can be
Condition                 applied. Used to configure the type of PivotFilter that is applied to the
                          field. PivotFilter.exclusive can be set to true to invert many of these
                          conditions.

Excel.VerticalAlignment

Excel.WorkbookLinks       Represents the refresh mode of the workbook links.
RefreshMode

Excel.Worksheet           The position of a worksheet relative to another worksheet or the entire
PositionType              worksheet collection.




Functions
                                                                                     ï¾‰    Expand table


Excel.create                   Creates and opens a new workbook. Optionally, the workbook can
Workbook(base64)               be pre-populated with a base64-encoded .xlsx file. Note: Macros can
                               be a security risk. If this API is used to create a workbook that
                               includes a macro, the add-in user will be prompted with a "Trust this
                               add-in?" dialog in the Excel UI. The user must select the "Trust add-
                               in" button to proceed.

                               [ API set: ExcelApi 1.8 ]

Excel.getDataCommon
Postprocess(response, call
 Args)

Excel.postprocessBinding
Descriptor(response)

Excel.run(batch)              Executes a batch script that performs actions on the Excel object
                              model, using a new RequestContext. When the promise is resolved,
                              any tracked objects that were automatically allocated during
                              execution will be released.

Excel.run(object, batch)      Executes a batch script that performs actions on the Excel object
                              model, using the RequestContext of a previously-created API object.
                              When the promise is resolved, any tracked objects that were
                              automatically allocated during execution will be released.

Excel.run(objects, batch)     Executes a batch script that performs actions on the Excel object
                              model, using the RequestContext of previously-created API objects.

Excel.run(options, batch)     Executes a batch script that performs actions on the Excel object
                              model, using the RequestContext of a previously-created API object.
                              When the promise is resolved, any tracked objects that were
                              automatically allocated during execution will be released.

Excel.run(context, batch)     Executes a batch script that performs actions on the Excel object
                              model, using the RequestContext of a previously-created object.
                              When the promise is resolved, any tracked objects that were
                              automatically allocated during execution will be released.




Function Details

Excel.createWorkbook(base64)
  Creates and opens a new workbook. Optionally, the workbook can be pre-populated
  with a base64-encoded .xlsx file. Note: Macros can be a security risk. If this API is
  used to create a workbook that includes a macro, the add-in user will be prompted
  with a "Trust this add-in?" dialog in the Excel UI. The user must select the "Trust add-
  in" button to proceed.

  [ API set: ExcelApi 1.8 ]

     TypeScript


        export function createWorkbook(base64?: string): Promise<void>;




  Parameters
   base64         string



  Returns
  Promise<void>



  Examples

    TypeScript


    const myFile = <HTMLInputElement>document.getElementById("file");
    const reader = new FileReader();

    reader.onload = (event) => {
        Excel.run((context) => {
        // Remove the metadata before the base64-encoded string.
        const startIndex = reader.result.toString().indexOf("base64,");
        const mybase64 = reader.result.toString().substr(startIndex + 7);

         Excel.createWorkbook(mybase64);
         return context.sync();
         });
    };

    // Read in the file as a data URL so we can parse the base64-encoded
    string.
    reader.readAsDataURL(myFile.files[0]);




Excel.getDataCommonPostprocess(response, callArgs)
    TypeScript


    export function getDataCommonPostprocess(response: any, callArgs: any):
    any;




  Parameters
  response         any


  callArgs         any


  Returns
  any
 Excel.postprocessBindingDescriptor(response)
    TypeScript


    export function postprocessBindingDescriptor(response: any): any;




  Parameters
  response       any



  Returns
  any


Excel.run(batch)
  Executes a batch script that performs actions on the Excel object model, using a new
  RequestContext. When the promise is resolved, any tracked objects that were
  automatically allocated during execution will be released.

    TypeScript


    export function run<T>(batch: (context: Excel.RequestContext) =>
    Promise<T>): Promise<T>;




  Parameters
  batch     (context: Excel.RequestContext) => Promise<T>
  A function that takes in a RequestContext and returns a promise (typically, just the
  result of "context.sync()"). The context parameter facilitates requests to the Excel
  application. Since the Office add-in and the Excel application run in two different
  processes, the RequestContext is required to get access to the Excel object model
  from the add-in.


  Returns
  Promise<T>


Excel.run(object, batch)
   Executes a batch script that performs actions on the Excel object model, using the
  RequestContext of a previously-created API object. When the promise is resolved,
  any tracked objects that were automatically allocated during execution will be
  released.

    TypeScript


    export function run<T>(object: OfficeExtension.ClientObject, batch:
    (context: Excel.RequestContext) => Promise<T>): Promise<T>;




  Parameters
  object         OfficeExtension.ClientObject
  A previously-created API object. The batch will use the same RequestContext as the
  passed-in object, which means that any changes applied to the object will be picked
  up by "context.sync()".


  batch       (context: Excel.RequestContext) => Promise<T>
  A function that takes in a RequestContext and returns a promise (typically, just the
  result of "context.sync()"). The context parameter facilitates requests to the Excel
  application. Since the Office add-in and the Excel application run in two different
  processes, the RequestContext is required to get access to the Excel object model
  from the add-in.



  Returns
  Promise<T>


Excel.run(objects, batch)
  Executes a batch script that performs actions on the Excel object model, using the
  RequestContext of previously-created API objects.

    TypeScript


    export function run<T>(objects: OfficeExtension.ClientObject[], batch:
    (context: Excel.RequestContext) => Promise<T>): Promise<T>;




  Parameters
  objects         OfficeExtension.ClientObject[]
   An array of previously-created API objects. The array will be validated to make sure
  that all of the objects share the same context. The batch will use this shared
  RequestContext, which means that any changes applied to these objects will be
  picked up by "context.sync()".


  batch       (context: Excel.RequestContext) => Promise<T>
  A function that takes in a RequestContext and returns a promise (typically, just the
  result of "context.sync()"). The context parameter facilitates requests to the Excel
  application. Since the Office add-in and the Excel application run in two different
  processes, the RequestContext is required to get access to the Excel object model
  from the add-in.



  Returns
  Promise<T>


Excel.run(options, batch)
  Executes a batch script that performs actions on the Excel object model, using the
  RequestContext of a previously-created API object. When the promise is resolved,
  any tracked objects that were automatically allocated during execution will be
  released.

    TypeScript


    export function run<T>(options: Excel.RunOptions, batch: (context:
    Excel.RequestContext) => Promise<T>): Promise<T>;




  Parameters
  options        Excel.RunOptions
  The additional options for this Excel.run which specify previous objects, whether to
  delay the request for cell edit, session info, etc.


  batch       (context: Excel.RequestContext) => Promise<T>
  A function that takes in a RequestContext and returns a promise (typically, just the
  result of "context.sync()"). The context parameter facilitates requests to the Excel
  application. Since the Office add-in and the Excel application run in two different
  processes, the RequestContext is required to get access to the Excel object model
  from the add-in.
   Returns
  Promise<T>


Excel.run(context, batch)
  Executes a batch script that performs actions on the Excel object model, using the
  RequestContext of a previously-created object. When the promise is resolved, any
  tracked objects that were automatically allocated during execution will be released.

    TypeScript


    export function run<T>(context: OfficeExtension.ClientRequestContext,
    batch: (context: Excel.RequestContext) => Promise<T>): Promise<T>;




  Parameters
  context        OfficeExtension.ClientRequestContext
  A previously-created object. The batch will use the same RequestContext as the
  passed-in object, which means that any changes applied to the object will be picked
  up by "context.sync()".


  batch     (context: Excel.RequestContext) => Promise<T>
  A function that takes in a RequestContext and returns a promise (typically, just the
  result of "context.sync()"). The context parameter facilitates requests to the Excel
  application. Since the Office add-in and the Excel application run in two different
  processes, the RequestContext is required to get access to the Excel object model
  from the add-in.


  Returns
  Promise<T>




  ï¼– Collaborate with us on
  GitHub                                Office Add-ins feedback
                                        Office Add-ins is an open source project.
  The source for this content can
                                        Select a link to provide feedback:
  be found on GitHub, where you
  can also create and review
                                        î¯¨ Open a documentation issue
  issues and pull requests. For
                                        î´• Provide product feedback
 more information, see our
contributor guide.
 Excel JavaScript object model in Office
Add-ins
Article â€¢ 03/21/2023


This article describes how to use the Excel JavaScript API to build add-ins for Excel 2016
or later. It introduces core concepts that are fundamental to using the API and provides
guidance for performing specific tasks such as reading or writing to a large range,
updating all cells in range, and more.


  ï¼‰ Important

  See Using the application-specific API model to learn about the asynchronous
  nature of the Excel APIs and how they work with the workbook.




Office.js APIs for Excel
An Excel add-in interacts with objects in Excel by using the Office JavaScript API, which
includes two JavaScript object models:

      Excel JavaScript API: Introduced with Office 2016, the Excel JavaScript API provides
      strongly-typed Excel objects that you can use to access worksheets, ranges, tables,
      charts, and more.

      Common API: Introduced with Office 2013, the Common API enables you to access
      features such as UI, dialogs, and client settings that are common across multiple
      types of Office applications. The limited functionality for Excel interaction in the
      Common API has been replaced by the Excel JavaScript API.

While you'll likely use the Excel JavaScript API to develop the majority of functionality,
you'll also use objects in the Common API. For example:

      Context: The Context object represents the runtime environment of the add-in and
      provides access to key objects of the API. It consists of workbook configuration
      details such as contentLanguage and officeTheme and also provides information
      about the add-in's runtime environment such as host and platform . Additionally,
      it provides the requirements.isSetSupported() method, which you can use to
      check whether the specified requirement set is supported by the Excel application
      where the add-in is running.
      Document: The Document object provides the getFileAsync() method, which you
     can use to download the Excel file where the add-in is running.

The following image illustrates when you might use the Excel JavaScript API or the
Common APIs.




Excel-specific object model
To understand the Excel APIs, you must understand how the components of a workbook
are related to one another.

     A Workbook contains one or more Worksheets.
     A Worksheet contains collections of those data objects that are present in the
     individual sheet, and gives access to cells through Range objects.
     A Range represents a group of contiguous cells.
     Ranges are used to create and place Tables, Charts, Shapes, and other data
     visualization or organization objects.
     Workbooks contain collections of some of those data objects (such as Tables) for
     the entire Workbook.


  ï¼— Note

  The Excel JavaScript API doesn't have a "Cell" object or class. Instead, the Excel
  JavaScript API defines all Excel cells as Range objects. An individual cell in the Excel
  UI translates to a Range object with one cell in the Excel JavaScript API. A single
  Range object can also contain multiple contiguous cells. See Work with cells using
  the Excel JavaScript API to learn more.
 Ranges
A range is a group of contiguous cells in the workbook. Add-ins typically use A1-style
notation (e.g. B3 for the single cell in column B and row 3 or C2:F4 for the cells from
columns C through F and rows 2 through 4) to define ranges.

Ranges have three core properties: values , formulas , and format . These properties get
or set the cell values, formulas to be evaluated, and the visual formatting of the cells.



Range sample
The following sample shows how to create sales records. This function uses Range
objects to set the values, formulas, and formats.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getActiveWorksheet();

       // Create the headers and format them to stand out.
       let headers = [
          ["Product", "Quantity", "Unit Price", "Totals"]
       ];
       let headerRange = sheet.getRange("B2:E2");
       headerRange.values = headers;
       headerRange.format.fill.color = "#4472C4";
       headerRange.format.font.color = "white";

       // Create the product data rows.
       let productData = [
          ["Almonds", 6, 7.5],
          ["Coffee", 20, 34.5],
          ["Chocolate", 10, 9.56],
       ];
       let dataRange = sheet.getRange("B3:D5");
       dataRange.values = productData;

       // Create the formulas to total the amounts sold.
       let totalFormulas = [
          ["=C3 * D3"],
          ["=C4 * D4"],
          ["=C5 * D5"],
          ["=SUM(E3:E5)"]
       ];
       let totalRange = sheet.getRange("E3:E6");
       totalRange.formulas = totalFormulas;
       totalRange.format.font.bold = true;

       // Display the totals as US dollar amounts.
       totalRange.numberFormat = [["$0.00"]];
          await context.sync();
  });



This sample creates the following data in the current worksheet.




For more information, see Set and get range values, text, or formulas using the Excel
JavaScript API.


Charts, tables, and other data objects
The Excel JavaScript APIs can create and manipulate the data structures and
visualizations within Excel. Tables and charts are two of the more commonly used
objects, but the APIs support PivotTables, shapes, images, and more.



Creating a table
Create tables by using data-filled ranges. Formatting and table controls (such as filters)
are automatically applied to the range.

The following sample creates a table using the ranges from the previous sample.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getActiveWorksheet();
      sheet.tables.add("B2:E5", true);
      await context.sync();
  });



Using this sample code on the worksheet with the previous data creates the following
table.
 For more information, see Work with tables using the Excel JavaScript API.


Creating a chart

Create charts to visualize the data in a range. The APIs support dozens of chart varieties,
each of which can be customized to suit your needs.

The following sample creates a simple column chart for three items and places it 100
pixels below the top of the worksheet.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getActiveWorksheet();
      let chart = sheet.charts.add(Excel.ChartType.columnStacked,
  sheet.getRange("B3:C5"));
      chart.top = 100;
      await context.sync();
  });



Running this sample on the worksheet with the previous table creates the following
chart.



null and empty strings have special implications in the Excel JavaScript APIs. They're
used to represent empty cells, no formatting, or default values. This section details the
use of null and empty string when getting and setting properties.



null input in 2-D Array
In Excel, a range is represented by a 2-D array, where the first dimension is rows and the
second dimension is columns. To set values, number format, or formula for only specific
cells within a range, specify the values, number format, or formula for those cells in the
2-D array, and specify null for all other cells in the 2-D array.

For example, to update the number format for only one cell within a range, and retain
the existing number format for all other cells in the range, specify the new number
format for the cell to update, and specify null for all other cells. The following code
snippet sets a new number format for the fourth cell in the range, and leaves the
number format unchanged for the first three cells in the range.

  JavaScript


  range.values = [['Eurasia', '29.96', '0.25', '15-Feb' ]];
  range.numberFormat = [[null, null, null, 'm/d/yyyy;@']];




null input for a property
null is not a valid input for single property. For example, the following code snippet is
not valid, as the values property of the range cannot be set to null .

  JavaScript


  range.values = null; // This is not a valid snippet.



Likewise, the following code snippet is not valid, as null is not a valid value for the
color property.


  JavaScript


  range.format.fill.color =       null;   // This is not a valid snippet.
 null property values in the response
Formatting properties such as size and color will contain null values in the response
when different values exist in the specified range. For example, if you retrieve a range
and load its format.font.color property:

     If all cells in the range have the same font color, range.format.font.color specifies
     that color.
     If multiple font colors are present within the range, range.format.font.color is
      null .




Blank input for a property
When you specify a blank value for a property (i.e., two quotation marks with no space
in-between '' ), it will be interpreted as an instruction to clear or reset the property. For
example:

     If you specify a blank value for the values property of a range, the content of the
     range is cleared.
     If you specify a blank value for the numberFormat property, the number format is
     reset to General .
     If you specify a blank value for the formula property and formulaLocale property,
     the formula values are cleared.



Blank property values in the response
For read operations, a blank property value in the response (i.e., two quotation marks
with no space in-between '' ) indicates that cell contains no data or value. In the first
example below, the first and last cell in the range contain no data. In the second
example, the first two cells in the range do not contain a formula.

  JavaScript


  range.values = [['', 'some', 'data', 'in', 'other', 'cells', '']];



  JavaScript


  range.formula = [['', '', '=Rand()']];
 Call built-in Excel worksheet functions
Article â€¢ 03/22/2022


This article explains how to call built-in Excel worksheet functions such as VLOOKUP and
SUM using the Excel JavaScript API. It also provides the full list of built-in Excel worksheet

functions that can be called using the Excel JavaScript API.


  ï¼— Note

  For information about how to create custom functions in Excel using the Excel
  JavaScript API, see Create custom functions in Excel.




Calling a worksheet function
The following code snippet shows how to call a worksheet function, where
sampleFunction() is a placeholder that should be replaced with the name of the

function to call and the input parameters that the function requires. The value property
of the FunctionResult object that's returned by a worksheet function contains the result
of the specified function. As this example shows, you must load the value property of
the FunctionResult object before you can read it. In this example, the result of the
function is simply being written to the console.

  JavaScript


  await Excel.run(async (context) => {
      let functionResult = context.workbook.functions.sampleFunction();
      functionResult.load('value');

        await context.sync();
        console.log('Result of the function: ' + functionResult.value);
  });




  îª€ Tip

  See the Supported worksheet functions section of this article for a list of functions
  that can be called using the Excel JavaScript API.




Sample data
 The following image shows a table in an Excel worksheet that contains sales data for
various types of tools over a three month period. Each number in the table represents
the number of units sold for a specific tool in a specific month. The examples that follow
will show how to apply built-in worksheet functions to this data.




Example 1: Single function
The following code sample applies the VLOOKUP function to the sample data described
previously to identify the number of wrenches sold in November.

  JavaScript


  await Excel.run(async (context) => {
      let range =
  context.workbook.worksheets.getItem("Sheet1").getRange("A1:D4");
      let unitSoldInNov = context.workbook.functions.vlookup("Wrench", range,
  2, false);
      unitSoldInNov.load('value');

      await context.sync();
      console.log(' Number of wrenches sold in November = ' +
  unitSoldInNov.value);
  });




Example 2: Nested functions
The following code sample applies the VLOOKUP function to the sample data described
previously to identify the number of wrenches sold in November and the number of
wrenches sold in December, and then applies the SUM function to calculate the total
number of wrenches sold during those two months.

As this example shows, when one or more function calls are nested within another
function call, you only need to load the final result that you subsequently want to read
(in this example, sumOfTwoLookups ). Any intermediate results (in this example, the result
of each VLOOKUP function) will be calculated and used to calculate the final result.
   JavaScript


  await Excel.run(async (context) => {
      let range =
  context.workbook.worksheets.getItem("Sheet1").getRange("A1:D4");
      let sumOfTwoLookups = context.workbook.functions.sum(
          context.workbook.functions.vlookup("Wrench", range, 2, false),
          context.workbook.functions.vlookup("Wrench", range, 3, false)
      );
      sumOfTwoLookups.load('value');

      await context.sync();
      console.log(' Number of wrenches sold in November and December = ' +
  sumOfTwoLookups.value);
  });




Supported worksheet functions
The following built-in Excel worksheet functions can be called using the Excel JavaScript
API.


                                                                                ï¾‰   Expand table


 Function                    Description

 ABS function                Returns the absolute value of a number

 ACCRINT function            Returns the accrued interest for a security that pays periodic
                             interest

 ACCRINTM function           Returns the accrued interest for a security that pays interest at
                             maturity

 ACOS function               Returns the arccosine of a number

 ACOSH function              Returns the inverse hyperbolic cosine of a number

 ACOT function               Returns the arccotangent of a number

 ACOTH function              Returns the hyperbolic arccotangent of a number

 AMORDEGRC function          Returns the depreciation for each accounting period by using a
                             depreciation coefficient

 AMORLINC function           Returns the depreciation for each accounting period

 AND function                Returns TRUE if all of its arguments are true

 ARABIC function             Converts a Roman number to Arabic, as a number
 Function              Description

AREAS function        Returns the number of areas in a reference

ASC function          Changes full-width (double-byte) English letters or katakana within
                      a character string to half-width (single-byte) characters

ASIN function         Returns the arcsine of a number

ASINH function        Returns the inverse hyperbolic sine of a number

ATAN function         Returns the arctangent of a number

ATAN2 function        Returns the arctangent from x- and y-coordinates

ATANH function        Returns the inverse hyperbolic tangent of a number

AVEDEV function       Returns the average of the absolute deviations of data points from
                      their mean

AVERAGE function      Returns the average of its arguments

AVERAGEA function     Returns the average of its arguments, including numbers, text, and
                      logical values

AVERAGEIF function    Returns the average (arithmetic mean) of all the cells in a range
                      that meet a given criteria

AVERAGEIFS function   Returns the average (arithmetic mean) of all cells that meet
                      multiple criteria

BAHTTEXT function     Converts a number to text, using the ÃŸ (baht) currency format

BASE function         Converts a number into a text representation with the given radix
                      (base)

BESSELI function      Returns the modified Bessel function In(x)

BESSELJ function      Returns the Bessel function Jn(x)

BESSELK function      Returns the modified Bessel function Kn(x)

BESSELY function      Returns the Bessel function Yn(x)

BETA.DIST function    Returns the beta cumulative distribution function

BETA.INV function     Returns the inverse of the cumulative distribution function for a
                      specified beta distribution

BIN2DEC function      Converts a binary number to decimal

BIN2HEX function      Converts a binary number to hexadecimal
 Function                   Description

BIN2OCT function           Converts a binary number to octal

BINOM.DIST function        Returns the individual term binomial distribution probability

BINOM.DIST.RANGE           Returns the probability of a trial result using a binomial
function                   distribution

BINOM.INV function         Returns the smallest value for which the cumulative binomial
                           distribution is less than or equal to a criterion value

BITAND function            Returns a 'Bitwise And' of two numbers

BITLSHIFT function         Returns a value number shifted left by shift_amount bits

BITOR function             Returns a bitwise OR of 2 numbers

BITRSHIFT function         Returns a value number shifted right by shift_amount bits

BITXOR function            Returns a bitwise 'Exclusive Or' of two numbers

CEILING.MATH,              Rounds a number up, to the nearest integer or to the nearest
ECMA_CEILING functions     multiple of significance

CEILING.PRECISE function   Rounds a number the nearest integer or to the nearest multiple of
                           significance. Regardless of the sign of the number, the number is
                           rounded up.

CHAR function              Returns the character specified by the code number

CHISQ.DIST function        Returns the cumulative beta probability density function

CHISQ.DIST.RT function     Returns the one-tailed probability of the chi-squared distribution

CHISQ.INV function         Returns the cumulative beta probability density function

CHISQ.INV.RT function      Returns the inverse of the one-tailed probability of the chi-
                           squared distribution

CHOOSE function            Chooses a value from a list of values

CLEAN function             Removes all nonprintable characters from text

CODE function              Returns a numeric code for the first character in a text string

COLUMNS function           Returns the number of columns in a reference

COMBIN function            Returns the number of combinations for a given number of
                           objects

COMBINA function           Returns the number of combinations with repetitions for a given
                           number of items
 Function                Description

COMPLEX function        Converts real and imaginary coefficients into a complex number

CONCATENATE function    Joins several text items into one text item

CONFIDENCE.NORM         Returns the confidence interval for a population mean
function

CONFIDENCE.T function   Returns the confidence interval for a population mean, using a
                        Student's t distribution

CONVERT function        Converts a number from one measurement system to another

COS function            Returns the cosine of a number

COSH function           Returns the hyperbolic cosine of a number

COT function            Returns the cotangent of an angle

COTH function           Returns the hyperbolic cotangent of a number

COUNT function          Counts how many numbers are in the list of arguments

COUNTA function         Counts how many values are in the list of arguments

COUNTBLANK function     Counts the number of blank cells within a range

COUNTIF function        Counts the number of cells within a range that meet the given
                        criteria

COUNTIFS function       Counts the number of cells within a range that meet multiple
                        criteria

COUPDAYBS function      Returns the number of days from the beginning of the coupon
                        period to the settlement date

COUPDAYS function       Returns the number of days in the coupon period that contains
                        the settlement date

COUPDAYSNC function     Returns the number of days from the settlement date to the next
                        coupon date

COUPNCD function        Returns the next coupon date after the settlement date

COUPNUM function        Returns the number of coupons payable between the settlement
                        date and maturity date

COUPPCD function        Returns the previous coupon date before the settlement date

CSC function            Returns the cosecant of an angle

CSCH function           Returns the hyperbolic cosecant of an angle
 Function             Description

CUMIPMT function     Returns the cumulative interest paid between two periods

CUMPRINC function    Returns the cumulative principal paid on a loan between two
                     periods

DATE function        Returns the serial number of a particular date

DATEVALUE function   Converts a date in the form of text to a serial number

DAVERAGE function    Returns the average of selected database entries

DAY function         Converts a serial number to a day of the month

DAYS function        Returns the number of days between two dates

DAYS360 function     Calculates the number of days between two dates based on a 360-
                     day year

DB function          Returns the depreciation of an asset for a specified period by
                     using the fixed-declining balance method

DBCS function        Changes half-width (single-byte) English letters or katakana within
                     a character string to full-width (double-byte) characters

DCOUNT function      Counts the cells that contain numbers in a database

DCOUNTA function     Counts nonblank cells in a database

DDB function         Returns the depreciation of an asset for a specified period by
                     using the double-declining balance method or some other
                     method that you specify

DEC2BIN function     Converts a decimal number to binary

DEC2HEX function     Converts a decimal number to hexadecimal

DEC2OCT function     Converts a decimal number to octal

DECIMAL function     Converts a text representation of a number in a given base into a
                     decimal number

DEGREES function     Converts radians to degrees

DELTA function       Tests whether two values are equal

DEVSQ function       Returns the sum of squares of deviations

DGET function        Extracts from a database a single record that matches the specified
                     criteria

DISC function        Returns the discount rate for a security
 Function                Description

DMAX function           Returns the maximum value from selected database entries

DMIN function           Returns the minimum value from selected database entries

DOLLAR, USDOLLAR        Converts a number to text, using the $ (dollar) currency format
functions

DOLLARDE function       Converts a dollar price, expressed as a fraction, into a dollar price,
                        expressed as a decimal number

DOLLARFR function       Converts a dollar price, expressed as a decimal number, into a
                        dollar price, expressed as a fraction

DPRODUCT function       Multiplies the values in a particular field of records that match the
                        criteria in a database

DSTDEV function         Estimates the standard deviation based on a sample of selected
                        database entries

DSTDEVP function        Calculates the standard deviation based on the entire population
                        of selected database entries

DSUM function           Adds the numbers in the field column of records in the database
                        that match the criteria

DURATION function       Returns the annual duration of a security with periodic interest
                        payments

Dlet function           Estimates variance based on a sample from selected database
                        entries

DVARP function          Calculates variance based on the entire population of selected
                        database entries

EDATE function          Returns the serial number of the date that is the indicated number
                        of months before or after the start date

EFFECT function         Returns the effective annual interest rate

EOMONTH function        Returns the serial number of the last day of the month before or
                        after a specified number of months

ERF function            Returns the error function

ERF.PRECISE function    Returns the error function

ERFC function           Returns the complementary error function

ERFC.PRECISE function   Returns the complementary ERF function integrated between x
                        and infinity
 Function                 Description

ERROR.TYPE function      Returns a number corresponding to an error type

EVEN function            Rounds a number up to the nearest even integer

EXACT function           Checks to see if two text values are identical

EXP function             Returns e raised to the power of a given number

EXPON.DIST function      Returns the exponential distribution

F.DIST function          Returns the F probability distribution

F.DIST.RT function       Returns the F probability distribution

F.INV function           Returns the inverse of the F probability distribution

F.INV.RT function        Returns the inverse of the F probability distribution

FACT function            Returns the factorial of a number

FACTDOUBLE function      Returns the double factorial of a number

FALSE function           Returns the logical value FALSE

FIND, FINDB functions    Finds one text value within another (case-sensitive)

FISHER function          Returns the Fisher transformation

FISHERINV function       Returns the inverse of the Fisher transformation

FIXED function           Formats a number as text with a fixed number of decimals

FLOOR.MATH function      Rounds a number down, to the nearest integer or to the nearest
                         multiple of significance

FLOOR.PRECISE function   Rounds a number down to the nearest integer or to the nearest
                         multiple of significance. Regardless of the sign of the number, the
                         number is rounded down.

FV function              Returns the future value of an investment

FVSCHEDULE function      Returns the future value of an initial principal after applying a
                         series of compound interest rates

GAMMA function           Returns the Gamma function value

GAMMA.DIST function      Returns the gamma distribution

GAMMA.INV function       Returns the inverse of the gamma cumulative distribution

GAMMALN function         Returns the natural logarithm of the gamma function, Î“(x)
 Function                Description

GAMMALN.PRECISE         Returns the natural logarithm of the gamma function, Î“(x)
function

GAUSS function          Returns 0.5 less than the standard normal cumulative distribution

GCD function            Returns the greatest common divisor

GEOMEAN function        Returns the geometric mean

GESTEP function         Tests whether a number is greater than a threshold value

HARMEAN function        Returns the harmonic mean

HEX2BIN function        Converts a hexadecimal number to binary

HEX2DEC function        Converts a hexadecimal number to decimal

HEX2OCT function        Converts a hexadecimal number to octal

HLOOKUP function        Looks in the top row of an array and returns the value of the
                        indicated cell

HOUR function           Converts a serial number to an hour

HYPERLINK function      Creates a shortcut or jump that opens a document stored on a
                        network server, an intranet, or the Internet

HYPGEOM.DIST function   Returns the hypergeometric distribution

IF function             Specifies a logical test to perform

IMABS function          Returns the absolute value (modulus) of a complex number

IMAGINARY function      Returns the imaginary coefficient of a complex number

IMARGUMENT function     Returns the argument theta, an angle expressed in radians

IMCONJUGATE function    Returns the complex conjugate of a complex number

IMCOS function          Returns the cosine of a complex number

IMCOSH function         Returns the hyperbolic cosine of a complex number

IMCOT function          Returns the cotangent of a complex number

IMCSC function          Returns the cosecant of a complex number

IMCSCH function         Returns the hyperbolic cosecant of a complex number

IMDIV function          Returns the quotient of two complex numbers
 Function             Description

IMEXP function       Returns the exponential of a complex number

IMLN function        Returns the natural logarithm of a complex number

IMLOG10 function     Returns the base-10 logarithm of a complex number

IMLOG2 function      Returns the base-2 logarithm of a complex number

IMPOWER function     Returns a complex number raised to an integer power

IMPRODUCT function   Returns the product of from 2 to 255 complex numbers

IMREAL function      Returns the real coefficient of a complex number

IMSEC function       Returns the secant of a complex number

IMSECH function      Returns the hyperbolic secant of a complex number

IMSIN function       Returns the sine of a complex number

IMSINH function      Returns the hyperbolic sine of a complex number

IMSQRT function      Returns the square root of a complex number

IMSUB function       Returns the difference between two complex numbers

IMSUM function       Returns the sum of complex numbers

IMTAN function       Returns the tangent of a complex number

INT function         Rounds a number down to the nearest integer

INTRATE function     Returns the interest rate for a fully invested security

IPMT function        Returns the interest payment for an investment for a given period

IRR function         Returns the internal rate of return for a series of cash flows

ISERR function       Returns TRUE if the value is any error value except #N/A

ISERROR function     Returns TRUE if the value is any error value

ISEVEN function      Returns TRUE if the number is even

ISFORMULA function   Returns TRUE if there is a reference to a cell that contains a
                     formula

ISLOGICAL function   Returns TRUE if the value is a logical value

ISNA function        Returns TRUE if the value is the #N/A error value

ISNONTEXT function   Returns TRUE if the value is not text
 Function                Description
ISNUMBER function       Returns TRUE if the value is a number

ISO.CEILING function    Returns a number that is rounded up to the nearest integer or to
                        the nearest multiple of significance

ISODD function          Returns TRUE if the number is odd

ISOWEEKNUM function     Returns the number of the ISO week number of the year for a
                        given date

ISPMT function          Calculates the interest paid during a specific period of an
                        investment

ISREF function          Returns TRUE if the value is a reference

ISTEXT function         Returns TRUE if the value is text

KURT function           Returns the kurtosis of a data set

LARGE function          Returns the k-th largest value in a data set

LCM function            Returns the least common multiple

LEFT, LEFTB functions   Returns the leftmost characters from a text value

LEN, LENB functions     Returns the number of characters in a text string

LN function             Returns the natural logarithm of a number

LOG function            Returns the logarithm of a number to a specified base

LOG10 function          Returns the base-10 logarithm of a number

LOGNORM.DIST function   Returns the cumulative lognormal distribution

LOGNORM.INV function    Returns the inverse of the lognormal cumulative distribution

LOOKUP function         Looks up values in a vector or array

LOWER function          Converts text to lowercase

MATCH function          Looks up values in a reference or array

MAX function            Returns the maximum value in a list of arguments

MAXA function           Returns the maximum value in a list of arguments, including
                        numbers, text, and logical values

MDURATION function      Returns the Macauley modified duration for a security with an
                        assumed par value of $100

MEDIAN function         Returns the median of the given numbers
 Function                 Description

MID, MIDB functions      Returns a specific number of characters from a text string starting
                         at the position you specify

MIN function             Returns the minimum value in a list of arguments

MINA function            Returns the smallest value in a list of arguments, including
                         numbers, text, and logical values

MINUTE function          Converts a serial number to a minute

MIRR function            Returns the internal rate of return where positive and negative
                         cash flows are financed at different rates

MOD function             Returns the remainder from division

MONTH function           Converts a serial number to a month

MROUND function          Returns a number rounded to the desired multiple

MULTINOMIAL function     Returns the multinomial of a set of numbers

N function               Returns a value converted to a number

NA function              Returns the error value #N/A

NEGBINOM.DIST function   Returns the negative binomial distribution

NETWORKDAYS function     Returns the number of whole workdays between two dates

NETWORKDAYS.INTL         Returns the number of whole workdays between two dates using
function                 parameters to indicate which and how many days are weekend
                         days

NOMINAL function         Returns the annual nominal interest rate

NORM.DIST function       Returns the normal cumulative distribution

NORM.INV function        Returns the inverse of the normal cumulative distribution

NORM.S.DIST function     Returns the standard normal cumulative distribution

NORM.S.INV function      Returns the inverse of the standard normal cumulative distribution

NOT function             Reverses the logic of its argument

NOW function             Returns the serial number of the current date and time

NPER function            Returns the number of periods for an investment

NPV function             Returns the net present value of an investment based on a series
                         of periodic cash flows and a discount rate
 Function                   Description

NUMBERVALUE function       Converts text to number in a locale-independent manner

OCT2BIN function           Converts an octal number to binary

OCT2DEC function           Converts an octal number to decimal

OCT2HEX function           Converts an octal number to hexadecimal

ODD function               Rounds a number up to the nearest odd integer

ODDFPRICE function         Returns the price per $100 face value of a security with an odd first
                           period

ODDFYIELD function         Returns the yield of a security with an odd first period

ODDLPRICE function         Returns the price per $100 face value of a security with an odd last
                           period

ODDLYIELD function         Returns the yield of a security with an odd last period

OR function                Returns TRUE if any argument is true

PDURATION function         Returns the number of periods required by an investment to reach
                           a specified value

PERCENTILE.EXC function    Returns the k-th percentile of values in a range, where k is in the
                           range 0..1, exclusive

PERCENTILE.INC function    Returns the k-th percentile of values in a range

PERCENTRANK.EXC function   Returns the rank of a value in a data set as a percentage (0..1,
                           exclusive) of the data set

PERCENTRANK.INC function   Returns the percentage rank of a value in a data set

PERMUT function            Returns the number of permutations for a given number of objects

PERMUTATIONA function      Returns the number of permutations for a given number of objects
                           (with repetitions) that can be selected from the total objects

PHI function               Returns the value of the density function for a standard normal
                           distribution

PI function                Returns the value of pi

PMT function               Returns the periodic payment for an annuity

POISSON.DIST function      Returns the Poisson distribution

POWER function             Returns the result of a number raised to a power
 Function                  Description

PPMT function             Returns the payment on the principal for an investment for a given
                          period

PRICE function            Returns the price per $100 face value of a security that pays
                          periodic interest

PRICEDISC function        Returns the price per $100 face value of a discounted security

PRICEMAT function         Returns the price per $100 face value of a security that pays
                          interest at maturity

PRODUCT function          Multiplies its arguments

PROPER function           Capitalizes the first letter in each word of a text value

PV function               Returns the present value of an investment

QUARTILE.EXC function     Returns the quartile of the data set, based on percentile values
                          from 0..1, exclusive

QUARTILE.INC function     Returns the quartile of a data set

QUOTIENT function         Returns the integer portion of a division

RADIANS function          Converts degrees to radians

RAND function             Returns a random number between 0 and 1

RANDBETWEEN function      Returns a random number between the numbers you specify

RANK.AVG function         Returns the rank of a number in a list of numbers

RANK.EQ function          Returns the rank of a number in a list of numbers

RATE function             Returns the interest rate per period of an annuity

RECEIVED function         Returns the amount received at maturity for a fully invested
                          security

REPLACE, REPLACEB         Replaces characters within text
functions

REPT function             Repeats text a given number of times

RIGHT, RIGHTB functions   Returns the rightmost characters from a text value

ROMAN function            Converts an Arabic numeral to Roman, as text

ROUND function            Rounds a number to a specified number of digits

ROUNDDOWN function        Rounds a number down, toward zero
 Function               Description

ROUNDUP function       Rounds a number up, away from zero

ROWS function          Returns the number of rows in a reference

RRI function           Returns an equivalent interest rate for the growth of an investment

SEC function           Returns the secant of an angle

SECH function          Returns the hyperbolic secant of an angle

SECOND function        Converts a serial number to a second

SERIESSUM function     Returns the sum of a power series based on the formula

SHEET function         Returns the sheet number of the referenced sheet

SHEETS function        Returns the number of sheets in a reference

SIGN function          Returns the sign of a number

SIN function           Returns the sine of the given angle

SINH function          Returns the hyperbolic sine of a number

SKEW function          Returns the skewness of a distribution

SKEW.P function        Returns the skewness of a distribution based on a population: a
                       characterization of the degree of asymmetry of a distribution
                       around its mean

SLN function           Returns the straight-line depreciation of an asset for one period

SMALL function         Returns the k-th smallest value in a data set

SQRT function          Returns a positive square root

SQRTPI function        Returns the square root of (number * pi)

STANDARDIZE function   Returns a normalized value

STDEV.P function       Calculates standard deviation based on the entire population

STDEV.S function       Estimates standard deviation based on a sample

STDEVA function        Estimates standard deviation based on a sample, including
                       numbers, text, and logical values

STDEVPA function       Calculates standard deviation based on the entire population,
                       including numbers, text, and logical values

SUBSTITUTE function    Substitutes new text for old text in a text string
 Function              Description

SUBTOTAL function     Returns a subtotal in a list or database

SUM function          Adds its arguments

SUMIF function        Adds the cells specified by a given criteria

SUMIFS function       Adds the cells in a range that meet multiple criteria

SUMSQ function        Returns the sum of the squares of the arguments

SYD function          Returns the sum-of-years' digits depreciation of an asset for a
                      specified period

T function            Converts its arguments to text

T.DIST function       Returns the Percentage Points (probability) for the Student t-
                      distribution

T.DIST.2T function    Returns the Percentage Points (probability) for the Student t-
                      distribution

T.DIST.RT function    Returns the Student's t-distribution

T.INV function        Returns the t-value of the Student's t-distribution as a function of
                      the probability and the degrees of freedom

T.INV.2T function     Returns the inverse of the Student's t-distribution

TAN function          Returns the tangent of a number

TANH function         Returns the hyperbolic tangent of a number

TBILLEQ function      Returns the bond-equivalent yield for a Treasury bill

TBILLPRICE function   Returns the price per $100 face value for a Treasury bill

TBILLYIELD function   Returns the yield for a Treasury bill

TEXT function         Formats a number and converts it to text

TIME function         Returns the serial number of a particular time

TIMEVALUE function    Converts a time in the form of text to a serial number

TODAY function        Returns the serial number of today's date

TRIM function         Removes spaces from text

TRIMMEAN function     Returns the mean of the interior of a data set

TRUE function         Returns the logical value TRUE
 Function                Description

TRUNC function          Truncates a number to an integer

TYPE function           Returns a number indicating the data type of a value

UNICHAR function        Returns the Unicode character that is references by the given
                        numeric value

UNICODE function        Returns the number (code point) that corresponds to the first
                        character of the text

UPPER function          Converts text to uppercase

VALUE function          Converts a text argument to a number

VAR.P function          Calculates variance based on the entire population

VAR.S function          Estimates variance based on a sample

VARA function           Estimates variance based on a sample, including numbers, text,
                        and logical values

VARPA function          Calculates variance based on the entire population, including
                        numbers, text, and logical values

VDB function            Returns the depreciation of an asset for a specified or partial
                        period by using a declining balance method

VLOOKUP function        Looks in the first column of an array and moves across the row to
                        return the value of a cell

WEEKDAY function        Converts a serial number to a day of the week

WEEKNUM function        Converts a serial number to a number representing where the
                        week falls numerically with a year

WEIBULL.DIST function   Returns the Weibull distribution

WORKDAY function        Returns the serial number of the date before or after a specified
                        number of workdays

WORKDAY.INTL function   Returns the serial number of the date before or after a specified
                        number of workdays using parameters to indicate which and how
                        many days are weekend days

XIRR function           Returns the internal rate of return for a schedule of cash flows that
                        is not necessarily periodic

XNPV function           Returns the net present value for a schedule of cash flows that is
                        not necessarily periodic
 Function                    Description

XOR function                Returns a logical exclusive OR of all arguments

YEAR function               Converts a serial number to a year

YEARFRAC function           Returns the year fraction representing the number of whole days
                            between start_date and end_date

YIELD function              Returns the yield on a security that pays periodic interest

YIELDDISC function          Returns the annual yield for a discounted security; for example, a
                            Treasury bill

YIELDMAT function           Returns the annual yield of a security that pays interest at maturity

Z.TEST function             Returns the one-tailed probability-value of a z-test


The Excel JavaScript API doesn't have a "Cell" object or class. Instead, all Excel cells are
Range objects. An individual cell in the Excel UI translates to a Range object with one cell

in the Excel JavaScript API.

A Range object can also contain multiple, contiguous cells. Contiguous cells form an
unbroken rectangle (including single rows or columns). To learn about working with cells
that are not contiguous, see Work with discontiguous cells using the RangeAreas object.

For the complete list of properties and methods that the Range object supports, see
Range Object (JavaScript API for Excel).



Work with discontiguous cells using the
RangeAreas object
The RangeAreas object lets your add-in perform operations on multiple ranges at once.
These ranges may be contiguous, but they don't have to be. RangeAreas are further
discussed in the article Work with multiple ranges simultaneously in Excel add-ins.



This article provides code samples that show how to perform common tasks with charts
using the Excel JavaScript API. For the complete list of properties and methods that the
Chart and ChartCollection objects support, see Chart Object (JavaScript API for Excel)

and Chart Collection Object (JavaScript API for Excel).



Create a chart
The following code sample creates a chart in the worksheet named Sample. The chart is
a Line chart that is based upon data in the range A1:B13.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      let dataRange = sheet.getRange("A1:B13");
      let chart = sheet.charts.add(
        Excel.ChartType.line,
        dataRange,
        Excel.ChartSeriesBy.auto);

        chart.title.text = "Sales Data";
        chart.legend.position = Excel.ChartLegendPosition.right;
        chart.legend.format.fill.setSolidColor("white");
        chart.dataLabels.format.font.size = 15;
        chart.dataLabels.format.font.color = "black";

        await context.sync();
  });




New line chart
 Add a data series to a chart
The following code sample adds a data series to the first chart in the worksheet. The
new data series corresponds to the column named 2016 and is based upon data in the
range D2:D5.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      let chart = sheet.charts.getItemAt(0);
      let dataRange = sheet.getRange("D2:D5");

       let newSeries = chart.series.add("2016");
        newSeries.setValues(dataRange);

       await context.sync();
 });




Chart before the 2016 data series is added




Chart after the 2016 data series is added
 Set chart title
The following code sample sets the title of the first chart in the worksheet to Sales Data
by Year.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");

        let chart = sheet.charts.getItemAt(0);
        chart.title.text = "Sales Data by Year";

        await context.sync();
  });




Chart after title is set
 Set properties of an axis in a chart
Charts that use the Cartesian coordinate system         such as column charts, bar charts,
and scatter charts contain a category axis and a value axis. These examples show how to
set the title and display unit of an axis in a chart.


Set axis title
The following code sample sets the title of the category axis for the first chart in the
worksheet to Product.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");

        let chart = sheet.charts.getItemAt(0);
        chart.axes.categoryAxis.title.text = "Product";

        await context.sync();
  });




Chart after title of category axis is set
 Set axis display unit
The following code sample sets the display unit of the value axis for the first chart in the
worksheet to Hundreds.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");

        let chart = sheet.charts.getItemAt(0);
        chart.axes.valueAxis.displayUnit = "Hundreds";

        await context.sync();
  });




Chart after display unit of value axis is set
 Set visibility of gridlines in a chart
The following code sample hides the major gridlines for the value axis of the first chart
in the worksheet. You can show the major gridlines for the value axis of the chart, by
setting chart.axes.valueAxis.majorGridlines.visible to true .

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");

        let chart = sheet.charts.getItemAt(0);
        chart.axes.valueAxis.majorGridlines.visible = false;

        await context.sync();
  });




Chart with gridlines hidden
 Chart trendlines

Add a trendline
The following code sample adds a moving average trendline to the first series in the first
chart in the worksheet named Sample. The trendline shows a moving average over 5
periods.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");

        let chart = sheet.charts.getItemAt(0);
        let seriesCollection = chart.series;

  seriesCollection.getItemAt(0).trendlines.add("MovingAverage").movingAverageP
  eriod = 5;

        await context.sync();
  });




Chart with moving average trendline
 Update a trendline
The following code sample sets the trendline to type Linear for the first series in the
first chart in the worksheet named Sample.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");

        let chart = sheet.charts.getItemAt(0);
        let seriesCollection = chart.series;
        let series = seriesCollection.getItemAt(0);
        series.trendlines.getItem(0).type = "Linear";

        await context.sync();
  });




Chart with linear trendline
 Add and format a chart data table
You can access the data table element of a chart with the
Chart.getDataTableOrNullObject method. This method returns the ChartDataTable
object. The ChartDataTable object has boolean formatting properties such as visible ,
showLegendKey , and showHorizontalBorder .


The ChartDataTable.format property returns the ChartDataTableFormat object, which
allows you to further format and style the data table. The ChartDataTableFormat object
offers border , fill , and font properties.

The following code sample shows how to add a data table to a chart and then format
that data table using the ChartDataTable and ChartDataTableFormat objects.

  JavaScript


  // This code sample adds a data table to a chart that already exists on the
  worksheet,
  // and then adjusts the display and format of that data table.
  await Excel.run(async (context) => {
      // Retrieve the chart on the "Sample" worksheet.
      let chart =
  context.workbook.worksheets.getItem("Sample").charts.getItemAt(0);

       // Get the chart data table object and load its properties.
       let chartDataTable = chart.getDataTableOrNullObject();
       chartDataTable.load();
         // Set the display properties of the chart data table.
        chartDataTable.visible = true;
        chartDataTable.showLegendKey = true;
        chartDataTable.showHorizontalBorder = false;
        chartDataTable.showVerticalBorder = true;
        chartDataTable.showOutlineBorder = true;

      // Retrieve the chart data table format object and set font and border
  properties.
      let chartDataTableFormat = chartDataTable.format;
      chartDataTableFormat.font.color = "#B76E79";
      chartDataTableFormat.font.name = "Comic Sans";
      chartDataTableFormat.border.color = "blue";

        await context.sync();
  });



The following screenshot shows the data table that the preceding code sample creates.




Export a chart as an image
Charts can be rendered as images outside of Excel. Chart.getImage returns the chart as
a base64-encoded string representing the chart as a JPEG image. The following code
shows how to get the image string and log it to the console.

  JavaScript


  await Excel.run(async (context) => {
      let chart =
  context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");
      let imageAsString = chart.getImage();
      await context.sync();

      console.log(imageAsString.value);
      // Instead of logging, your add-in may use the base64-encoded string to
  save the image as a file or insert it in HTML.
  });



Chart.getImage takes three optional parameters: width, height, and the fitting mode.
   TypeScript


  getImage(width?: number, height?: number, fittingMode?:
  Excel.ImageFittingMode): OfficeExtension.ClientResult<string>;



These parameters determine the size of the image. Images are always proportionally
scaled. The width and height parameters put upper or lower bounds on the scaled
image. ImageFittingMode has three values with the following behaviors.

     Fill : The image's minimum height or width is the specified height or width
     (whichever is reached first when scaling the image). This is the default behavior
     when no fitting mode is specified.
     Fit : The image's maximum height or width is the specified height or width
     (whichever is reached first when scaling the image).
     FitAndCenter : The image's maximum height or width is the specified height or
     width (whichever is reached first when scaling the image). The resulting image is
     centered relative to the other dimension.


With coauthoring , multiple people can work together and edit the same Excel
workbook simultaneously. All coauthors of a workbook can see another coauthor's
changes as soon as that coauthor saves the workbook. To coauthor an Excel workbook,
the workbook must be stored in OneDrive, OneDrive for Business, or SharePoint Online.


  ï¼‰ Important

  In Excel for Microsoft 365, you will notice AutoSave in the upper-left corner. When
  AutoSave is turned on, coauthors see your changes in real time. Consider the
  impact of this behavior on the design of your Excel add-in. Users can turn off
  AutoSave via the switch in the upper left of the Excel window.




Coauthoring overview
When you change a workbook's content, Excel automatically synchronizes those
changes across all coauthors. Coauthors can change the content of a workbook, but so
can code running within an Excel add-in. For example, when the following JavaScript
code runs in an Office Add-in, the value of a range is set to Contoso.

  JavaScript


  range.values = [['Contoso']];



After 'Contoso' synchronizes across all coauthors, any user or add-in running in the
same workbook will see the new value of the range.

Coauthoring only synchronizes the content within the shared workbook. Values copied
from the workbook to JavaScript variables in an Excel add-in are not synchronized. For
example, if your add-in stores the value of a cell (such as 'Contoso') in a JavaScript
variable, and then a coauthor changes the value of the cell to 'Example', after
synchronization all coauthors see 'Example' in the cell. However, the value of the
JavaScript variable is still set to 'Contoso'. Furthermore, when multiple coauthors use the
same add-in, each coauthor has their own copy of the variable, which is not
synchronized. When you use variables that use workbook content, be sure you check for
updated values in the workbook before you use the variable.
 Use events to manage the in-memory state of
your add-in
Excel add-ins can read workbook content (from hidden worksheets and a setting object),
and then store it in data structures such as variables. After the original values are copied
into any of these data structures, coauthors can update the original workbook content.
This means that the copied values in the data structures are now out of sync with the
workbook content. When you build your add-ins, be sure to account for this separation
of workbook content and values stored in data structures.

For example, you might build a content add-in that displays custom visualizations. The
state of your custom visualizations might be saved in a hidden worksheet. When
coauthors use the same workbook, the following scenario can occur.

     User A opens the document and the custom visualizations are shown in the
     workbook. The custom visualizations read data from a hidden worksheet (for
     example, the color of the visualizations is set to blue).
     User B opens the same document, and starts modifying the custom visualizations.
     User B sets the color of the custom visualizations to orange. Orange is saved to the
     hidden worksheet.
     User A's hidden worksheet is updated with the new value of orange.
     User A's custom visualizations are still blue.

If you want User A's custom visualizations to respond to changes made by coauthors on
the hidden worksheet, use the BindingDataChanged event. This ensures that changes to
workbook content made by coauthors is reflected in the state of your add-in.



Caveats to using events with coauthoring
As described earlier, in some scenarios, triggering events for all coauthors provides an
improved user experience. However, be aware that in some scenarios this behavior can
produce poor user experiences.

For example, in data validation scenarios, it is common to display UI in response to
events. The BindingDataChanged event described in the previous section runs when
either a local user or coauthor (remote) changes the workbook content within the
binding. If the event handler of the BindingDataChanged event displays UI, users will see
UI that is unrelated to changes they were working on in the workbook, leading to a poor
user experience. Avoid displaying UI when using events in your add-in.
 Avoid table row coauthoring conflicts
It is a known issue that calls to the TableRowCollection.add API can cause coauthoring
conflicts. We do not recommend using that API if you anticipate your add-in will be run
while other users are editing the add-in's workbook (specifically, if they are editing the
table or any range under the table). The following guidance should help you avoid
issues with the TableRowCollection.add method (and avoid triggering the yellow bar
Excel shows that asks users to refresh).

   1. Use Range.values instead of TableRowCollection.add. Setting the Range values
     directly below the table automatically expands the table. Otherwise, adding table
     rows through the Table APIs results in merge conflicts for coauth users.
   2. There should be no data validation rules    applied to cells below the table, unless
     the data validation is applied to the entire column.
   3. If there is data under the table, the add-in needs to handle that before setting the
     range value. Using Range.insert to insert an empty row will move the data and
     make space for the expanding table. Otherwise, you risk overwriting cells below
     the table.
   4. You cannot add an empty row to a table with Range.values . The table only
     automatically expands if data is present in the cells directly below the table. Use
     either temporary data or hidden columns as a workaround to add an empty table
     row.

This article describes how to add, read, modify, and remove comments in a workbook
with the Excel JavaScript API. You can learn more about the comment feature from the
Insert comments and notes in Excel     article.

In the Excel JavaScript API, a comment includes both the single initial comment and the
connected threaded discussion. It is tied to an individual cell. Anyone viewing the
workbook with sufficient permissions can reply to a comment. A Comment object stores
those replies as CommentReply objects. You should consider a comment to be a thread
and that a thread must have a special entry as the starting point.




Comments within a workbook are tracked by the Workbook.comments property. This
includes comments created by users and also comments created by your add-in. The
Workbook.comments property is a CommentCollection object that contains a collection of

Comment objects. Comments are also accessible at the Worksheet level. The samples in
this article work with comments at the workbook level, but they can be easily modified
to use the Worksheet.comments property.



Add comments
 Use the CommentCollection.add method to add comments to a workbook. This method
takes up to three parameters:

      cellAddress : The cell where the comment is added. This can either be a string or

     Range object. The range must be a single cell.
      content : The comment's content. Use a string for plain text comments. Use a

     CommentRichContent object for comments with mentions.
      contentType : A ContentType enum specifying type of content. The default value is
      ContentType.plain .


The following code sample adds a comment to cell A2.

  JavaScript


  await Excel.run(async (context) => {
      // Add a comment to A2 on the "MyWorksheet" worksheet.
      let comments = context.workbook.comments;

      // Note that an InvalidArgument error will be thrown if multiple cells
  passed to `Comment.add`.
      comments.add("MyWorksheet!A2", "TODO: add data.");
      await context.sync();
  });




  ï¼— Note

  Comments added by an add-in are attributed to the current user of that add-in.



Add comment replies
A Comment object is a comment thread that contains zero or more replies. Comment
objects have a replies property, which is a CommentReplyCollection that contains
CommentReply objects. To add a reply to a comment, use the
CommentReplyCollection.add method, passing in the text of the reply. Replies are

displayed in the order they are added. They are also attributed to the current user of the
add-in.

The following code sample adds a reply to the first comment in the workbook.

  JavaScript


  await Excel.run(async (context) => {
      // Get the first comment added to the workbook.
      let comment = context.workbook.comments.getItemAt(0);
         comment.replies.add("Thanks for the reminder!");
        await context.sync();
  });




Edit comments
To edit a comment or comment reply, set its Comment.content property or
CommentReply.content property.


  JavaScript


  await Excel.run(async (context) => {
      // Edit the first comment in the workbook.
      let comment = context.workbook.comments.getItemAt(0);
      comment.content = "PLEASE add headers here.";
      await context.sync();
  });




Edit comment replies
To edit a comment reply, set its CommentReply.content property.

  JavaScript


  await Excel.run(async (context) => {
      // Edit the first comment reply on the first comment in the workbook.
      let comment = context.workbook.comments.getItemAt(0);
      let reply = comment.replies.getItemAt(0);
      reply.content = "Never mind";
      await context.sync();
  });




Delete comments
To delete a comment use the Comment.delete method. Deleting a comment also deletes
the replies associated with that comment.

  JavaScript


  await Excel.run(async (context) => {
      // Delete the comment thread at A2 on the "MyWorksheet" worksheet.
      context.workbook.comments.getItemByCell("MyWorksheet!A2").delete();
      await context.sync();
  });
 Delete comment replies
To delete a comment reply, use the CommentReply.delete method.

  JavaScript


  await Excel.run(async (context) => {
      // Delete the first comment reply from this worksheet's first comment.
      let comment = context.workbook.comments.getItemAt(0);
      comment.replies.getItemAt(0).delete();
      await context.sync();
  });




Resolve comment threads
A comment thread has a configurable boolean value, resolved , to indicate if it is
resolved. A value of true means the comment thread is resolved. A value of false
means the comment thread is either new or reopened.

  JavaScript


  await Excel.run(async (context) => {
      // Resolve the first comment thread in the workbook.
      context.workbook.comments.getItemAt(0).resolved = true;
      await context.sync();
  });



Comment replies have a read-only resolved property. Its value is always equal to that of
the rest of the thread.



Comment metadata
Each comment contains metadata about its creation, such as the author and creation
date. Comments created by your add-in are considered to be authored by the current
user.

The following sample shows how to display the author's email, author's name, and
creation date of a comment at A2.

  JavaScript
   await Excel.run(async (context) => {
      // Get the comment at cell A2 in the "MyWorksheet" worksheet.
      let comment = context.workbook.comments.getItemByCell("MyWorksheet!A2");

       // Load and print the following values.
       comment.load(["authorEmail", "authorName", "creationDate"]);
       await context.sync();

      console.log(`${comment.creationDate.toDateString()}:
  ${comment.authorName} (${comment.authorEmail})`);
  });




Comment reply metadata
Comment replies store the same types of metadata as the initial comment.

The following sample shows how to display the author's email, author's name, and
creation date of the latest comment reply at A2.

  JavaScript


  await Excel.run(async (context) => {
      // Get the comment at cell A2 in the "MyWorksheet" worksheet.
      let comment = context.workbook.comments.getItemByCell("MyWorksheet!A2");
      let replyCount = comment.replies.getCount();
      // Sync to get the current number of comment replies.
      await context.sync();

       // Get the last comment reply in the comment thread.
       let reply = comment.replies.getItemAt(replyCount.value - 1);
       reply.load(["authorEmail", "authorName", "creationDate"]);

       // Sync to load the reply metadata to print.
       await context.sync();

      console.log(`Latest reply: ${reply.creationDate.toDateString()}:
  ${reply.authorName} ${reply.authorEmail})`);
      await context.sync();
  });




Mentions
Mentions       are used to tag colleagues in a comment. This sends them notifications with
your comment's content. Your add-in can create these mentions on your behalf.

Comments with mentions need to be created with CommentRichContent objects. Call
CommentCollection.add with a CommentRichContent containing one or more mentions
 and specify ContentType.mention as the contentType parameter. The content string also
needs to be formatted to insert the mention into the text. The format for a mention is:
<at id="{replyIndex}">{mentionName}</at> .



  ï¼— Note

  Currently, only the mention's exact name can be used as the text of the mention
  link. Support for shortened versions of a name will be added later.


The following example shows a comment with a single mention.

  JavaScript


  await Excel.run(async (context) => {
      // Add an "@mention" for "Kate Kristensen" to cell A1 in the
  "MyWorksheet" worksheet.
      let mention = {
          email: "kakri@contoso.com",
          id: 0,
          name: "Kate Kristensen"
      };

      // This will tag the mention's name using the '@' syntax.
      // They will be notified via email.
      let commentBody = {
          mentions: [mention],
          richContent: '<at id="0">' + mention.name + "</at> - Can you take a
  look?"
      };

      // Note that an InvalidArgument error will be thrown if multiple cells
  passed to `comment.add`.
      context.workbook.comments.add("MyWorksheet!A1", commentBody,
  Excel.ContentType.mention);
      await context.sync();
  });




Comment events
Your add-in can listen for comment additions, changes, and deletions. Comment events
occur on the CommentCollection object. To listen for comment events, register the
onAdded , onChanged , or onDeleted comment event handler. When a comment event is

detected, use this event handler to retrieve data about the added, changed, or deleted
comment. The onChanged event also handles comment reply additions, changes, and
deletions.
 Each comment event only triggers once when multiple additions, changes, or deletions
are performed at the same time. All the CommentAddedEventArgs,
CommentChangedEventArgs, and CommentDeletedEventArgs objects contain arrays of
comment IDs to map the event actions back to the comment collections.

See the Work with Events using the Excel JavaScript API article for additional information
about registering event handlers, handling events, and removing event handlers.


Comment addition events
The onAdded event is triggered when one or more new comments are added to the
comment collection. This event is not triggered when replies are added to a comment
thread (see Comment change events to learn about comment reply events).

The following sample shows how to register the onAdded event handler and then use the
CommentAddedEventArgs object to retrieve the commentDetails array of the added
comment.


  ï¼— Note

  This sample only works when a single comment is added.


  JavaScript


  await Excel.run(async (context) => {
      let comments =
  context.workbook.worksheets.getActiveWorksheet().comments;

        // Register the onAdded comment event handler.
        comments.onAdded.add(commentAdded);

        await context.sync();
  });

  async function commentAdded() {
      await Excel.run(async (context) => {
          // Retrieve the added comment using the comment ID.
          // Note: This method assumes only a single comment is added at a
  time.
          let addedComment =
  context.workbook.comments.getItem(event.commentDetails[0].commentId);

               // Load the added comment's data.
               addedComment.load(["content", "authorName"]);

               await context.sync();
           // Print out the added comment's data.
          console.log(`A comment was added. ID:
  ${event.commentDetails[0].commentId}. Comment
  content:${addedComment.content}. Comment
  author:${addedComment.authorName}`);
          await context.sync();
      });
  }




Comment change events
The onChanged comment event is triggered in the following scenarios.

     A comment's content is updated.
     A comment thread is resolved.
     A comment thread is reopened.
     A reply is added to a comment thread.
     A reply is updated in a comment thread.
     A reply is deleted in a comment thread.

The following sample shows how to register the onChanged event handler and then use
the CommentChangedEventArgs object to retrieve the commentDetails array of the changed
comment.


  ï¼— Note

  This sample only works when a single comment is changed.


  JavaScript


  await Excel.run(async (context) => {
      let comments =
  context.workbook.worksheets.getActiveWorksheet().comments;

        // Register the onChanged comment event handler.
        comments.onChanged.add(commentChanged);

        await context.sync();
  });

  async function commentChanged() {
      await Excel.run(async (context) => {
          // Retrieve the changed comment using the comment ID.
          // Note: This method assumes only a single comment is changed at a
  time.
          let changedComment =
  context.workbook.comments.getItem(event.commentDetails[0].commentId);
                // Load the changed comment's data.
               changedComment.load(["content", "authorName"]);

               await context.sync();

          // Print out the changed comment's data.
          console.log(`A comment was changed. ID:
  ${event.commentDetails[0].commentId}. Updated comment content:
  ${changedComment.content}. Comment author: ${changedComment.authorName}`);
          await context.sync();
      });
  }




Comment deletion events
The onDeleted event is triggered when a comment is deleted from the comment
collection. Once a comment has been deleted, its metadata is no longer available. The
CommentDeletedEventArgs object provides comment IDs, in case your add-in is
managing individual comments.

The following sample shows how to register the onDeleted event handler and then use
the CommentDeletedEventArgs object to retrieve the commentDetails array of the deleted
comment.


  ï¼— Note

  This sample only works when a single comment is deleted.


  JavaScript


  await Excel.run(async (context) => {
      let comments =
  context.workbook.worksheets.getActiveWorksheet().comments;

        // Register the onDeleted comment event handler.
        comments.onDeleted.add(commentDeleted);

        await context.sync();
  });

  async function commentDeleted() {
      await Excel.run(async (context) => {
          // Print out the deleted comment's ID.
          // Note: This method assumes only a single comment is deleted at a
  time.
          console.log(`A comment was deleted. ID:
  ${event.commentDetails[0].commentId}`);
     });
 }

Data types organize complex data structures as objects. This includes formatted number
values, web images, and entities as entity cards.

The following screenshot highlights one of the primary features of data types: an entity
card. In this case, the entity card shows expanded information about the Tofu product
from a list of grocery store products.




  ï¼— Note

  To start experimenting with data types right away, install Script Lab in Excel and
  check out the Data types section in our Samples library. You can also explore the
  Script Lab samples in our OfficeDev/office-js-snippets     repository.
 Prior to the data types addition, the Excel JavaScript API supported string, number,
boolean, and error data types. The Excel UI formatting layer is capable of adding
currency, date, and other types of formatting to cells that contain the four original data
types, but this formatting layer only controls the display of the original data types in the
Excel UI. The underlying number value is not changed, even when a cell in the Excel UI is
formatted as currency or a date. This gap between an underlying value and the
formatted display in the Excel UI can result in confusion and errors during add-in
calculations. The data types APIs are a solution to this gap.

Data types expand Excel JavaScript API support beyond the four original data types
(string, number, boolean, and error) to include web images, formatted number values,
entities, arrays within entities, and improved error data types as flexible data structures.
These types, which power many linked data types        experiences, allow for precision and
simplicity during add-in calculations and extend the potential of Excel add-ins beyond a
2-dimensional grid.


  îª€ Tip

  Check out examples of linked data types, which are available to all Excel users, in
  the following sample workbook: linked-data-types-sample-workbook.xlsx.




Resources
Explore data types with the following resources.

   1. Learn data types basics in the Excel data types core concepts article.
   2. Install Script Lab in Excel and explore the Data types section in our Samples library.
   3. Learn how to extend Excel beyond a 2-dimensional grid with entity data types in
     the Use cards with entity value data types article.
   4. Try the Create and explore data types in Excel    sample in our OfficeDev/Office-
     Add-in-samples      repository.



Data types and custom functions
Data types enhance the power of custom functions. Custom functions accept data types
as both inputs to custom functions and outputs of custom functions, and custom
functions use the same JSON schema for data types as the Excel JavaScript API. This
data types JSON schema is maintained as custom functions calculate and evaluate. To
learn more about integrating data types with your custom functions, see Custom
functions and data types.
 Excel data types core concepts
Article â€¢ 03/09/2023


This article describes how to use the Excel JavaScript API to work with data types. It
introduces core concepts that are fundamental to data type development.



The valuesAsJson property
The valuesAsJson property (or the singular valueAsJson for NamedItem) is integral to
creating data types in Excel. This property is an expansion of values properties, such as
Range.values. Both the values and valuesAsJson properties are used to access the value
in a cell, but the values property only returns one of the four basic types: string,
number, boolean, or error (as a string). In contrast, valuesAsJson returns expanded
information about the four basic types, and this property can return data types such as
formatted number values, entities, and web images.

The following objects offer the valuesAsJson property.

      NamedItem (as valueAsJson )
      NamedItemArrayValues
      Range
      RangeView
      TableColumn
      TableRow


  ï¼— Note

  Some cell values change based on a user's locale. The valuesAsJsonLocal property
  offers localization support and is available on all the same objects as valuesAsJson .




Cell values
The valuesAsJson property returns a CellValue type alias, which is a union     of the
following data types.

      ArrayCellValue
      BooleanCellValue
      DoubleCellValue
      EmptyCellValue
      EntityCellValue
     ErrorCellValue
     FormattedNumberCellValue
     LinkedEntityCellValue
     ReferenceCellValue
     StringCellValue
     ValueTypeNotAvailableCellValue
     WebImageCellValue

The CellValue type alias also returns the CellValueExtraProperties object, which is an
intersection   with the rest of the *CellValue types. It's not a data type itself. The
properties of the CellValueExtraProperties object are used with all data types to
specify details related to overwriting cell values.


JSON schema
Each cell value type returned by valuesAsJson uses a JSON metadata schema designed
for that type. Along with additional properties unique to each data type, these JSON
metadata schemas all have the type , basicType , and basicValue properties in common.

The type defines the CellValueType of the data. The basicType is always read-only and
is used as a fallback when the data type isn't supported or is formatted incorrectly. The
basicValue matches the value that would be returned by the values property. The

basicValue is used as a fallback when calculations encounter incompatible scenarios,
such as an older version of Excel that doesn't support the data types feature. The
basicValue is read-only for ArrayCellValue , EntityCellValue , LinkedEntityCellValue ,
and WebImageCellValue data types.

In addition to the three fields that all data types share, the JSON metadata schema for
each *CellValue has properties available according to that type. For example, the
WebImageCellValue type includes the altText and attribution properties, while the
EntityCellValue type offers the properties and text fields.

The following sections show JSON code samples for the formatted number value, entity
value, and web image data types.



Formatted number values
The FormattedNumberCellValue object enables Excel add-ins to define a numberFormat
property for a value. Once assigned, this number format travels through calculations
 with the value and can be returned by functions.

The following JSON code sample shows the complete schema of a formatted number
value. The myDate formatted number value in the code sample displays as 1/16/1990 in
the Excel UI. If the minimum compatibility requirements for the data types feature aren't
met, calculations use the basicValue in place of the formatted number.

  TypeScript


  // This is an example of the complete JSON of a formatted number value.
  // In this case, the number is formatted as a date.
  const myDate: Excel.FormattedNumberCellValue = {
      type: Excel.CellValueType.formattedNumber,
      basicValue: 32889.0,
      basicType: Excel.RangeValueType.double, // A read-only property. Used as
  a fallback in incompatible scenarios.
      numberFormat: "m/d/yyyy"
  };



Begin experimenting with formatted number values by opening Script Lab and checking
out the Data types: Formatted numbers       snippet in our Samples library.



Entity values
An entity value is a container for data types, similar to an object in object-oriented
programming. Entities also support arrays as properties of an entity value. The
EntityCellValue object allows add-ins to define properties such as type , text , and
properties . The properties property enables the entity value to define and contain

additional data types.

The basicType and basicValue properties define how calculations read this entity data
type if the minimum compatibility requirements to use data types aren't met. In that
scenario, this entity data type displays as a #VALUE! error in the Excel UI.

The following JSON code sample shows the complete schema of an entity value that
contains text, an image, a date, and an additional text value.

  TypeScript


  // This is an example of the complete JSON for an entity value.
  // The entity contains text and properties which contain an image, a date,
  and another text value.
  const myEntity: Excel.EntityCellValue = {
      type: Excel.CellValueType.entity,
      text: "A llama",
      properties: {
                image: myImage,
               "start date": myDate,
               "quote": {
                   type: Excel.CellValueType.string,
                   basicValue: "I love llamas."
               }
      },
      basicType: Excel.RangeValueType.error, // A read-only property. Used as
  a fallback in incompatible scenarios.
      basicValue: "#VALUE!" // A read-only property. Used as a fallback in
  incompatible scenarios.
  };



Entity values also offer a layouts property that creates a card for the entity. The card
displays as a modal window in the Excel UI and can display additional information
contained within the entity value, beyond what's visible in the cell. To learn more, see
Use cards with entity value data types.

To explore entity data types, start by going to Script Lab in Excel and opening the Data
types: Create entity cards from data in a table     snippet in our Samples library. The Data
types: Entity values with references     and Data types: Entity value attribution
properties      snippets offer a deeper look at entity features.


Linked entities
Linked entity values, or LinkedEntityCellValue objects, are a type of entity value. These
objects integrate data provided by an external service and can display this data as an
entity card, like regular entity values. The Stocks and Geography data types        available
via the Excel UI are linked entity values.



Web image values
The WebImageCellValue object creates the ability to store an image as part of an entity
or as an independent value in a range. This object offers many properties, including
address , altText , and relatedImagesAddress .


The basicType and basicValue properties define how calculations read the web image
data type if the minimum compatibility requirements to use the data types feature
aren't met. In that scenario, this web image data type displays as a #VALUE! error in the
Excel UI.

The following JSON code sample shows the complete schema of a web image.

  TypeScript
   // This is an example of the complete JSON for a web image.
  const myImage: Excel.WebImageCellValue = {
      type: Excel.CellValueType.webImage,
      address: "https://bit.ly/2YGOwtw",
      basicType: Excel.RangeValueType.error, // A read-only property. Used as
  a fallback in incompatible scenarios.
      basicValue: "#VALUE!" // A read-only property. Used as a fallback in
  incompatible scenarios.
  };



Try out web image data types by opening Script Lab and selecting the Data types: Web
images       snippet in our Samples library.



Improved error support
The data types APIs expose existing Excel UI errors as objects. Now that these errors are
accessible as objects, add-ins can define or retrieve properties such as type , errorType ,
and errorSubType .

The following is a list of all the error objects with expanded support through data types.

         BlockedErrorCellValue
         BusyErrorCellValue
         CalcErrorCellValue
         ConnectErrorCellValue
         Div0ErrorCellValue
         FieldErrorCellValue
         GettingDataErrorCellValue
         NotAvailableErrorCellValue
         NameErrorCellValue
         NullErrorCellValue
         NumErrorCellValue
         RefErrorCellValue
         SpillErrorCellValue
         ValueErrorCellValue

Each of the error objects can access an enum through the errorSubType property, and
this enum contains additional data about the error. For example, the
BlockedErrorCellValue error object can access the BlockedErrorCellValueSubType enum.

The BlockedErrorCellValueSubType enum offers additional data about what caused the
error.
 Learn more about the data types error objects by checking out the Data types: Set error
values   snippet in our Script Lab Samples library.



Next steps
Learn how entity data types extend the potential of Excel add-ins beyond a 2-
dimensional grid with the Use cards with entity value data types article.

Use the Create and explore data types in Excel    sample in our OfficeDev/Office-Add-
in-samples    repository to experiment more deeply with data types by building and
sideloading an add-in that creates and edits data types in a workbook.


This article describes how to use the Excel JavaScript API to create card modal windows
in the Excel UI with entity value data types. These cards can display additional
information contained within an entity value, beyond what's already visible in a cell, such
as related images, product category information, and data attributions.


  ï¼— Note

  This article expands on information described in the Excel data types core
  concepts article. We recommend reading that article before learning about entity
  cards.


An entity value, or EntityCellValue, is a container for data types and similar to an object
in object-oriented programming. This article shows how to use entity value card
properties, layout options, and data attribution functionality to create entity values that
display as cards.

The following screenshot shows an example of an open entity value card, in this case for
the Chef Anton's Gumbo Mix product from a list of grocery store products.
 Card properties
The entity value properties property allows you to set customized information about
your data types. The properties key accepts nested data types. Each nested property, or
data type, must have a type and basicValue setting.


  ï¼‰ Important

  The nested properties data types are used in combination with the Card layout
  values described in the subsequent article section. After defining a nested data type
  in properties , it must be assigned in the layouts property to display on the card.


The following code snippet shows the JSON for an entity value with multiple data types
nested within properties .
   ï¼— Note

  To experiment with this code snippet in a complete sample, open Script Lab in
  Excel and select Data types: Create entity cards from data in a table   in our
  Samples library.


  TypeScript


  const entity: Excel.EntityCellValue = {
      type: Excel.CellValueType.entity,
      text: productName,
      properties: {
          "Product ID": {
              type: Excel.CellValueType.string,
              basicValue: productID.toString() || ""
          },
          "Product Name": {
              type: Excel.CellValueType.string,
              basicValue: productName || ""
          },
          "Image": {
              type: Excel.CellValueType.webImage,
              address: product.productImage || ""
          },
          "Quantity Per Unit": {
              type: Excel.CellValueType.string,
              basicValue: product.quantityPerUnit || ""
          },
          "Unit Price": {
              type: Excel.CellValueType.formattedNumber,
              basicValue: product.unitPrice,
              numberFormat: "$* #,##0.00"
          },
          Discontinued: {
              type: Excel.CellValueType.boolean,
              basicValue: product.discontinued || false
          }
      },
      layouts: {
          // Enter layout settings here.
      }
  };



The following screenshot shows an entity value card that uses the preceding code
snippet. The screenshot shows the Product ID, Product Name, Image, Quantity Per
Unit, and Unit Price information from the preceding code snippet.
 Property metadata
Entity properties have an optional propertyMetadata field that uses the
CellValuePropertyMetadata object and offers the properties attribution , excludeFrom ,
and sublabel . The following code snippet shows how to add a sublabel to the "Unit
Price" property from the preceding code snippet. In this case, the sublabel identifies

the currency type.


  ï¼— Note

  The propertyMetadata field is only available on data types that are nested within
  entity properties.


  TypeScript
   // This code snippet is an excerpt from the `properties` field of the
  // preceding `EntityCellValue` snippet. "Unit Price" is a property of
  // an entity value.
          "Unit Price": {
              type: Excel.CellValueType.formattedNumber,
              basicValue: product.unitPrice,
              numberFormat: "$* #,##0.00",
              propertyMetadata: {
                sublabel: "USD"
              }
          },



The following screenshot shows an entity value card that uses the preceding code
snippet, displaying the property metadata sublabel of USD next to the Unit Price
property.




Card layout
 The entity value layouts property defines the appearance of the entity. Use layouts to
specify attributes such as an entity icon, card title, image for a card, and the number of
sections to display.


  ï¼‰ Important

  The nested layouts values are used in combination with the Card properties data
  types described in the preceding article section. A nested data type must be
  defined in properties before it can be assigned in layouts to display on the card.


The layouts property contains two direct subproperties, compact and card . The card
property specifies the appearance of a card when the entity card is open. The compact
property only defines the icon for an entity, and this icon only displays when the card is
in its compact, or unopened state. See the EntityCompactLayoutIcons enum for a full list
of available icons. The next code snippet shows how to display the shoppingBag icon.

Within the card property, use the CardLayoutStandardProperties object to define the
components of the card like title , subTitle , and sections .

The entity value JSON in the next code snippet shows a card layout with nested title
and mainImage objects, as well as three sections within the card. Note that the title
property "Product Name" has a corresponding data type in the preceding Card
properties article section. The mainImage property also has a corresponding "Image"
data type in the preceding section. The sections property takes a nested array and uses
the CardLayoutSectionStandardProperties object to define the appearance of each
section.

Within each card section you can specify elements like layout , title , and properties .
The layout key uses the CardLayoutListSection object and accepts the value "List" .
The properties key accepts an array of strings. Note that the properties values, such as
"Product ID" , have corresponding data types in the preceding Card properties article

section. Sections can also be collapsible and can be defined with boolean values as
collapsed or not collapsed when the entity card is opened in the Excel UI.


  ï¼— Note

  To experiment with this code snippet in a complete sample, open Script Lab in
  Excel and select Data types: Create entity cards from data in a table      in our
  Samples library.
   TypeScript


  const entity: Excel.EntityCellValue = {
      type: Excel.CellValueType.entity,
      text: productName,
      properties: {
          // Enter property settings here.
      },
      layouts: {
          compact: {
              icon: Excel.EntityCompactLayoutIcons.shoppingBag
          },
          card: {
              title: {
                  property: "Product Name"
              },
              mainImage: {
                  property: "Image"
              },
              sections: [
                  {
                      layout: "List",
                      properties: ["Product ID"]
                  },
                  {
                      layout: "List",
                      title: "Quantity and price",
                      collapsible: true,
                      collapsed: false, // This section will not be collapsed
  when the card is opened.
                      properties: ["Quantity Per Unit", "Unit Price"]
                  },
                  {
                      layout: "List",
                      title: "Additional information",
                      collapsible: true,
                      collapsed: true, // This section will be collapsed when
  the card is opened.
                      properties: ["Discontinued"]
                  }
              ]
          }
      }
  };



The following screenshot shows an entity value card that uses the preceding code
snippets. In the screenshot, the shoppingBag icon displays alongside the product names
in the spreadsheet. In the entity card, the mainImage object displays at the top, followed
by the title object which uses the Product Name and is set to Chef Anton's Gumbo
Mix. The screenshot also shows sections . The Quantity and price section is collapsible
 and contains Quantity Per Unit and Unit Price. The Additional information field is
collapsible and is collapsed when the card is opened.




  ï¼— Note

  In the preceding screenshot, the branch icon displays alongside Condiments in the
  Category section. See the Data types: Create entity cards from data in a table
  sample to learn how to set nested icons like the Category section icon.

  There is a known issue with nested icons in Excel on Mac. In that environment,
  nested icons will always display as the generic icon, regardless of which icon is
  selected with the EntityCompactLayoutIcons enum.




Card data attribution
 Entity value cards can display a data attribution to give credit to the provider of the
information in the entity card. The entity value provider property uses the
CellValueProviderAttributes object, which defines the description , logoSourceAddress ,
and logoTargetAddress values.

The data provider property displays an image in the lower left corner of the entity card.
It uses the logoSourceAddress to specify a source URL for the image. The
logoTargetAddress value defines the URL destination if the logo image is selected. The

description value displays as a tooltip when hovering over the logo. The description

value also displays as a plain text fallback if the logoSourceAddress is not defined or if
the source address for the image is broken.

The JSON in the following code snippet shows an entity value that uses the provider
property to specify a data provider attribution for the entity.


  ï¼— Note

  To experiment with this code snippet in a complete sample, open Script Lab in
  Excel and select Data types: Entity value attribution properties      in our Samples
  library.


  TypeScript


  const entity: Excel.EntityCellValue = {
      type: Excel.CellValueType.entity,
      text: productName,
      properties: {
          // Enter property settings here.
      },
      layouts: {
          // Enter layout settings here.
      },
      provider: {
          description: product.providerName, // Name of the data provider.
  Displays as a tooltip when hovering over the logo. Also displays as a
  fallback if the source address for the image is broken.
          logoSourceAddress: product.sourceAddress, // Source URL of the logo
  to display.
          logoTargetAddress: product.targetAddress // Destination URL that the
  logo navigates to when selected.
      }
  };



The following screenshot shows an entity value card that uses the preceding code
snippet. The screenshot shows the data provider attribution in the lower left corner. In
 this instance, the data provider is Microsoft and the Microsoft logo is displayed.




Next steps
Try out the Create and explore data types in Excel   sample in our OfficeDev/Office-
Add-in-samples     repository. This sample guides you through building and then
sideloading an add-in that creates and edits data types in a workbook.


The Excel JavaScript Library provides APIs to enable your add-in to add automatic data
validation to tables, columns, rows, and other ranges in a workbook. To understand the
concepts and the terminology of data validation, please see the following articles about
how users add data validation through the Excel UI.

      Apply data validation to cells
      More on data validation
      Description and examples of data validation in Excel



Programmatic control of data validation
The Range.dataValidation property, which takes a DataValidation object, is the entry
point for programmatic control of data validation in Excel. There are five properties to
the DataValidation object:

      rule â€” Defines what constitutes valid data for the range. See DataValidationRule.

      errorAlert â€” Specifies whether an error pops up if the user enters invalid data,
      and defines the alert text, title, and style; for example, information , warning , and
      stop . See DataValidationErrorAlert.

      prompt â€” Specifies whether a prompt appears when the user hovers over the
      range and defines the prompt message. See DataValidationPrompt.
      ignoreBlanks â€” Specifies whether the data validation rule applies to blank cells in
      the range. Defaults to true .
      type â€” A read-only identification of the validation type, such as WholeNumber,
      Date, TextLength, etc. It is set indirectly when you set the rule property.


  ï¼— Note

  Data validation added programmatically behaves just like manually added data
  validation. In particular, note that data validation is triggered only if the user
  directly enters a value into a cell or copies and pastes a cell from elsewhere in the
  workbook and chooses the Values paste option. If the user copies a cell and does a
  plain paste into a range with data validation, validation is not triggered.




Creating validation rules
 To add data validation to a range, your code must set the rule property of the
DataValidation object in Range.dataValidation . This takes a DataValidationRule object
which has seven optional properties. No more than one of these properties may be
present in any DataValidationRule object. The property that you include determines the
type of validation.


Basic and DateTime validation rule types
The first three DataValidationRule properties (i.e., validation rule types) take a
BasicDataValidation object as their value.

      wholeNumber â€” Requires a whole number in addition to any other validation

     specified by the BasicDataValidation object.
      decimal â€” Requires a decimal number in addition to any other validation specified

     by the BasicDataValidation object.
      textLength â€” Applies the validation details in the BasicDataValidation object to

     the length of the cell's value.

Here is an example of creating a validation rule. Note the following about this code.

     The operator is the binary operator greaterThan . Whenever you use a binary
     operator, the value that the user tries to enter in the cell is the left-hand operand
     and the value specified in formula1 is the right-hand operand. So this rule says
     that only whole numbers that are greater than 0 are valid.
     The formula1 is a hard-coded number. If you don't know at coding time what the
     value should be, you can also use an Excel formula (as a string) for the value. For
     example, "=A3" and "=SUM(A4,B5)" could also be values of formula1 .

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getActiveWorksheet();
      let range = sheet.getRange("B2:C5");

        range.dataValidation.rule = {
                wholeNumber: {
                    formula1: 0,
                    operator: Excel.DataValidationOperator.greaterThan
                }
            };

        await context.sync();
  });
 See BasicDataValidation for a list of the other binary operators.

There are also two ternary operators: between and notBetween . To use these, you must
specify the optional formula2 property. The formula1 and formula2 values are the
bounding operands. The value that the user tries to enter in the cell is the third
(evaluated) operand. The following is an example of using the "Between" operator.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getActiveWorksheet();
      let range = sheet.getRange("B2:C5");

        range.dataValidation.rule = {
                decimal: {
                    formula1: 0,
                    formula2: 100,
                  operator: Excel.DataValidationOperator.between
                }
            };

        await context.sync();
  });



The next two rule properties take a DateTimeDataValidation object as their value.

      date

      time


The DateTimeDataValidation object is structured similarly to the BasicDataValidation : it
has the properties formula1 , formula2 , and operator , and is used in the same way. The
difference is that you cannot use a number in the formula properties, but you can enter
a ISO 8606 datetime     string (or an Excel formula). The following is an example that
defines valid values as dates in the first week of April, 2022.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getActiveWorksheet();
      let range = sheet.getRange("B2:C5");

        range.dataValidation.rule = {
                date: {
                    formula1: "2022-04-01",
                    formula2: "2022-04-08",
                    operator: Excel.DataValidationOperator.between
                }
            };
         await context.sync();
  });




List validation rule type
Use the list property in the DataValidationRule object to specify that the only valid
values are those from a finite list. The following is an example. Note the following about
this code.

       It assumes that there is a worksheet named "Names" and that the values in the
       range "A1:A3" are names.
       The source property specifies the list of valid values. The string argument refers to
       a range containing the names. You can also assign a comma-delimited list; for
       example: "Sue, Ricky, Liz".
       The inCellDropDown property specifies whether a drop-down control will appear in
       the cell when the user selects it. If set to true , then the drop-down appears with
       the list of values from the source .

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getActiveWorksheet();
      let range = sheet.getRange("B2:C5");
      let nameSourceRange =
  context.workbook.worksheets.getItem("Names").getRange("A1:A3");

        range.dataValidation.rule = {
            list: {
                inCellDropDown: true,
                source: "=Names!$A$1:$A$3"
            }
        };

        await context.sync();
  })




Custom validation rule type
Use the custom property in the DataValidationRule object to specify a custom
validation formula. The following is an example. Note the following about this code.

       It assumes there is a two-column table with columns Athlete Name and
       Comments in the A and B columns of the worksheet.
      To reduce verbosity in the Comments column, it makes data that includes the
     athlete's name invalid.
      SEARCH(A2,B2) returns the starting position, in string in B2, of the string in A2. If A2

     is not contained in B2, it does not return a number. ISNUMBER() returns a boolean.
     So the formula property says that valid data for the Comment column is data that
     does not include the string in the Athlete Name column.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getActiveWorksheet();
      let commentsRange =
  sheet.tables.getItem("AthletesTable").columns.getItem("Comments").getDataBod
  yRange();

        commentsRange.dataValidation.rule = {
                custom: {
                    formula: "=NOT(ISNUMBER(SEARCH(A2,B2)))"
                }
            };

        await context.sync();
  });




Create validation error alerts
You can a create custom error alert that appears when a user tries to enter invalid data
in a cell. The following is a simple example. Note the following about this code.

     The style property determines whether the user gets an informational alert, a
     warning, or a "stop" alert. Only stop actually prevents the user from adding invalid
     data. The pop-ups for warning and information have options that allow the user
     enter the invalid data anyway.
     The showAlert property defaults to true . This means that Excel will pop-up a
     generic alert (of type stop ) unless you create a custom alert which either sets
      showAlert to false or sets a custom message, title, and style. This code sets a
     custom message and title.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getActiveWorksheet();
      let range = sheet.getRange("B2:C5");

        range.dataValidation.errorAlert = {
                     message: "Sorry, only positive whole numbers are allowed",
                    showAlert: true, // The default is 'true'.
                      style: Excel.DataValidationAlertStyle.stop,
                    title: "Negative or Decimal Number Entered"
               };

        // Set range.dataValidation.rule and optionally .prompt here.

        await context.sync();
  });



For more information, see DataValidationErrorAlert.



Create validation prompts
You can create an instructional prompt that appears when a user hovers over, or selects,
a cell to which data validation has been applied. The following is an example.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getActiveWorksheet();
      let range = sheet.getRange("B2:C5");

        range.dataValidation.prompt = {
                message: "Please enter a positive whole number.",
                showPrompt: true, // The default is 'false'.
                title: "Positive Whole Numbers Only."
            };

        // Set range.dataValidation.rule and optionally .errorAlert here.

        await context.sync();
  });



For more information, see DataValidationPrompt.



Remove data validation from a range
To remove data validation from a range, call the Range.dataValidation.clear() method.

  JavaScript


  myrange.dataValidation.clear()
 It isn't necessary that the range you clear is exactly the same range as a range on which
you added data validation. If it isn't, only the overlapping cells, if any, of the two ranges
are cleared.


  ï¼— Note

  Clearing data validation from a range will also clear any data validation that a user
  has added manually to the range.




This article describes important concepts related to working with events in Excel and
provides code samples that show how to register event handlers, handle events, and
remove event handlers using the Excel JavaScript API.



Events in Excel
Each time certain types of changes occur in an Excel workbook, an event notification
fires. By using the Excel JavaScript API, you can register event handlers that allow your
add-in to automatically run a designated function when a specific event occurs. The
following events are currently supported.


                                                                              ï¾‰   Expand table


 Event                      Description                         Supported objects

 onActivated                Occurs when an object is            Chart, ChartCollection, Shape,
                            activated.                          Worksheet,
                                                                WorksheetCollection

 onActivated                Occurs when a workbook is           Workbook
                            activated.

 onAdded                    Occurs when an object is added      ChartCollection,
                            to the collection.                  CommentCollection,
                                                                TableCollection,
                                                                WorksheetCollection

 onAutoSaveSettingChanged   Occurs when the autoSave setting    Workbook
                            is changed on the workbook.

 onCalculated               Occurs when a worksheet has         Worksheet,
                            finished calculation (or all the    WorksheetCollection
                            worksheets of the collection have
                            finished).

 onChanged                  Occurs when the data of             CommentCollection, Table,
                            individual cells or comments has    TableCollection, Worksheet,
                            changed.                            WorksheetCollection
 Event                 Description                           Supported objects

onColumnSorted        Occurs when one or more               Worksheet,
                      columns have been sorted. This        WorksheetCollection
                      happens as the result of a left-to-
                      right sort operation.

onDataChanged         Occurs when data or formatting        Binding
                      within the binding is changed.

onDeactivated         Occurs when an object is              Chart, ChartCollection, Shape,
                      deactivated.                          Worksheet,
                                                            WorksheetCollection

onDeleted             Occurs when an object is deleted      ChartCollection,
                      from the collection.                  CommentCollection,
                                                            TableCollection,
                                                            WorksheetCollection

onFormatChanged       Occurs when the format is             Worksheet,
                      changed on a worksheet.               WorksheetCollection

onFormulaChanged      Occurs when a formula is              Worksheet,
                      changed.                              WorksheetCollection

onMoved               Occurs when a worksheet is            WorksheetCollection
                      moved within a workbook.

onNameChanged         Occurs when the worksheet name        Worksheet,
                      is changed.                           WorksheetCollection

onProtectionChanged   Occurs when the worksheet             Worksheet,
                      protection state is changed.          WorksheetCollection

onRowHiddenChanged    Occurs when the row-hidden            Worksheet,
                      state changes on a specific           WorksheetCollection
                      worksheet.

onRowSorted           Occurs when one or more rows          Worksheet,
                      have been sorted. This happens        WorksheetCollection
                      as the result of a top-to-bottom
                      sort operation.

onSelectionChanged    Occurs when the active cell or        Binding, Table, Workbook,
                      selected range is changed.            Worksheet,
                                                            WorksheetCollection

onSettingsChanged     Occurs when the Settings in the       SettingCollection
                      document are changed.

onSingleClicked       Occurs when left-clicked/tapped       Worksheet,
  Event                       Description                            Supported objects

                             action occurs in the worksheet.        WorksheetCollection

 onVisibilityChanged         Occurs when the worksheet              Worksheet,
                             visibility is changed.                 WorksheetCollection



Events in preview

  ï¼— Note

  The following events are currently available only in public preview. To use this
  feature, you must use the preview version of the Office JavaScript API library from
  the Office.js content delivery network (CDN)            . The type definition file       for
  TypeScript compilation and IntelliSense is found at the CDN and DefinitelyTyped                .
  You can install these types with npm install --save-dev @types/office-js-preview .
  For more information on our upcoming APIs, please visit Excel JavaScript API
  requirement sets.



                                                                                  ï¾‰    Expand table


 Event        Description                             Supported objects

 onFiltered   Occurs when a filter is applied to      Table, TableCollection, Worksheet,
              an object.                              WorksheetCollection



Event triggers
Events within an Excel workbook can be triggered by:

     User interaction via the Excel user interface (UI) that changes the workbook
     Office Add-in (JavaScript) code that changes the workbook
     VBA add-in (macro) code that changes the workbook

Any change that complies with default behavior of Excel will trigger the corresponding
events in a workbook.


Lifecycle of an event handler
An event handler is created when an add-in registers the event handler. It is destroyed
when the add-in unregisters the event handler or when the add-in is refreshed,
 reloaded, or closed. Event handlers do not persist as part of the Excel file, or across
sessions with Excel on the web.


  ï¼µ Caution

  When an object to which events are registered is deleted (e.g., a table with an
  onChanged event registered), the event handler no longer triggers but remains in

  memory until the add-in or Excel session refreshes or closes.



Events and coauthoring
With coauthoring, multiple people can work together and edit the same Excel workbook
simultaneously. For events that can be triggered by a coauthor, such as onChanged , the
corresponding Event object will contain a source property that indicates whether the
event was triggered locally by the current user ( event.source == Local ) or was triggered
by the remote coauthor ( event.source == Remote ).



Register an event handler
The following code sample registers an event handler for the onChanged event in the
worksheet named Sample. The code specifies that when data changes in that worksheet,
the handleChange function should run.

  JavaScript


  await Excel.run(async (context) => {
      const worksheet = context.workbook.worksheets.getItem("Sample");
      worksheet.onChanged.add(handleChange);

      await context.sync();
      console.log("Event handler successfully registered for onChanged event
  in the worksheet.");
  }).catch(errorHandlerFunction);




Handle an event
As shown in the previous example, when you register an event handler, you indicate the
function that should run when the specified event occurs. You can design that function
to perform whatever actions your scenario requires. The following code sample shows
an event handler function that simply writes information about the event to the console.
   JavaScript


  async function handleChange(event) {
      await Excel.run(async (context) => {
          await context.sync();
          console.log("Change type of event: " + event.changeType);
          console.log("Address of event: " + event.address);
          console.log("Source of event: " + event.source);
      }).catch(errorHandlerFunction);
  }




Remove an event handler
The following code sample registers an event handler for the onSelectionChanged event
in the worksheet named Sample and defines the handleSelectionChange function that
will run when the event occurs. It also defines the remove() function that can
subsequently be called to remove that event handler. Note that the RequestContext
used to create the event handler is needed to remove it.

  JavaScript


  let eventResult;

  async function run() {
    await Excel.run(async (context) => {
      const worksheet = context.workbook.worksheets.getItem("Sample");
      eventResult = worksheet.onSelectionChanged.add(handleSelectionChange);

      await context.sync();
      console.log("Event handler successfully registered for
  onSelectionChanged event in the worksheet.");
    });
  }

  async function handleSelectionChange(event) {
    await Excel.run(async (context) => {
      await context.sync();
      console.log("Address of current selection: " + event.address);
    });
  }

  async function remove() {
    // The `RequestContext` used to create the event handler is needed to
  remove it.
    // In this example, `eventContext` is being used to keep track of that
  context.
    await Excel.run(eventResult.context, async (context) => {
      eventResult.remove();
      await context.sync();
         eventResult = null;
        console.log("Event handler successfully removed.");
      });
  }




Enable and disable events
The performance of an add-in may be improved by disabling events. For example, your
app might never need to receive events, or it could ignore events while performing
batch-edits of multiple entities.

Events are enabled and disabled at the runtime level. The enableEvents property
determines if events are fired and their handlers are activated.

The following code sample shows how to toggle events on and off.

  JavaScript


  await Excel.run(async (context) => {
      context.runtime.load("enableEvents");
      await context.sync();

        let eventBoolean = !context.runtime.enableEvents;
        context.runtime.enableEvents = eventBoolean;
        if (eventBoolean) {
            console.log("Events are currently on.");
        } else {
            console.log("Events are currently off.");
        }

        await context.sync();
  });



   ï¼– Collaborate with us on
   GitHub                                Office Add-ins feedback
                                         Office Add-ins is an open source project.
   The source for this content can
                                         Select a link to provide feedback:
   be found on GitHub, where you
   can also create and review
 issues and pull requests. For   î¯¨ Open a documentation issue
more information, see our
contributor guide.              î´• Provide product feedback
 Performance optimization using the
Excel JavaScript API
Article â€¢ 03/09/2023


There are multiple ways that you can perform common tasks with the Excel JavaScript
API. You'll find significant performance differences between various approaches. This
article provides guidance and code samples to show you how to perform common tasks
efficiently using Excel JavaScript API.


  ï¼‰ Important

  Many performance issues can be addressed through recommended usage of load
  and sync calls. See the "Performance improvements with the application-specific
  APIs" section of Resource limits and performance optimization for Office Add-ins
  for advice on working with the application-specific APIs in an efficient way.




Suspend Excel processes temporarily
Excel has a number of background tasks reacting to input from both users and your
add-in. Some of these Excel processes can be controlled to yield a performance benefit.
This is especially helpful when your add-in deals with large data sets.


Suspend calculation temporarily
If you are trying to perform an operation on a large number of cells (for example,
setting the value of a huge range object) and you don't mind suspending the calculation
in Excel temporarily while your operation finishes, we recommend that you suspend
calculation until the next context.sync() is called.

See the Application Object reference documentation for information about how to use
the suspendApiCalculationUntilNextSync() API to suspend and reactivate calculations in
a very convenient way. The following code demonstrates how to suspend calculation
temporarily.

  JavaScript


  await Excel.run(async (context) => {
      let app = context.workbook.application;
      let sheet = context.workbook.worksheets.getItem("sheet1");
        let rangeToSet: Excel.Range;
       let rangeToGet: Excel.Range;
       app.load("calculationMode");
       await context.sync();
       // Calculation mode should be "Automatic" by default
       console.log(app.calculationMode);

       rangeToSet = sheet.getRange("A1:C1");
       rangeToSet.values = [[1, 2, "=SUM(A1:B1)"]];
       rangeToGet = sheet.getRange("A1:C1");
       rangeToGet.load("values");
       await context.sync();
       // Range value should be [1, 2, 3] now
       console.log(rangeToGet.values);

      // Suspending recalculation
      app.suspendApiCalculationUntilNextSync();
      rangeToSet = sheet.getRange("A1:B1");
      rangeToSet.values = [[10, 20]];
      rangeToGet = sheet.getRange("A1:C1");
      rangeToGet.load("values");
      app.load("calculationMode");
      await context.sync();
      // Range value should be [10, 20, 3] when we load the property, because
  calculation is suspended at that point
      console.log(rangeToGet.values);
      // Calculation mode should still be "Automatic" even with suspend
  recalculation
      console.log(app.calculationMode);

      rangeToGet.load("values");
      await context.sync();
      // Range value should be [10, 20, 30] when we load the property, because
  calculation is resumed after last sync
      console.log(rangeToGet.values);
  });



Please note that only formula calculations are suspended. Any altered references are still
rebuilt. For example, renaming a worksheet still updates any references in formulas to
that worksheet.


Suspend screen updating
Excel displays changes your add-in makes approximately as they happen in the code.
For large, iterative data sets, you may not need to see this progress on the screen in
real-time. Application.suspendScreenUpdatingUntilNextSync() pauses visual updates to
Excel until the add-in calls context.sync() , or until Excel.run ends (implicitly calling
context.sync ). Be aware, Excel will not show any signs of activity until the next sync.
 Your add-in should either give users guidance to prepare them for this delay or provide
a status bar to demonstrate activity.


  ï¼— Note

  Don't call suspendScreenUpdatingUntilNextSync repeatedly (such as in a loop).
  Repeated calls will cause the Excel window to flicker.



Enable and disable events
Performance of an add-in may be improved by disabling events. A code sample showing
how to enable and disable events is in the Work with Events article.



Importing data into tables
When trying to import a huge amount of data directly into a Table object directly (for
example, by using TableRowCollection.add() ), you might experience slow performance.
If you are trying to add a new table, you should fill in the data first by setting
range.values , and then call worksheet.tables.add() to create a table over the range. If

you are trying to write data into an existing table, write the data into a range object via
table.getDataBodyRange() , and the table will expand automatically.


Here is an example of this approach:

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sheet1");
      // Write the data into the range first.
      let range = sheet.getRange("A1:B3");
      range.values = [["Key", "Value"], ["A", 1], ["B", 2]];

        // Create the table over the range
        let table = sheet.tables.add('A1:B3', true);
        table.name = "Example";
        await context.sync();



        // Insert a new row to the table
        table.getDataBodyRange().getRowsBelow(1).values = [["C", 3]];
        // Change a existing row value
        table.getDataBodyRange().getRow(1).values = [["D", 4]];
        await context.sync();
  });
   ï¼— Note

  You can conveniently convert a Table object to a Range object by using the
  Table.convertToRange() method.




Payload size limit best practices
The Excel JavaScript API has size limitations for API calls. Excel on the web has a payload
size limit for requests and responses of 5MB, and an API returns a RichAPI.Error error if
this limit is exceeded. On all platforms, a range is limited to five million cells for get
operations. Large ranges typically exceed both of these limitations.

The payload size of a request is a combination of the following three components.

     The number of API calls
     The number of objects, such as Range objects
     The length of the value to set or get

If an API returns the RequestPayloadSizeLimitExceeded error, use the best practice
strategies documented in this article to optimize your script and avoid the error.


Strategy 1: Move unchanged values out of loops
Limit the number of processes that occur within loops to improve performance. In the
following code sample, context.workbook.worksheets.getActiveWorksheet() can be
moved out of the for loop, because it doesn't change within that loop.

  JavaScript


  // DO NOT USE THIS CODE SAMPLE. This sample shows a poor performance
  strategy.
  async function run() {
    await Excel.run(async (context) => {
      let ranges = [];

      // This sample retrieves the worksheet every time the loop runs, which
  is bad for performance.
      for (let i = 0; i < 7500; i++) {
        let rangeByIndex =
  context.workbook.worksheets.getActiveWorksheet().getRangeByIndexes(i, 1, 1,
  1);
      }
      await context.sync();
       });
  }



The following code sample shows logic similar to the preceding code sample, but with
an improved performance strategy. The value
context.workbook.worksheets.getActiveWorksheet() is retrieved before the for loop,

because this value doesn't need to be retrieved each time the for loop runs. Only
values that change within the context of a loop should be retrieved within that loop.

  JavaScript


  // This code sample shows a good performance strategy.
  async function run() {
    await Excel.run(async (context) => {
      let ranges = [];
      // Retrieve the worksheet outside the loop.
      let worksheet = context.workbook.worksheets.getActiveWorksheet();

        // Only process the necessary values inside the loop.
        for (let i = 0; i < 7500; i++) {
          let rangeByIndex = worksheet.getRangeByIndexes(i, 1, 1, 1);
        }
        await context.sync();
      });
  }




Strategy 2: Create fewer range objects
Create fewer range objects to improve performance and minimize payload size. Two
approaches for creating fewer range objects are described in the following article
sections and code samples.


Split each range array into multiple arrays

One way to create fewer range objects is to split each range array into multiple arrays,
and then process each new array with a loop and a new context.sync() call.


  ï¼‰ Important

  Only use this strategy if you've first determined that you're exceeding the payload
  request size limit. Using multiple loops can reduce the size of each payload request
  to avoid exceeding the 5MB limit, but using multiple loops and multiple
  context.sync() calls also negatively impacts performance.
 The following code sample attempts to process a large array of ranges in a single loop
and then a single context.sync() call. Processing too many range values in one
context.sync() call causes the payload request size to exceed the 5MB limit.


  JavaScript


  // This code sample does not show a recommended strategy.
  // Calling 10,000 rows would likely exceed the 5MB payload size limit in a
  real-world situation.
  async function run() {
    await Excel.run(async (context) => {
      let worksheet = context.workbook.worksheets.getActiveWorksheet();

        // This sample attempts to process too many ranges at once.
        for (let row = 1; row < 10000; row++) {
          let range = sheet.getRangeByIndexes(row, 1, 1, 1);
          range.values = [["1"]];
        }
        await context.sync();
      });
  }



The following code sample shows logic similar to the preceding code sample, but with a
strategy that avoids exceeding the 5MB payload request size limit. In the following code
sample, the ranges are processed in two separate loops, and each loop is followed by a
context.sync() call.


  JavaScript


  // This code sample shows a strategy for reducing payload request size.
  // However, using multiple loops and `context.sync()` calls negatively
  impacts performance.
  // Only use this strategy if you've determined that you're exceeding the
  payload request limit.
  async function run() {
    await Excel.run(async (context) => {
      let worksheet = context.workbook.worksheets.getActiveWorksheet();

       // Split the ranges into two loops, rows 1-5000 and then 5001-10000.
       for (let row = 1; row < 5000; row++) {
         let range = worksheet.getRangeByIndexes(row, 1, 1, 1);
         range.values = [["1"]];
       }
       // Sync after each loop.
       await context.sync();

       for (let row = 5001; row < 10000; row++) {
         let range = worksheet.getRangeByIndexes(row, 1, 1, 1);
         range.values = [["1"]];
       }
         await context.sync();
      });
  }




Set range values in an array
Another way to create fewer range objects is to create an array, use a loop to set all the
data in that array, and then pass the array values to a range. This benefits both
performance and payload size. Instead of calling range.values for each range in a loop,
range.values is a called once outside the loop.


The following code sample shows how to create an array, set the values of that array in a
for loop, and then pass the array values to a range outside the loop.


  JavaScript


  // This code sample shows a good performance strategy.
  async function run() {
    await Excel.run(async (context) => {
      const worksheet = context.workbook.worksheets.getActiveWorksheet();
      // Create an array.
      const array = new Array(10000);

       // Set the values of the array inside the loop.
       for (let i = 0; i < 10000; i++) {
         array[i] = [1];
       }

        // Pass the array values to a range outside the loop.
        let range = worksheet.getRange("A1:A10000");
        range.values = array;
        await context.sync();
      });
  }

PivotTables streamline larger data sets. They allow the quick manipulation of grouped
data. The Excel JavaScript API lets your add-in create PivotTables and interact with their
components. This article describes how PivotTables are represented by the Office
JavaScript API and provides code samples for key scenarios.

If you are unfamiliar with the functionality of PivotTables, consider exploring them as an
end user. See Create a PivotTable to analyze worksheet data     for a good primer on
these tools.


  ï¼‰ Important

  PivotTables created with OLAP are not currently supported. There is also no support
  for Power Pivot.




Object model
 The PivotTable is the central object for PivotTables in the Office JavaScript API.

     Workbook.pivotTables and Worksheet.pivotTables are PivotTableCollections that

     contain the PivotTables in the workbook and worksheet, respectively.
     A PivotTable contains a PivotHierarchyCollection that has multiple PivotHierarchies.
     These PivotHierarchies can be added to specific hierarchy collections to define how
     the PivotTable pivots data (as explained in the following section).
     A PivotHierarchy contains a PivotFieldCollection that has exactly one PivotField. If
     the design expands to include OLAP PivotTables, this may change.
     A PivotField can have one or more PivotFilters applied, as long as the field's
     PivotHierarchy is assigned to a hierarchy category.
           A PivotField contains a PivotItemCollection that has multiple PivotItems.
          A PivotTable contains a PivotLayout that defines where the PivotFields and
          PivotItems are displayed in the worksheet. The layout also controls some display
          settings for the PivotTable.

Let's look at how these relationships apply to some example data. The following data
describes fruit sales from various farms. It will be the example throughout this article.




This fruit farm sales data will be used to make a PivotTable. Each column, such as Types,
is a PivotHierarchy . The Types hierarchy contains the Types field. The Types field
contains the items Apple, Kiwi, Lemon, Lime, and Orange.


Hierarchies
PivotTables are organized based on four hierarchy categories: row, column, data, and
filter.

The farm data shown earlier has five hierarchies: Farms, Type, Classification, Crates Sold
at Farm, and Crates Sold Wholesale. Each hierarchy can only exist in one of the four
categories. If Type is added to column hierarchies, it cannot also be in the row, data, or
filter hierarchies. If Type is subsequently added to row hierarchies, it is removed from
the column hierarchies. This behavior is the same whether hierarchy assignment is done
through the Excel UI or the Excel JavaScript APIs.
 Row and column hierarchies define how data will be grouped. For example, a row
hierarchy of Farms will group together all the data sets from the same farm. The choice
between row and column hierarchy defines the orientation of the PivotTable.

Data hierarchies are the values to be aggregated based on the row and column
hierarchies. A PivotTable with a row hierarchy of Farms and a data hierarchy of Crates
Sold Wholesale shows the sum total (by default) of all the different fruits for each farm.

Filter hierarchies include or exclude data from the pivot based on values within that
filtered type. A filter hierarchy of Classification with the type Organic selected only
shows data for organic fruit.

Here is the farm data again, alongside a PivotTable. The PivotTable is using Farm and
Type as the row hierarchies, Crates Sold at Farm and Crates Sold Wholesale as the data
hierarchies (with the default aggregation function of sum), and Classification as a filter
hierarchy (with Organic selected).




This PivotTable could be generated through the JavaScript API or through the Excel UI.
Both options allow for further manipulation through add-ins.



Create a PivotTable
 PivotTables need a name, source, and destination. The source can be a range address or
table name (passed as a Range , string , or Table type). The destination is a range
address (given as either a Range or string ). The following samples show various
PivotTable creation techniques.


Create a PivotTable with range addresses
  JavaScript


  await Excel.run(async (context) => {
      // Create a PivotTable named "Farm Sales" on the current worksheet at
  cell
      // A22 with data from the range A1:E21.
       context.workbook.worksheets.getActiveWorksheet().pivotTables.add(
         "Farm Sales", "A1:E21", "A22");

        await context.sync();
  });




Create a PivotTable with Range objects
  JavaScript


  await Excel.run(async (context) => {
      // Create a PivotTable named "Farm Sales" on a worksheet called
  "PivotWorksheet" at cell A2
      // the data comes from the worksheet "DataWorksheet" across the range
  A1:E21.
      let rangeToAnalyze =
  context.workbook.worksheets.getItem("DataWorksheet").getRange("A1:E21");
      let rangeToPlacePivot =
  context.workbook.worksheets.getItem("PivotWorksheet").getRange("A2");
      context.workbook.worksheets.getItem("PivotWorksheet").pivotTables.add(
        "Farm Sales", rangeToAnalyze, rangeToPlacePivot);

        await context.sync();
  });




Create a PivotTable at the workbook level
  JavaScript


  await Excel.run(async (context) => {
      // Create a PivotTable named "Farm Sales" on a worksheet called
  "PivotWorksheet" at cell A2
      // the data is from the worksheet "DataWorksheet" across the range
   A1:E21.
      context.workbook.pivotTables.add(
          "Farm Sales", "DataWorksheet!A1:E21", "PivotWorksheet!A2");

        await context.sync();
  });




Use an existing PivotTable
Manually created PivotTables are also accessible through the PivotTable collection of the
workbook or of individual worksheets. The following code gets a PivotTable named My
Pivot from the workbook.

  JavaScript


  await Excel.run(async (context) => {
      let pivotTable = context.workbook.pivotTables.getItem("My Pivot");
      await context.sync();
  });




Add rows and columns to a PivotTable
Rows and columns pivot the data around those fields' values.

Adding the Farm column pivots all the sales around each farm. Adding the Type and
Classification rows further breaks down the data based on what fruit was sold and
whether it was organic or not.
   JavaScript


  await Excel.run(async (context) => {
      let pivotTable =
  context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm
  Sales");

        pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem("Type"));

  pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem("Classification
  "));



  pivotTable.columnHierarchies.add(pivotTable.hierarchies.getItem("Farm"));

        await context.sync();
  });



You can also have a PivotTable with only rows or columns.

  JavaScript


  await Excel.run(async (context) => {
      let pivotTable =
  context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm
  Sales");
      pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem("Farm"));
      pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem("Type"));

  pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem("Classification
   "));

         await context.sync();
  });




Add data hierarchies to the PivotTable
Data hierarchies fill the PivotTable with information to combine based on the rows and
columns. Adding the data hierarchies of Crates Sold at Farm and Crates Sold Wholesale
gives sums of those figures for each row and column.

In the example, both Farm and Type are rows, with the crate sales as the data.




  JavaScript


  await Excel.run(async (context) => {
      let pivotTable =
  context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm
  Sales");

      // "Farm" and "Type" are the hierarchies on which the aggregation is
  based.
         pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem("Farm"));
        pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem("Type"));

      // "Crates Sold at Farm" and "Crates Sold Wholesale" are the hierarchies
      // that will have their data aggregated (summed in this case).
      pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem("Crates
  Sold at Farm"));
      pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem("Crates
  Sold Wholesale"));

        await context.sync();
  });




PivotTable layouts and getting pivoted data
A PivotLayout defines the placement of hierarchies and their data. You access the layout
to determine the ranges where data is stored.

The following diagram shows which layout function calls correspond to which ranges of
the PivotTable.




Get data from the PivotTable
The layout defines how the PivotTable is displayed in the worksheet. This means the
PivotLayout object controls the ranges used for PivotTable elements. Use the ranges

provided by the layout to get data collected and aggregated by the PivotTable. In
 particular, use PivotLayout.getDataBodyRange to access the data produced by the
PivotTable.

The following code demonstrates how to get the last row of the PivotTable data by
going through the layout (the Grand Total of both the Sum of Crates Sold at Farm and
Sum of Crates Sold Wholesale columns in the earlier example). Those values are then
summed together for a final total, which is displayed in cell E30 (outside of the
PivotTable).

  JavaScript


  await Excel.run(async (context) => {
      let pivotTable =
  context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm
  Sales");

       // Get the totals for each data hierarchy from the layout.
       let range = pivotTable.layout.getDataBodyRange();
       let grandTotalRange = range.getLastRow();
       grandTotalRange.load("address");
       await context.sync();

      // Sum the totals from the PivotTable data hierarchies and place them in
  a new range, outside of the PivotTable.
      let masterTotalRange =
  context.workbook.worksheets.getActiveWorksheet().getRange("E30");
      masterTotalRange.formulas = [["=SUM(" + grandTotalRange.address + ")"]];
      await context.sync();
  });




Layout types
PivotTables have three layout styles: Compact, Outline, and Tabular. We've seen the
compact style in the previous examples.

The following examples use the outline and tabular styles, respectively. The code sample
shows how to cycle between the different layouts.


Outline layout
 Tabular layout
 PivotLayout type switch code sample

 JavaScript


 await Excel.run(async (context) => {
     // Change the PivotLayout.type to a new type.
     let pivotTable =
 context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm
 Sales");
     pivotTable.layout.load("layoutType");
     await context.sync();

       // Cycle between the three layout types.
       if (pivotTable.layout.layoutType === "Compact") {
           pivotTable.layout.layoutType = "Outline";
       } else if (pivotTable.layout.layoutType === "Outline") {
           pivotTable.layout.layoutType = "Tabular";
       } else {
           pivotTable.layout.layoutType = "Compact";
       }

       await context.sync();
 });
 Other PivotLayout functions
By default, PivotTables adjust row and column sizes as needed. This is done when the
PivotTable is refreshed. PivotLayout.autoFormat specifies that behavior. Any row or
column size changes made by your add-in persist when autoFormat is false .
Additionally, the default settings of a PivotTable keep any custom formatting in the
PivotTable (such as fills and font changes). Set PivotLayout.preserveFormatting to false
to apply the default format when refreshed.

A PivotLayout also controls header and total row settings, how empty data cells are
displayed, and alt text   options. The PivotLayout reference provides a complete list of
these features.

The following code sample makes empty data cells display the string "--" , formats the
body range to a consistent horizontal alignment, and ensures that the formatting
changes remain even after the PivotTable is refreshed.

  JavaScript


  await Excel.run(async (context) => {
      let pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
      let pivotLayout = pivotTable.layout;

      // Set a default value for an empty cell in the PivotTable. This doesn't
  include cells left blank by the layout.
      pivotLayout.emptyCellText = "--";

      // Set the text alignment to match the rest of the PivotTable.
      pivotLayout.getDataBodyRange().format.horizontalAlignment =
  Excel.HorizontalAlignment.right;

       // Ensure empty cells are filled with a default value.
       pivotLayout.fillEmptyCells = true;

      // Ensure that the format settings persist, even after the PivotTable is
  refreshed and recalculated.
      pivotLayout.preserveFormatting = true;
      await context.sync();
  });




Delete a PivotTable
PivotTables are deleted by using their name.

  JavaScript
   await Excel.run(async (context) => {
      context.workbook.worksheets.getItem("Pivot").pivotTables.getItem("Farm
  Sales").delete();
      await context.sync();
  });




Filter a PivotTable
The primary method for filtering PivotTable data is with PivotFilters. Slicers offer an
alternate, less flexible filtering method.

PivotFilters filter data based on a PivotTable's four hierarchy categories (filters, columns,
rows, and values). There are four types of PivotFilters, allowing calendar date-based
filtering, string parsing, number comparison, and filtering based on a custom input.

Slicers can be applied to both PivotTables and regular Excel tables. When applied to a
PivotTable, slicers function like a PivotManualFilter and allow filtering based on a custom
input. Unlike PivotFilters, slicers have an Excel UI component . With the Slicer class,
you create this UI component, manage filtering, and control its visual appearance.


Filter with PivotFilters
PivotFilters allow you to filter PivotTable data based on the four hierarchy categories
(filters, columns, rows, and values). In the PivotTable object model, PivotFilters are
applied to a PivotField, and each PivotField can have one or more assigned
PivotFilters . To apply PivotFilters to a PivotField, the field's corresponding

PivotHierarchy must be assigned to a hierarchy category.


Types of PivotFilters

 Filter type      Filter purpose                       Excel JavaScript API reference

 DateFilter       Calendar date-based filtering.       PivotDateFilter

 LabelFilter      Text comparison filtering.           PivotLabelFilter

 ManualFilter     Custom input filtering.              PivotManualFilter

 ValueFilter      Number comparison filtering.         PivotValueFilter




Create a PivotFilter
 To filter PivotTable data with a Pivot*Filter (such as a PivotDateFilter ), apply the filter
to a PivotField. The following four code samples show how to use each of the four types
of PivotFilters.


PivotDateFilter

The first code sample applies a PivotDateFilter to the Date Updated PivotField, hiding
any data prior to 2020-08-01.


  ï¼‰ Important

  A Pivot*Filter can't be applied to a PivotField unless that field's PivotHierarchy is
  assigned to a hierarchy category. In the following code sample, the dateHierarchy
  must be added to the PivotTable's rowHierarchies category before it can be used
  for filtering.


  JavaScript


  await Excel.run(async (context) => {
      // Get the PivotTable and the date hierarchy.
      let pivotTable =
  context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm
  Sales");
      let dateHierarchy = pivotTable.rowHierarchies.getItemOrNullObject("Date
  Updated");
      await context.sync();

      // PivotFilters can only be applied to PivotHierarchies that are being
  used for pivoting.
      // If it's not already there, add "Date Updated" to the hierarchies.
      if (dateHierarchy.isNullObject) {
          dateHierarchy =
  pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem("Date
  Updated"));
      }

       // Apply a date filter to filter out anything logged before August.
       let filterField = dateHierarchy.fields.getItem("Date Updated");
       let dateFilter = {
           condition: Excel.DateFilterCondition.afterOrEqualTo,
           comparator: {
           date: "2020-08-01",
           specificity: Excel.FilterDatetimeSpecificity.month
           }
       };
       filterField.applyFilter({ dateFilter: dateFilter });
         await context.sync();
  });




  ï¼— Note

  The following three code snippets only display filter-specific excerpts, instead of full
   Excel.run calls.




PivotLabelFilter

The second code snippet demonstrates how to apply a PivotLabelFilter to the Type
PivotField, using the LabelFilterCondition.beginsWith property to exclude labels that
start with the letter L.

  JavaScript


      // Get the "Type" field.
      let filterField =
  pivotTable.hierarchies.getItem("Type").fields.getItem("Type");

      // Filter out any types that start with "L" ("Lemons" and "Limes" in
  this case).
      let filter: Excel.PivotLabelFilter = {
        condition: Excel.LabelFilterCondition.beginsWith,
        substring: "L",
        exclusive: true
      };

        // Apply the label filter to the field.
        filterField.applyFilter({ labelFilter: filter });




PivotManualFilter

The third code snippet applies a manual filter with PivotManualFilter to the the
Classification field, filtering out data that doesn't include the classification Organic.

  JavaScript


      // Apply a manual filter to include only a specific PivotItem (the
  string "Organic").
      let filterField = classHierarchy.fields.getItem("Classification");
      let manualFilter = { selectedItems: ["Organic"] };
      filterField.applyFilter({ manualFilter: manualFilter });
 PivotValueFilter

To compare numbers, use a value filter with PivotValueFilter, as shown in the final code
snippet. The PivotValueFilter compares the data in the Farm PivotField to the data in
the Crates Sold Wholesale PivotField, including only farms whose sum of crates sold
exceeds the value 500.

  JavaScript


      // Get the "Farm" field.
      let filterField =
  pivotTable.hierarchies.getItem("Farm").fields.getItem("Farm");

        // Filter to only include rows with more than 500 wholesale crates sold.
        let filter: Excel.PivotValueFilter = {
          condition: Excel.ValueFilterCondition.greaterThan,
          comparator: 500,
          value: "Sum of Crates Sold Wholesale"
        };

        // Apply the value filter to the field.
        filterField.applyFilter({ valueFilter: filter });




Remove PivotFilters

To remove all PivotFilters, apply the clearAllFilters method to each PivotField, as
shown in the following code sample.

  JavaScript


  await Excel.run(async (context) => {
      // Get the PivotTable.
      let pivotTable =
  context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm
  Sales");
      pivotTable.hierarchies.load("name");
      await context.sync();

        // Clear the filters on each PivotField.
        pivotTable.hierarchies.items.forEach(function (hierarchy) {
            hierarchy.fields.getItem(hierarchy.name).clearAllFilters();
        });
        await context.sync();
  });




Filter with slicers
 Slicers allow data to be filtered from an Excel PivotTable or table. A slicer uses values
from a specified column or PivotField to filter corresponding rows. These values are
stored as SlicerItem objects in the Slicer . Your add-in can adjust these filters, as can
users (through the Excel UI ). The slicer sits on top of the worksheet in the drawing
layer, as shown in the following screenshot.




  ï¼— Note

  The techniques described in this section focus on how to use slicers connected to
  PivotTables. The same techniques also apply to using slicers connected to tables.




Create a slicer
You can create a slicer in a workbook or worksheet by using the Workbook.slicers.add
method or Worksheet.slicers.add method. Doing so adds a slicer to the SlicerCollection
of the specified Workbook or Worksheet object. The SlicerCollection.add method has
three parameters:

      slicerSource : The data source on which the new slicer is based. It can be a

      PivotTable , Table , or string representing the name or ID of a PivotTable or

      Table .
      sourceField : The field in the data source by which to filter. It can be a PivotField ,

      TableColumn , or string representing the name or ID of a PivotField or
      TableColumn .

      slicerDestination : The worksheet where the new slicer will be created. It can be a

      Worksheet object or the name or ID of a Worksheet . This parameter is unnecessary
     when the SlicerCollection is accessed through Worksheet.slicers . In this case,
     the collection's worksheet is used as the destination.

The following code sample adds a new slicer to the Pivot worksheet. The slicer's source
is the Farm Sales PivotTable and filters using the Type data. The slicer is also named
 Fruit Slicer for future reference.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Pivot");
      let slicer = sheet.slicers.add(
          "Farm Sales" /* The slicer data source. For PivotTables, this can be
  the PivotTable object reference or name. */,
          "Type" /* The field in the data to filter by. For PivotTables, this
  can be a PivotField object reference or ID. */
      );
      slicer.name = "Fruit Slicer";
      await context.sync();
  });




Filter items with a slicer

The slicer filters the PivotTable with items from the sourceField . The
Slicer.selectItems method sets the items that remain in the slicer. These items are

passed to the method as a string[] , representing the keys of the items. Any rows
containing those items remain in the PivotTable's aggregation. Subsequent calls to
selectItems set the list to the keys specified in those calls.



  ï¼— Note

  If Slicer.selectItems is passed an item that's not in the data source, an
  InvalidArgument error is thrown. The contents can be verified through the

  Slicer.slicerItems property, which is a SlicerItemCollection.



The following code sample shows three items being selected for the slicer: Lemon, Lime,
and Orange.

  JavaScript


  await Excel.run(async (context) => {
      let slicer = context.workbook.slicers.getItem("Fruit Slicer");
      // Anything other than the following three values will be filtered out
  of the PivotTable for display and aggregation.
      slicer.selectItems(["Lemon", "Lime", "Orange"]);
      await context.sync();
  });
 To remove all filters from the slicer, use the Slicer.clearFilters method, as shown in
the following sample.

  JavaScript


  await Excel.run(async (context) => {
      let slicer = context.workbook.slicers.getItem("Fruit Slicer");
      slicer.clearFilters();
      await context.sync();
  });




Style and format a slicer

You add-in can adjust a slicer's display settings through Slicer properties. The
following code sample sets the style to SlicerStyleLight6, sets the text at the top of the
slicer to Fruit Types, places the slicer at the position (395, 15) on the drawing layer, and
sets the slicer's size to 135x150 pixels.

  JavaScript


  await Excel.run(async (context) => {
      let slicer = context.workbook.slicers.getItem("Fruit Slicer");
      slicer.caption = "Fruit Types";
      slicer.left = 395;
      slicer.top = 15;
      slicer.height = 135;
      slicer.width = 150;
      slicer.style = "SlicerStyleLight6";
      await context.sync();
  });




Delete a slicer
To delete a slicer, call the Slicer.delete method. The following code sample deletes the
first slicer from the current worksheet.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getActiveWorksheet();
      sheet.slicers.getItemAt(0).delete();
      await context.sync();
  });
 Change aggregation function
Data hierarchies have their values aggregated. For datasets of numbers, this is a sum by
default. The summarizeBy property defines this behavior based on an
AggregationFunction type.

The currently supported aggregation function types are Sum , Count , Average , Max , Min ,
Product , CountNumbers , StandardDeviation , StandardDeviationP , Variance , VarianceP ,
and Automatic (the default).

The following code samples changes the aggregation to be averages of the data.

  JavaScript


  await Excel.run(async (context) => {
      let pivotTable =
  context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm
  Sales");
      pivotTable.dataHierarchies.load("no-properties-needed");
      await context.sync();

      // Change the aggregation from the default sum to an average of all the
  values in the hierarchy.
      pivotTable.dataHierarchies.items[0].summarizeBy =
  Excel.AggregationFunction.average;
      pivotTable.dataHierarchies.items[1].summarizeBy =
  Excel.AggregationFunction.average;
      await context.sync();
  });




Change calculations with a ShowAsRule
PivotTables, by default, aggregate the data of their row and column hierarchies
independently. A ShowAsRule changes the data hierarchy to output values based on
other items in the PivotTable.

The ShowAsRule object has three properties:

      calculation : The type of relative calculation to apply to the data hierarchy (the

     default is none ).
      baseField : The PivotField in the hierarchy containing the base data before the

     calculation is applied. Since Excel PivotTables have a one-to-one mapping of
     hierarchy to field, you'll use the same name to access both the hierarchy and the
     field.
       baseItem : The individual PivotItem compared against the values of the base fields

     based on the calculation type. Not all calculations require this field.

The following example sets the calculation on the Sum of Crates Sold at Farm data
hierarchy to be a percentage of the column total. We still want the granularity to extend
to the fruit type level, so we'll use the Type row hierarchy and its underlying field. The
example also has Farm as the first row hierarchy, so the farm total entries display the
percentage each farm is responsible for producing as well.




  JavaScript


  await Excel.run(async (context) => {
      let pivotTable =
  context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm
  Sales");
      let farmDataHierarchy = pivotTable.dataHierarchies.getItem("Sum of
  Crates Sold at Farm");

       farmDataHierarchy.load("showAs");
       await context.sync();

      // Show the crates of each fruit type sold at the farm as a percentage
  of the column's total.
       let farmShowAs = farmDataHierarchy.showAs;
      farmShowAs.calculation = Excel.ShowAsCalculation.percentOfColumnTotal;
      farmShowAs.baseField =
  pivotTable.rowHierarchies.getItem("Type").fields.getItem("Type");
      farmDataHierarchy.showAs = farmShowAs;
      farmDataHierarchy.name = "Percentage of Total Farm Sales";
  });



The previous example set the calculation to the column, relative to the field of an
individual row hierarchy. When the calculation relates to an individual item, use the
baseItem property.


The following example shows the differenceFrom calculation. It displays the difference
of the farm crate sales data hierarchy entries relative to those of A Farms. The baseField
is Farm, so we see the differences between the other farms, as well as breakdowns for
each type of like fruit (Type is also a row hierarchy in this example).




  JavaScript


  await Excel.run(async (context) => {
      let pivotTable =
  context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm
   Sales");
      let farmDataHierarchy = pivotTable.dataHierarchies.getItem("Sum of
  Crates Sold at Farm");

        farmDataHierarchy.load("showAs");
        await context.sync();

      // Show the difference between crate sales of the "A Farms" and the
  other farms.
      // This difference is both aggregated and shown for individual fruit
  types (where applicable).
      let farmShowAs = farmDataHierarchy.showAs;
      farmShowAs.calculation = Excel.ShowAsCalculation.differenceFrom;
      farmShowAs.baseField =
  pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm");
      farmShowAs.baseItem =
  pivotTable.rowHierarchies.getItem("Farm").fields.getItem("Farm").items.getIt
  em("A Farms");
      farmDataHierarchy.showAs = farmShowAs;
      farmDataHierarchy.name = "Difference from A Farms";
  });




Change hierarchy names
Hierarchy fields are editable. The following code demonstrates how to change the
displayed names of two data hierarchies.

  JavaScript


  await Excel.run(async (context) => {
      let dataHierarchies = context.workbook.worksheets.getActiveWorksheet()
          .pivotTables.getItem("Farm Sales").dataHierarchies;
      dataHierarchies.load("no-properties-needed");
      await context.sync();

        // Changing the displayed names of these entries.
        dataHierarchies.items[0].name = "Farm Sales";
        dataHierarchies.items[1].name = "Wholesale";
  });


This article provides examples that show different ways to get a range within a
worksheet using the Excel JavaScript API. For the complete list of properties and
methods that the Range object supports, see Excel.Range class.


  ï¼— Note

  The Excel JavaScript API doesn't have a "Cell" object or class. Instead, the Excel
  JavaScript API defines all Excel cells as Range objects. An individual cell in the Excel
  UI translates to a Range object with one cell in the Excel JavaScript API. A single
   Range object can also contain multiple contiguous cells. See Work with cells using

  the Excel JavaScript API to learn more.




Get range by address
The following code sample gets the range with address B2:C5 from the worksheet
named Sample, loads its address property, and writes a message to the console.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");

        let range = sheet.getRange("B2:C5");
        range.load("address");
        await context.sync();

        console.log(`The address of the range B2:C5 is "${range.address}"`);
  });




Get range by name
The following code sample gets the range named MyRange from the worksheet named
Sample, loads its address property, and writes a message to the console.

  JavaScript
   await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");

        let range = sheet.getRange("MyRange");
        range.load("address");
        await context.sync();

        console.log(`The address of the range "MyRange" is "${range.address}"`);
  });




Get used range
The following code sample gets the used range from the worksheet named Sample,
loads its address property, and writes a message to the console. The used range is the
smallest range that encompasses any cells in the worksheet that have a value or
formatting assigned to them. If the entire worksheet is blank, the getUsedRange()
method returns a range that consists of only the top-left cell.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");

        let range = sheet.getUsedRange();
        range.load("address");
        await context.sync();

      console.log(`The address of the used range in the worksheet is
  "${range.address}"`);
  });




Get entire range
The following code sample gets the entire worksheet range from the worksheet named
Sample, loads its address property, and writes a message to the console.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");

        let range = sheet.getRange();
        range.load("address");
        await context.sync();
      console.log(`The address of the entire worksheet range is
 "${range.address}"`);
 });

This article provides a code sample that inserts a range of cells with the Excel JavaScript
API. For the complete list of properties and methods that the Range object supports, see
the Excel.Range class.


  ï¼— Note

  The Excel JavaScript API doesn't have a "Cell" object or class. Instead, the Excel
  JavaScript API defines all Excel cells as Range objects. An individual cell in the Excel
  UI translates to a Range object with one cell in the Excel JavaScript API. A single
   Range object can also contain multiple contiguous cells. See Work with cells using

  the Excel JavaScript API to learn more.




Insert a range of cells
The following code sample inserts a range of cells in location B4:E4 and shifts other cells
down to provide space for the new cells.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      let range = sheet.getRange("B4:E4");

        range.insert(Excel.InsertShiftDirection.down);

        await context.sync();
  });




Data before range is inserted
 Data after range is inserted

This article provides code samples that clear and delete ranges with the Excel JavaScript
API. For the complete list of properties and methods supported by the Range object, see
Excel.Range class.


  ï¼— Note

  The Excel JavaScript API doesn't have a "Cell" object or class. Instead, the Excel
  JavaScript API defines all Excel cells as Range objects. An individual cell in the Excel
  UI translates to a Range object with one cell in the Excel JavaScript API. A single
   Range object can also contain multiple contiguous cells. See Work with cells using

  the Excel JavaScript API to learn more.




Clear a range of cells
The following code sample clears all contents and formatting of cells in the range E2:E5.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      let range = sheet.getRange("E2:E5");

        range.clear();

        await context.sync();
  });




Data before range is cleared
 Data after range is cleared




Delete a range of cells
The following code sample deletes the cells in the range B4:E4 and shifts other cells up
to fill the space that was vacated by the deleted cells.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      let range = sheet.getRange("B4:E4");

        range.delete(Excel.DeleteShiftDirection.up);

        await context.sync();
  });




Data before range is deleted

This article provides code samples that set and get the selected range with the Excel
JavaScript API. For the complete list of properties and methods that the Range object
supports, see Excel.Range class.


  ï¼— Note

  The Excel JavaScript API doesn't have a "Cell" object or class. Instead, the Excel
  JavaScript API defines all Excel cells as Range objects. An individual cell in the Excel
  UI translates to a Range object with one cell in the Excel JavaScript API. A single
   Range object can also contain multiple contiguous cells. See Work with cells using

  the Excel JavaScript API to learn more.




Set the selected range
The following code sample selects the range B2:E6 in the active worksheet.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getActiveWorksheet();
      let range = sheet.getRange("B2:E6");

        range.select();

        await context.sync();
  });




Selected range B2:E6
 Get the selected range
The following code sample gets the selected range, loads its address property, and
writes a message to the console.

  JavaScript


  await Excel.run(async (context) => {
      let range = context.workbook.getSelectedRange();
      range.load("address");

        await context.sync();

        console.log(`The address of the selected range is "${range.address}"`);
  });




Select the edge of a used range
The Range.getRangeEdge and Range.getExtendedRange methods let your add-in
replicate the behavior of the keyboard selection shortcuts, selecting the edge of the
used range based on the currently selected range. To learn more about used ranges, see
Get used range.

In the following screenshot, the used range is the table with values in each cell, C5:F12.
The empty cells outside this table are outside the used range.
 Select the cell at the edge of the current used range
The following code sample shows how use the Range.getRangeEdge method to select the
cell at the furthest edge of the current used range, in the direction up. This action
matches the result of using the Ctrl+Up arrow key keyboard shortcut while a range is
selected.

  JavaScript


  await Excel.run(async (context) => {
      // Get the selected range.
      let range = context.workbook.getSelectedRange();

        // Specify the direction with the `KeyboardDirection` enum.
        let direction = Excel.KeyboardDirection.up;

        // Get the active cell in the workbook.
        let activeCell = context.workbook.getActiveCell();

      // Get the top-most cell of the current used range.
      // This method acts like the Ctrl+Up arrow key keyboard shortcut while a
  range is selected.
      let rangeEdge = range.getRangeEdge(
         direction,
         activeCell
      );
      rangeEdge.select();

        await context.sync();
  });




Before selecting the cell at the edge of the used range
 The following screenshot shows a used range and a selected range within the used
range. The used range is a table with data at C5:F12. Inside this table, the range D8:E9 is
selected. This selection is the before state, prior to running the Range.getRangeEdge
method.




After selecting the cell at the edge of the used range

The following screenshot shows the same table as the preceding screenshot, with data
in the range C5:F12. Inside this table, the range D5 is selected. This selection is after
state, after running the Range.getRangeEdge method to select the cell at the edge of the
used range in the up direction.




Select all cells from current range to furthest edge of
used range
The following code sample shows how use the Range.getExtendedRange method to to
select all the cells from the currently selected range to the furthest edge of the used
 range, in the direction down. This action matches the result of using the
Ctrl+Shift+Down arrow key keyboard shortcut while a range is selected.

  JavaScript


  await Excel.run(async (context) => {
      // Get the selected range.
      let range = context.workbook.getSelectedRange();

        // Specify the direction with the `KeyboardDirection` enum.
        let direction = Excel.KeyboardDirection.down;

        // Get the active cell in the workbook.
        let activeCell = context.workbook.getActiveCell();

      // Get all the cells from the currently selected range to the bottom-
  most edge of the used range.
      // This method acts like the Ctrl+Shift+Down arrow key keyboard shortcut
  while a range is selected.
      let extendedRange = range.getExtendedRange(
         direction,
         activeCell
      );
      extendedRange.select();

        await context.sync();
  });




Before selecting all the cells from the current range to the edge of
the used range

The following screenshot shows a used range and a selected range within the used
range. The used range is a table with data at C5:F12. Inside this table, the range D8:E9 is
selected. This selection is the before state, prior to running the Range.getExtendedRange
method.
 After selecting all the cells from the current range to the edge of
the used range

The following screenshot shows the same table as the preceding screenshot, with data
in the range C5:F12. Inside this table, the range D8:E12 is selected. This selection is after
state, after running the Range.getExtendedRange method to select all the cells from the
current range to the edge of the used range in the down direction.

This article provides code samples that set and get range values, text, or formulas with
the Excel JavaScript API. For the complete list of properties and methods that the Range
object supports, see Excel.Range class.


  ï¼— Note

  The Excel JavaScript API doesn't have a "Cell" object or class. Instead, the Excel
  JavaScript API defines all Excel cells as Range objects. An individual cell in the Excel
  UI translates to a Range object with one cell in the Excel JavaScript API. A single
   Range object can also contain multiple contiguous cells. See Work with cells using

  the Excel JavaScript API to learn more.




Set values or formulas
The following code samples set values and formulas for a single cell or a range of cells.


Set value for a single cell
The following code sample sets the value of cell C3 to "5" and then sets the width of the
columns to best fit the data.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");

        let range = sheet.getRange("C3");
        range.values = [[ 5 ]];
        range.format.autofitColumns();

        await context.sync();
  });




Data before cell value is updated
 Data after cell value is updated




Set values for a range of cells
The following code sample sets values for the cells in the range B5:D5 and then sets the
width of the columns to best fit the data.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");

        let data = [
            ["Potato Chips", 10, 1.80],
        ];

        let range = sheet.getRange("B5:D5");
        range.values = data;
        range.format.autofitColumns();

        await context.sync();
  });




Data before cell values are updated
 Data after cell values are updated




Set formula for a single cell
The following code sample sets a formula for cell E3 and then sets the width of the
columns to best fit the data.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");

        let range = sheet.getRange("E3");
        range.formulas = [[ "=C3 * D3" ]];
        range.format.autofitColumns();

        await context.sync();
  });




Data before cell formula is set
 Data after cell formula is set




Set formulas for a range of cells
The following code sample sets formulas for cells in the range E2:E6 and then sets the
width of the columns to best fit the data.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");

        let data = [
            ["=C3 * D3"],
            ["=C4 * D4"],
            ["=C5 * D5"],
            ["=SUM(E3:E5)"]
        ];

        let range = sheet.getRange("E3:E6");
        range.formulas = data;
        range.format.autofitColumns();

        await context.sync();
  });




Data before cell formulas are set




Data after cell formulas are set
 Get values, text, or formulas
These code samples get values, text, and formulas from a range of cells.


Get values from a range of cells
The following code sample gets the range B2:E6, loads its values property, and writes
the values to the console. The values property of a range specifies the raw values that
the cells contain. Even if some cells in a range contain formulas, the values property of
the range specifies the raw values for those cells, not any of the formulas.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");

        let range = sheet.getRange("B2:E6");
        range.load("values");
        await context.sync();

        console.log(JSON.stringify(range.values, null, 4));
  });




Data in range (values in column E are a result of formulas)




range.values (as logged to the console by the code sample above)
   JSON


  [
         [
               "Product",
               "Qty",
               "Unit Price",
               "Total Price"
         ],
         [
               "Almonds",
               2,
               7.5,
               15
         ],
         [
               "Coffee",
               1,
               34.5,
               34.5
         ],
         [
               "Chocolate",
               5,
               9.56,
               47.8
         ],
         [
               "",
               "",
               "",
               97.3
         ]
  ]




Get text from a range of cells
The following code sample gets the range B2:E6, loads its text property, and writes it
to the console. The text property of a range specifies the display values for cells in the
range. Even if some cells in a range contain formulas, the text property of the range
specifies the display values for those cells, not any of the formulas.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");

         let range = sheet.getRange("B2:E6");
         range.load("text");
         await context.sync();
         console.log(JSON.stringify(range.text, null, 4));
 });




Data in range (values in column E are a result of formulas)




range.text (as logged to the console by the code sample above)

 JSON


 [
        [
             "Product",
             "Qty",
             "Unit Price",
             "Total Price"
        ],
        [
             "Almonds",
             "2",
             "7.5",
             "15"
        ],
        [
             "Coffee",
             "1",
             "34.5",
             "34.5"
        ],
        [
             "Chocolate",
             "5",
             "9.56",
             "47.8"
        ],
        [
             "",
             "",
             "",
             "97.3"
          ]
  ]




Get formulas from a range of cells
The following code sample gets the range B2:E6, loads its formulas property, and writes
it to the console. The formulas property of a range specifies the formulas for cells in the
range that contain formulas and the raw values for cells in the range that do not contain
formulas.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");

         let range = sheet.getRange("B2:E6");
         range.load("formulas");
         await context.sync();

         console.log(JSON.stringify(range.formulas, null, 4));
  });




Data in range (values in column E are a result of formulas)




range.formulas (as logged to the console by the code sample
above)

  JSON


  [
         [
               "Product",
               "Qty",
               "Unit Price",
               "Total Price"
         ],
       [
           "Almonds",
           2,
           7.5,
           "=C3 * D3"
      ],
      [
           "Coffee",
           1,
           34.5,
           "=C4 * D4"
      ],
      [
           "Chocolate",
           5,
           9.56,
           "=C5 * D5"
      ],
      [
           "",
           "",
           "",
           "=SUM(E3:E5)"
      ]
 ]

This article provides code samples that set font color, fill color, and number format for
cells in a range with the Excel JavaScript API. For the complete list of properties and
methods that the Range object supports, see Excel.Range class.


  ï¼— Note

  The Excel JavaScript API doesn't have a "Cell" object or class. Instead, the Excel
  JavaScript API defines all Excel cells as Range objects. An individual cell in the Excel
  UI translates to a Range object with one cell in the Excel JavaScript API. A single
   Range object can also contain multiple contiguous cells. See Work with cells using

  the Excel JavaScript API to learn more.




Set font color and fill color
The following code sample sets the font color and fill color for cells in range B2:E2.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");

        let range = sheet.getRange("B2:E2");
        range.format.fill.color = "#4472C4";
        range.format.font.color = "white";

        await context.sync();
  });




Data in range before font color and fill color are set
 Data in range after font color and fill color are set




Set number format
The following code sample sets the number format for the cells in range D3:E5.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");

        let formats = [
            ["0.00", "0.00"],
            ["0.00", "0.00"],
            ["0.00", "0.00"]
        ];

        let range = sheet.getRange("D3:E5");
        range.numberFormat = formats;

        await context.sync();
  });




Data in range before number format is set

The Excel JavaScript Library provides APIs to apply conditional formatting to data ranges
in your worksheets. This functionality makes large sets of data easy to visually parse. The
formatting also dynamically updates based on changes within the range.


  ï¼— Note

  This article covers conditional formatting in the context of Excel JavaScript add-ins.
  The following articles provide detailed information about the full conditional
  formatting capabilities within Excel.

        Add, change, or clear conditional formats
        Use formulas with conditional formatting




Programmatic control of conditional
formatting
The Range.conditionalFormats property is a collection of ConditionalFormat objects that
apply to the range. The ConditionalFormat object contains several properties that define
the format to be applied based on the ConditionalFormatType.

      cellValue

      colorScale

      custom
      dataBar

      iconSet
      preset

      textComparison
      topBottom



  ï¼— Note

  Each of these formatting properties has a corresponding *OrNullObject variant.
  Learn more about that pattern in the *OrNullObject methods section.
 Only one format type can be set for the ConditionalFormat object. This is determined by
the type property, which is a ConditionalFormatType enum value. type is set when
adding a conditional format to a range.



Create conditional formatting rules
Conditional formats are added to a range by using conditionalFormats.add . Once
added, the properties specific to the conditional format can be set. The following
examples show the creation of different formatting types.


Cell value
Cell value conditional formatting applies a user-defined format based on the results of
one or two formulas in the ConditionalCellValueRule. The operator property is a
ConditionalCellValueOperator defining how the resulting expressions relate to the
formatting.

The following example shows red font coloring applied to any value in the range less
than zero.




  JavaScript


  await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");
      const range = sheet.getRange("B21:E23");
      const conditionalFormat = range.conditionalFormats.add(
          Excel.ConditionalFormatType.cellValue
      );

      // Set the font of negative numbers to red.
      conditionalFormat.cellValue.format.font.color = "red";
      conditionalFormat.cellValue.rule = { formula1: "=0", operator:
  "LessThan" };

        await context.sync();
  });




Color scale
 Color scale conditional formatting applies a color gradient across the data range. The
criteria property on the ColorScaleConditionalFormat defines three
ConditionalColorScaleCriterion: minimum , maximum , and, optionally, midpoint . Each of the
criterion scale points have three properties:

      color - The HTML color code for the endpoint.

      formula - A number or formula representing the endpoint. This will be null if

      type is lowestValue or highestValue .
      type - How the formula should be evaluated. highestValue and lowestValue refer

     to values in the range being formatted.

The following example shows a range being colored blue to yellow to red. Note that
minimum and maximum are the lowest and highest values respectively and use null

formulas. midpoint is using the percentage type with a formula of "=50" so the
yellowest cell is the mean value.




  JavaScript


  await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");
      const range = sheet.getRange("B2:M5");
      const conditionalFormat = range.conditionalFormats.add(
            Excel.ConditionalFormatType.colorScale
      );

      // Color the backgrounds of the cells from blue to yellow to red based
  on value.
      const criteria = {
            minimum: {
                 formula: null,
                 type: Excel.ConditionalFormatColorCriterionType.lowestValue,
                 color: "blue"
            },
            midpoint: {
                 formula: "50",
                 type: Excel.ConditionalFormatColorCriterionType.percent,
                 color: "yellow"
            },
            maximum: {
                 formula: null,
                 type: Excel.ConditionalFormatColorCriterionType.highestValue,
                 color: "red"
            }
      };
          conditionalFormat.colorScale.criteria = criteria;

         await context.sync();
   });




Custom
Custom conditional formatting applies a user-defined format to the cells based on a
formula of arbitrary complexity. The ConditionalFormatRule object lets you define the
formula in different notations:

       formula - Standard notation.
       formulaLocal - Localized based on the user's language.

       formulaR1C1 - R1C1-style notation.


The following example colors the fonts green of cells with higher values than the cell to
their left.




  JavaScript


   await Excel.run(async (context) => {
       const sheet = context.workbook.worksheets.getItem("Sample");
       const range = sheet.getRange("B8:E13");
       const conditionalFormat = range.conditionalFormats.add(
            Excel.ConditionalFormatType.custom
       );

       // If a cell has a higher value than the one to its left, set that
   cell's font to green.
       conditionalFormat.custom.rule.formula =
   '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
       conditionalFormat.custom.format.font.color = "green";

         await context.sync();
   });




Data bar
 Data bar conditional formatting adds data bars to the cells. By default, the minimum and
maximum values in the Range form the bounds and proportional sizes of the data bars.
The DataBarConditionalFormat object has several properties to control the bar's
appearance.

The following example formats the range with data bars filling left-to-right.




  JavaScript


  await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");
      const range = sheet.getRange("B8:E13");
      const conditionalFormat = range.conditionalFormats.add(
           Excel.ConditionalFormatType.dataBar
      );

      // Give left-to-right, default-appearance data bars to all the cells.
      conditionalFormat.dataBar.barDirection =
  Excel.ConditionalDataBarDirection.leftToRight;
      await context.sync();
  });




Icon set
Icon set conditional formatting uses Excel Icons to highlight cells. The criteria property
is an array of ConditionalIconCriterion, which define the symbol to be inserted and the
condition under which it is inserted. This array is automatically prepopulated with
criterion elements with default properties. Individual properties cannot be overwritten.
Instead, the whole criteria object must be replaced.

The following example shows a three-triangle icon set applied across the range.
   JavaScript


  await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");
      const range = sheet.getRange("B8:E13");
      const conditionalFormat = range.conditionalFormats.add(
           Excel.ConditionalFormatType.iconSet
      );

        const iconSetCF = conditionalFormat.iconSet;
        iconSetCF.style = Excel.IconSet.threeTriangles;

        /*
         With a "three*" icon set style, such as "threeTriangles", the third
           element in the criteria array (criteria[2]) defines the "top" icon;
           e.g., a green triangle. The second (criteria[1]) defines the
  "middle"
           icon, The first (criteria[0]) defines the "low" icon, but it can
  often
           be left empty as this method does below, because every cell that
         does not match the other two criteria always gets the low icon.
      */
      iconSetCF.criteria = [
           {},
             {
               type: Excel.ConditionalFormatIconRuleType.number,
               operator:
  Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
               formula: "=700"
             },
             {
               type: Excel.ConditionalFormatIconRuleType.number,
               operator:
  Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
               formula: "=1000"
             }
      ];

        await context.sync();
  });




Preset criteria
Preset conditional formatting applies a user-defined format to the range based on a
selected standard rule. These rules are defined by the ConditionalFormatPresetCriterion
in the ConditionalPresetCriteriaRule.

The following example colors the font white wherever a cell's value is at least one
standard deviation above the range's average.
   JavaScript


  await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");
      const range = sheet.getRange("B2:M5");
      const conditionalFormat = range.conditionalFormats.add(
           Excel.ConditionalFormatType.presetCriteria
      );

      // Color every cell's font white that is one standard deviation above
  average relative to the range.
      conditionalFormat.preset.format.font.color = "white";
      conditionalFormat.preset.rule = {
           criterion:
  Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage
      };

        await context.sync();
  });




Text comparison
Text comparison conditional formatting uses string comparisons as the condition. The
rule property is a ConditionalTextComparisonRule defining a string to compare with
the cell and an operator to specify the type of comparison.

The following example formats the font color red when a cell's text contains "Delayed".




  JavaScript


  await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");
      const range = sheet.getRange("B16:D18");
      const conditionalFormat = range.conditionalFormats.add(
           Excel.ConditionalFormatType.containsText
      );

        // Color the font of every cell containing "Delayed".
        conditionalFormat.textComparison.format.font.color = "red";
         conditionalFormat.textComparison.rule = {
             operator: Excel.ConditionalTextOperator.contains,
             text: "Delayed"
        };

        await context.sync();
  });




Top/bottom
Top/bottom conditional formatting applies a format to the highest or lowest values in a
range. The rule property, which is of type ConditionalTopBottomRule, sets whether the
condition is based on the highest or lowest, as well as whether the evaluation is ranked
or percentage-based.

The following example applies a green highlight to the highest value cell in the range.




  JavaScript


  await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");
      const range = sheet.getRange("B21:E23");
      const conditionalFormat = range.conditionalFormats.add(
           Excel.ConditionalFormatType.topBottom
      );

        // For the highest valued cell in the range, make the background green.
        conditionalFormat.topBottom.format.fill.color = "green"
        conditionalFormat.topBottom.rule = { rank: 1, type: "TopItems"}

        await context.sync();
  });




Change conditional formatting rules
The ConditionalFormat object offers multiple methods to change conditional formatting
rules after they've been set.

     changeRuleToCellValue
     changeRuleToColorScale
     changeRuleToContainsText
         changeRuleToCustom
        changeRuleToDataBar
        changeRuleToIconSet
        changeRuleToPresetCriteria
        changeRuleToTopBottom

The following example shows how to use the changeRuleToPresetCriteria method from
the preceding list to change an existing conditional format rule to the preset criteria rule
type.


  ï¼— Note

  The specified range must have an existing conditional format rule to use the
  change methods. If the specified range has no conditional format rule, the change
  methods don't apply a new rule.


  JavaScript


  await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");
      const range = sheet.getRange("B2:M5");

      // Retrieve the first existing `ConditionalFormat` rule on this range.
      // Note: The specified range must have an existing conditional format
  rule.
      const conditionalFormat =
  range.conditionalFormats.getItemOrNullObject("0");

      // Change the conditional format rule to preset criteria.
      conditionalFormat.changeRuleToPresetCriteria({
          criterion:
  Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage,
      });
      conditionalFormat.preset.format.font.color = "red";

         await context.sync();
  });




Multiple formats and priority
You can apply multiple conditional formats to a range. If the formats have conflicting
elements, such as differing font colors, only one format applies that particular element.
Precedence is defined by the ConditionalFormat.priority property. Priority is a number
 (equal to the index in the ConditionalFormatCollection ) and can be set when creating
the format. The lower the priority value, the higher the priority of the format is.

The following example shows a conflicting font color choice between the two formats.
Negative numbers will get a bold font, but NOT a red font, because priority goes to the
format that gives them a blue font.




  JavaScript


  await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");
      const temperatureDataRange =
  sheet.tables.getItem("TemperatureTable").getDataBodyRange();



      // Set low numbers to bold, dark red font and assign priority 1.
      const presetFormat = temperatureDataRange.conditionalFormats
          .add(Excel.ConditionalFormatType.presetCriteria);
      presetFormat.preset.format.font.color = "red";
      presetFormat.preset.format.font.bold = true;
      presetFormat.preset.rule = { criterion:
  Excel.ConditionalFormatPresetCriterion.oneStdDevBelowAverage };
      presetFormat.priority = 1;

      // Set negative numbers to blue font with green background and set
  priority 0.
      const cellValueFormat = temperatureDataRange.conditionalFormats
          .add(Excel.ConditionalFormatType.cellValue);
      cellValueFormat.cellValue.format.font.color = "blue";
      cellValueFormat.cellValue.format.fill.color = "lightgreen";
      cellValueFormat.cellValue.rule = { formula1: "=0", operator: "LessThan"
  };
      cellValueFormat.priority = 0;

        await context.sync();
  });




Mutually exclusive conditional formats
The stopIfTrue property of ConditionalFormat prevents lower priority conditional
formats from being applied to the range. When a range matching the conditional
 format with stopIfTrue === true is applied, no subsequent conditional formats are
applied, even if their formatting details are not contradictory.

The following example shows two conditional formats being added to a range. Negative
numbers will have a blue font with a light green background, regardless of whether the
other format condition is true.




  JavaScript


  await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");
      const temperatureDataRange =
  sheet.tables.getItem("TemperatureTable").getDataBodyRange();

      // Set low numbers to bold, dark red font and assign priority 1.
      const presetFormat = temperatureDataRange.conditionalFormats
          .add(Excel.ConditionalFormatType.presetCriteria);
      presetFormat.preset.format.font.color = "red";
      presetFormat.preset.format.font.bold = true;
      presetFormat.preset.rule = { criterion:
  Excel.ConditionalFormatPresetCriterion.oneStdDevBelowAverage };
      presetFormat.priority = 1;

        // Set negative numbers to blue font with green background and
        // set priority 0, but set stopIfTrue to true, so none of the
        // formatting of the conditional format with the higher priority
        // value will apply, not even the bolding of the font.
        const cellValueFormat = temperatureDataRange.conditionalFormats
            .add(Excel.ConditionalFormatType.cellValue);
        cellValueFormat.cellValue.format.font.color = "blue";
        cellValueFormat.cellValue.format.fill.color = "lightgreen";
        cellValueFormat.cellValue.rule = { formula1: "=0", operator: "LessThan"
  };
        cellValueFormat.priority = 0;
        cellValueFormat.stopIfTrue = true;

        await context.sync();
  });




Clear conditional formatting rules
To remove format properties from a specific conditional format rule, use the clearFormat
method of the ConditionalRangeFormat object. The clearFormat method creates a
 formatting rule without format settings.

To remove all the conditional formatting rules from a specific range, or an entire
worksheet, use the clearAll method of the ConditionalFormatCollection object.

The following sample shows how to remove all conditional formatting from a worksheet
with the clearAll method.

  JavaScript


  await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");
      const range = sheet.getRange();
      range.conditionalFormats.clearAll();

        await context.sync();
  });

This article describes how to read and write to an unbounded range with the Excel
JavaScript API. For the complete list of properties and methods that the Range object
supports, see Excel.Range class.

An unbounded range address is a range address that specifies either entire columns or
entire rows. For example:

      Range addresses comprised of entire columns.
         C:C

         A:F

      Range addresses comprised of entire rows.
         2:2

         1:4




Read an unbounded range
When the API makes a request to retrieve an unbounded range (for example,
getRange('C:C') ), the response will contain null values for cell-level properties such as

values , text , numberFormat , and formula . Other properties of the range, such as

address and cellCount , will contain valid values for the unbounded range.




Write to an unbounded range
You cannot set cell-level properties such as values , numberFormat , and formula on an
unbounded range because the input request is too large. For example, the following
code example is not valid because it attempts to specify values for an unbounded
range. The API returns an error if you attempt to set cell-level properties for an
unbounded range.

  JavaScript


  // Note: This code sample attempts to specify `values` for an unbounded
  range, which is not a valid request. The sample will return an error.
  let range =
  context.workbook.worksheets.getActiveWorksheet().getRange('A:B');
  range.values = 'Due Date';

This article describes how to handle reading and writing to large ranges with the Excel
JavaScript API.



Run separate read or write operations for large
ranges
If a range contains a large number of cells, values, number formats, or formulas, it may
not be possible to run API operations on that range. The API will always make a best
attempt to run the requested operation on a range (i.e., to retrieve or write the specified
data), but attempting to perform read or write operations for a large range may result in
an API error due to excessive resource utilization. To avoid such errors, we recommend
that you run separate read or write operations for smaller subsets of a large range,
instead of attempting to run a single read or write operation on a large range.

For details on the system limitations, see the "Excel add-ins" section of Resource limits
and performance optimization for Office Add-ins.


Conditional formatting of ranges
Ranges can have formats applied to individual cells based on conditions. For more
information about this, see Apply conditional formatting to Excel ranges.

This article provides a code sample that finds a string within a range using the Excel
JavaScript API. For the complete list of properties and methods that the Range object
supports, see Excel.Range class.


  ï¼— Note

  The Excel JavaScript API doesn't have a "Cell" object or class. Instead, the Excel
  JavaScript API defines all Excel cells as Range objects. An individual cell in the Excel
  UI translates to a Range object with one cell in the Excel JavaScript API. A single
   Range object can also contain multiple contiguous cells. See Work with cells using

  the Excel JavaScript API to learn more.




Match a string within a range
The Range object has a find method to search for a specified string within the range. It
returns the range of the first cell with matching text.

The following code sample finds the first cell with a value equal to the string Food and
logs its address to the console. Note that find throws an ItemNotFound error if the
specified string doesn't exist in the range. If you expect that the specified string may not
exist in the range, use the findOrNullObject method instead, so your code gracefully
handles that scenario.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      let table = sheet.tables.getItem("ExpensesTable");
      let searchRange = table.getRange();
      let foundRange = searchRange.find("Food", {
          completeMatch: true, // Match the whole cell value.
          matchCase: false, // Don't match case.
          searchDirection: Excel.SearchDirection.forward // Start search at
  the beginning of the range.
      });

       foundRange.load("address");
       await context.sync();
         console.log(foundRange.address);
  });



When the find method is called on a range representing a single cell, the entire
worksheet is searched. The search begins at that cell and goes in the direction specified
by SearchCriteria.searchDirection , wrapping around the ends of the worksheet if
needed.

This article provides code samples that show how to work with dates using the Excel
JavaScript API and the Moment-MSDate plug-in         . For the complete list of properties
and methods that the Range object supports, see the Excel.Range class.


  ï¼— Note

  The Excel JavaScript API doesn't have a "Cell" object or class. Instead, the Excel
  JavaScript API defines all Excel cells as Range objects. An individual cell in the Excel
  UI translates to a Range object with one cell in the Excel JavaScript API. A single
   Range object can also contain multiple contiguous cells. See Work with cells using

  the Excel JavaScript API to learn more.




Use the Moment-MSDate plug-in to work with
dates
The Moment JavaScript library     provides a convenient way to use dates and
timestamps. The Moment-MSDate plug-in          converts the format of moments into one
preferable for Excel. This is the same format the NOW function       returns.

The following code shows how to set the range at B4 to a moment's timestamp.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");

       let now = Date.now();
       let nowMoment = moment(now);
       let nowMS = nowMoment.toOADate();

       let dateRange = sheet.getRange("B4");
       dateRange.values = [[nowMS]];

       dateRange.numberFormat = [["[$-409]m/d/yy h:mm AM/PM;@"]];
         await context.sync();
  });



The following code sample demonstrates a similar technique to get the date back out of
the cell and convert it to a Moment or other format.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");

        let dateRange = sheet.getRange("B4");
        dateRange.load("values");

        await context.sync();

        let nowMS = dateRange.values[0][0];

        // Log the date as a moment.
        let nowMoment = moment.fromOADate(nowMS);
        console.log(`get (moment): ${JSON.stringify(nowMoment)}`);

        // Log the date as a UNIX-style timestamp.
        let now = nowMoment.unix();
        console.log(`get (timestamp): ${now}`);
  });



Your add-in has to format the ranges to display the dates in a more human-readable
form. For example, "[$-409]m/d/yy h:mm AM/PM;@" displays "12/3/18 3:57 PM". For more
information about date and time number formats, see "Guidelines for date and time
formats" in the Review guidelines for customizing a number format   article.

This article provides code samples that find special cells within a range using the Excel
JavaScript API. For the complete list of properties and methods that the Range object
supports, see Excel.Range class.



Find ranges with special cells
The Range.getSpecialCells and Range.getSpecialCellsOrNullObject methods find ranges
based on the characteristics of their cells and the types of values of their cells. Both of
these methods return RangeAreas objects. Here are the signatures of the methods from
the TypeScript data types file:

  TypeScript


  getSpecialCells(cellType: Excel.SpecialCellType, cellValueType?:
  Excel.SpecialCellValueType): Excel.RangeAreas;



  TypeScript


  getSpecialCellsOrNullObject(cellType: Excel.SpecialCellType, cellValueType?:
  Excel.SpecialCellValueType): Excel.RangeAreas;



The following code sample uses the getSpecialCells method to find all the cells with
formulas. About this code, note:

      It limits the part of the sheet that needs to be searched by first calling
      Worksheet.getUsedRange and calling getSpecialCells for only that range.

      The getSpecialCells method returns a RangeAreas object, so all of the cells with
      formulas will be colored pink even if they are not all contiguous.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getActiveWorksheet();
      let usedRange = sheet.getUsedRange();
      let formulaRanges =
  usedRange.getSpecialCells(Excel.SpecialCellType.formulas);
      formulaRanges.format.fill.color = "pink";
         await context.sync();
  });



If no cells with the targeted characteristic exist in the range, getSpecialCells throws an
ItemNotFound error. This diverts the flow of control to a catch block, if there is one. If
there isn't a catch block, the error halts the method.

If you expect that cells with the targeted characteristic should always exist, you'll likely
want your code to throw an error if those cells aren't there. If it's a valid scenario that
there aren't any matching cells, your code should check for this possibility and handle it
gracefully without throwing an error. You can achieve this behavior with the
getSpecialCellsOrNullObject method and its returned isNullObject property. The

following code sample uses this pattern. About this code, note:

     The getSpecialCellsOrNullObject method always returns a proxy object, so it's
     never null in the ordinary JavaScript sense. But if no matching cells are found, the
      isNullObject property of the object is set to true .
     It calls context.sync before it tests the isNullObject property. This is a
     requirement with all *OrNullObject methods and properties, because you always
     have to load and sync a property in order to read it. However, it's not necessary to
     explicitly load the isNullObject property. It's automatically loaded by the
      context.sync even if load is not called on the object. For more information, see

     *OrNullObject methods and properties.
     You can test this code by first selecting a range that has no formula cells and
     running it. Then select a range that has at least one cell with a formula and run it
     again.

  JavaScript


  await Excel.run(async (context) => {
      let range = context.workbook.getSelectedRange();
      let formulaRanges =
  range.getSpecialCellsOrNullObject(Excel.SpecialCellType.formulas);
      await context.sync();

        if (formulaRanges.isNullObject) {
            console.log("No cells have formulas");
        }
        else {
            formulaRanges.format.fill.color = "pink";
        }

        await context.sync();
  });
 For simplicity, all other code samples in this article use the getSpecialCells method
instead of getSpecialCellsOrNullObject .



Narrow the target cells with cell value types
The Range.getSpecialCells() and Range.getSpecialCellsOrNullObject() methods
accept an optional second parameter used to further narrow down the targeted cells.
This second parameter is an Excel.SpecialCellValueType you use to specify that you
only want cells that contain certain types of values.


  ï¼— Note

  The Excel.SpecialCellValueType parameter can only be used if the
  Excel.SpecialCellType is Excel.SpecialCellType.formulas or

  Excel.SpecialCellType.constants .




Test for a single cell value type
The Excel.SpecialCellValueType enum has these four basic types (in addition to the
other combined values described later in this section):

      Excel.SpecialCellValueType.errors

      Excel.SpecialCellValueType.logical (which means boolean)

      Excel.SpecialCellValueType.numbers
      Excel.SpecialCellValueType.text


The following code sample finds special cells that are numerical constants and colors
those cells pink. About this code, note:

     It only highlights cells that have a literal number value. It won't highlight cells that
     have a formula (even if the result is a number) or a boolean, text, or error state
     cells.
     To test the code, be sure the worksheet has some cells with literal number values,
     some with other kinds of literal values, and some with formulas.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getActiveWorksheet();
      let usedRange = sheet.getUsedRange();
      let constantNumberRanges = usedRange.getSpecialCells(
             Excel.SpecialCellType.constants,
            Excel.SpecialCellValueType.numbers);
        constantNumberRanges.format.fill.color = "pink";

        await context.sync();
  });




Test for multiple cell value types
Sometimes you need to operate on more than one cell value type, such as all text-
valued and all boolean-valued ( Excel.SpecialCellValueType.logical ) cells. The
Excel.SpecialCellValueType enum has values with combined types. For example,

Excel.SpecialCellValueType.logicalText targets all boolean and all text-valued cells.
Excel.SpecialCellValueType.all is the default value, which does not limit the cell value

types returned. The following code sample colors all cells with formulas that produce
number or boolean value.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getActiveWorksheet();
      let usedRange = sheet.getUsedRange();
      let formulaLogicalNumberRanges = usedRange.getSpecialCells(
          Excel.SpecialCellType.formulas,
          Excel.SpecialCellValueType.logicalNumbers);
      formulaLogicalNumberRanges.format.fill.color = "pink";

        await context.sync();
  });

This article provides code samples that cut, copy, and paste ranges using the Excel
JavaScript API. For the complete list of properties and methods that the Range object
supports, see Excel.Range class.


  ï¼— Note

  The Excel JavaScript API doesn't have a "Cell" object or class. Instead, the Excel
  JavaScript API defines all Excel cells as Range objects. An individual cell in the Excel
  UI translates to a Range object with one cell in the Excel JavaScript API. A single
   Range object can also contain multiple contiguous cells. See Work with cells using

  the Excel JavaScript API to learn more.



  îª€ Tip

  To experiment with the cut, copy, and paste APIs from this article in a complete
  sample, open Script Lab in Excel and select Copy and paste ranges         in our
  Samples library.




Copy and paste
The Range.copyFrom method replicates the Copy and Paste actions of the Excel UI. The
destination is the Range object that copyFrom is called on. The source to be copied is
passed as a range or a string address representing a range.

The following code sample copies the data from A1:E1 into the range starting at G1
(which ends up pasting into G1:K1).

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      // Copy everything from "A1:E1" into "G1" and the cells afterwards
  ("G1:K1").
      sheet.getRange("G1").copyFrom("A1:E1");
         await context.sync();
  });



Range.copyFrom has three optional parameters.


  TypeScript


  copyFrom(sourceRange: Range | RangeAreas | string, copyType?:
  Excel.RangeCopyType, skipBlanks?: boolean, transpose?: boolean): void;



copyType specifies what data gets copied from the source to the destination.


      Excel.RangeCopyType.formulas transfers the formulas in the source cells and

     preserves the relative positioning of those formulas' ranges. Any non-formula
     entries are copied as-is.
      Excel.RangeCopyType.values copies the data values and, in the case of formulas,

     the result of the formula.
      Excel.RangeCopyType.formats copies the formatting of the range, including font,

     color, and other format settings, but no values.
      Excel.RangeCopyType.all (the default option) copies both data and formatting,

     preserving cells' formulas if found.

skipBlanks sets whether blank cells are copied into the destination. When true,

copyFrom skips blank cells in the source range. Skipped cells will not overwrite the

existing data of their corresponding cells in the destination range. The default is false.

transpose determines whether or not the data is transposed, meaning its rows and

columns are switched, into the source location. A transposed range is flipped along the
main diagonal, so rows 1, 2, and 3 will become columns A, B, and C.

The following code sample and images demonstrate this behavior in a simple scenario.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      // Copy a range, omitting the blank cells so existing data is not
  overwritten in those cells.
      sheet.getRange("D1").copyFrom("A1:C1",
          Excel.RangeCopyType.all,
          true, // skipBlanks
          false); // transpose
      // Copy a range, including the blank cells which will overwrite existing
  data in the target cells.
      sheet.getRange("D2").copyFrom("A2:C2",
          Excel.RangeCopyType.all,
              false, // skipBlanks
             false); // transpose
         await context.sync();
  });




Data before range is copied and pasted




Data after range is copied and pasted




Cut and paste (move) cells
The Range.moveTo method moves cells to a new location in the workbook. This cell
movement behavior works the same as when cells are moved by dragging the range
border     or when taking the Cut and Paste actions. Both the formatting and values of
the range are moved to the location specified as the destinationRange parameter.

The following code sample moves a range with the Range.moveTo method. Note that if
the destination range is smaller than the source, it will be expanded to encompass the
source content.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getActiveWorksheet();
      sheet.getRange("F1").values = [["Moved Range"]];

         // Move the cells "A1:E1" to "G1" (which fills the range "G1:K1").
         sheet.getRange("A1:E1").moveTo("G1");
         await context.sync();
  });

ï¼– Collaborate with us on
GitHub                              Office Add-ins feedback
                                    Office Add-ins is an open source project.
The source for this content can
be found on GitHub, where you       Select a link to provide feedback:
can also create and review
                                    î¯¨ Open a documentation issue
issues and pull requests. For
more information, see our
                                    î´• Provide product feedback
contributor guide.
 Remove duplicates using the Excel
JavaScript API
Article â€¢ 05/02/2023


This article provides a code sample that removes duplicate entries in a range using the
Excel JavaScript API. For the complete list of properties and methods that the Range
object supports, see Excel.Range class.



Remove rows with duplicate entries
The Range.removeDuplicates method removes rows with duplicate entries in the
specified columns. The method goes through each row in the range from the lowest-
valued index to the highest-valued index in the range (from top to bottom). A row is
deleted if a value in its specified column or columns appeared earlier in the range. Rows
in the range below the deleted row are shifted up. removeDuplicates does not affect the
position of cells outside of the range.

removeDuplicates takes in a number[] representing the column indices which are
checked for duplicates. This array is zero-based and relative to the range, not the
worksheet. The method also takes in a boolean parameter that specifies whether the
first row is a header. When true , the top row is ignored when considering duplicates.
The removeDuplicates method returns a RemoveDuplicatesResult object that specifies
the number of rows removed and the number of unique rows remaining.

When using a range's removeDuplicates method, keep the following in mind.

      removeDuplicates considers cell values, not function results. If two different
      functions evaluate to the same result, the cell values are not considered duplicates.
      Empty cells are not ignored by removeDuplicates . The value of an empty cell is
      treated like any other value. This means empty rows contained within in the range
      will be included in the RemoveDuplicatesResult .

The following code sample shows the removal of entries with duplicate values in the first
column.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      let range = sheet.getRange("B2:D11");
     let deleteResult = range.removeDuplicates([0],true);
    deleteResult.load();

    await context.sync();

     console.log(deleteResult.removed + " entries with duplicate names
 removed.");
     console.log(deleteResult.uniqueRemaining + " entries with unique names
 remain in the range.");
 });




Data before duplicate entries are removed




Data after duplicate entries are removed

This article provides a code sample that shows how to group ranges for an outline using
the Excel JavaScript API. For the complete list of properties and methods that the Range
object supports, see Excel.Range class.



Group rows or columns of a range for an
outline
Rows or columns of a range can be grouped together to create an outline . These
groups can be collapsed and expanded to hide and show the corresponding cells. This
makes quick analysis of top-line data easier. Use Range.group to make these outline
groups.

An outline can have a hierarchy, where smaller groups are nested under larger groups.
This allows the outline to be viewed at different levels. Changing the visible outline level
can be done programmatically through the Worksheet.showOutlineLevels method. Note
that Excel only supports eight levels of outline groups.

The following code sample creates an outline with two levels of groups for both the
rows and columns. The subsequent image shows the groupings of that outline. In the
code sample, the ranges being grouped do not include the row or column of the outline
control (the "Totals" for this example). A group defines what will be collapsed, not the
row or column with the control.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");

       // Group the larger, main level. Note that the outline controls
       // will be on row 10, meaning 4-9 will collapse and expand.
       sheet.getRange("4:9").group(Excel.GroupOption.byRows);

      // Group the smaller, sublevels. Note that the outline controls
      // will be on rows 6 and 9, meaning 4-5 and 7-8 will collapse and
  expand.
      sheet.getRange("4:5").group(Excel.GroupOption.byRows);
      sheet.getRange("7:8").group(Excel.GroupOption.byRows);

       // Group the larger, main level. Note that the outline controls
       // will be on column R, meaning C-Q will collapse and expand.
      sheet.getRange("C:Q").group(Excel.GroupOption.byColumns);

      // Group the smaller, sublevels. Note that the outline controls
      // will be on columns G, L, and R, meaning C-F, H-K, and M-P will
  collapse and expand.
      sheet.getRange("C:F").group(Excel.GroupOption.byColumns);
      sheet.getRange("H:K").group(Excel.GroupOption.byColumns);
      sheet.getRange("M:P").group(Excel.GroupOption.byColumns);
      await context.sync();
  });




Remove grouping from rows or columns of a
range
To ungroup a row or column group, use the Range.ungroup method. This removes the
outermost level from the outline. If multiple groups of the same row or column type are
at the same level within the specified range, all of those groups are ungrouped.

This article provides a code sample that handles dynamic arrays and range spilling using
the Excel JavaScript API. For the complete list of properties and methods that the Range
object supports, see Excel.Range class.



Dynamic arrays
Some Excel formulas return Dynamic arrays . These fill the values of multiple cells
outside of the formula's original cell. This value overflow is referred to as a "spill". Your
add-in can find the range used for a spill with the Range.getSpillingToRange method.
There is also a *OrNullObject version, Range.getSpillingToRangeOrNullObject .

The following sample shows a basic formula that copies the contents of a range into a
cell, which spills into neighboring cells. The add-in then logs the range that contains the
spill.

   JavaScript


   await Excel.run(async (context) => {
       let sheet = context.workbook.worksheets.getItem("Sample");

         // Set G4 to a formula that returns a dynamic array.
         let targetCell = sheet.getRange("G4");
         targetCell.formulas = [["=A4:D4"]];

         // Get the address of the cells that the dynamic array spilled into.
         let spillRange = targetCell.getSpillingToRange();
         spillRange.load("address");

         // Sync and log the spilled-to range.
         await context.sync();

       // This will log the range as "G4:J4".
       console.log(`Copying the table headers spilled into
   ${spillRange.address}.`);
   });




Range spilling
 Find the cell responsible for spilling into a given cell by using the Range.getSpillParent
method. Note that getSpillParent only works when the range object is a single cell.
Calling getSpillParent on a range with multiple cells will result in an error being thrown
(or a null range being returned for Range.getSpillParentOrNullObject ).

Excel formulas often contain references to other cells in the same worksheet or
workbook. These cross-cell references are known as "precedents" and "dependents". A
precedent is a cell that provides data to a formula. A dependent is a cell that contains a
formula which refers to other cells. To learn more about features in the Excel UI related
to precedents and dependents, such as Trace Precedents and Trace Dependents, see
Display the relationships between formulas and cells     .

A precedent cell may have its own precedent cells. Every precedent cell in this chain of
precedents is still a precedent of the original cell. The same relationship exists for
dependents. Any cell affected by another cell is a dependent of that cell. A "direct
precedent" is the first preceding group of cells in this sequence, similar to the concept
of parents in a parent-child relationship. A "direct dependent" is the first dependent
group of cells in a sequence, similar to children in a parent-child relationship.

This article provides code samples that retrieve the precedents and dependents of
formulas using the Excel JavaScript API. For the complete list of properties and methods
that the Range object supports, see Range Object (JavaScript API for Excel).



Get the precedents of a formula
Locate a formula's precedent cells with Range.getPrecedents. Range.getPrecedents
returns a WorkbookRangeAreas object. This object contains the addresses of all the
precedents in the workbook. It has a separate RangeAreas object for each worksheet
containing at least one formula precedent. To learn more about the RangeAreas object,
see Work with multiple ranges simultaneously in Excel add-ins.

To locate only the direct precedent cells of a formula, use Range.getDirectPrecedents.
Range.getDirectPrecedents works like Range.getPrecedents and returns a

WorkbookRangeAreas object containing the addresses of direct precedents.


The following screenshot shows the result of selecting the Trace Precedents button in
the Excel UI. This button draws an arrow from precedent cells to the selected cell. The
selected cell, E3, contains the formula "=C3 * D3", so both C3 and D3 are precedent
cells. Unlike the Excel UI button, the getPrecedents and getDirectPrecedents methods
don't draw arrows.
   ï¼‰ Important

  The getPrecedents and getDirectPrecedents methods don't retrieve precedent
  cells across workbooks.


The following code sample shows how to work with the Range.getPrecedents and
Range.getDirectPrecedents methods. The sample gets the precedents for the active

range and then changes the background color of those precedent cells. The background
color of the direct precedent cells is set to yellow and the background color of the other
precedent cells is set to orange.

  JavaScript


  // This code sample shows how to find and highlight the precedents
  // and direct precedents of the currently selected cell.
  await Excel.run(async (context) => {
    let range = context.workbook.getActiveCell();
    // Precedents are all cells that provide data to the selected formula.
    let precedents = range.getPrecedents();
    // Direct precedents are the parent cells, or the first preceding group of
  cells that provide data to the selected formula.
    let directPrecedents = range.getDirectPrecedents();

    range.load("address");
    precedents.areas.load("address");
    directPrecedents.areas.load("address");

    await context.sync();

    console.log(`All precedent cells of ${range.address}:`);

    // Use the precedents API to loop through all precedents of the active
  cell.
    for (let i = 0; i < precedents.areas.items.length; i++) {
      // Highlight and print out the address of all precedent cells.
         precedents.areas.items[i].format.fill.color = "Orange";
        console.log(` ${precedents.areas.items[i].address}`);
    }

    console.log(`Direct precedent cells of ${range.address}:`);

    // Use the direct precedents API to loop through direct precedents of the
  active cell.
    for (let i = 0; i < directPrecedents.areas.items.length; i++) {
      // Highlight and print out the address of each direct precedent cell.
      directPrecedents.areas.items[i].format.fill.color = "Yellow";
      console.log(` ${directPrecedents.areas.items[i].address}`);
    }
  });




  ï¼— Note

  The Range.getPrecedents and Range.getDirectPrecedents methods return an
  ItemNotFound error if no precedent cells are found.




Get the dependents of a formula
Locate a formula's dependent cells with Range.getDependents. Like
Range.getPrecedents , Range.getDependents also returns a WorkbookRangeAreas object.

This object contains the addresses of all the dependents in the workbook. It has a
separate RangeAreas object for each worksheet containing at least one formula
dependent. For more information on working with the RangeAreas object, see Work with
multiple ranges simultaneously in Excel add-ins.

To locate only the direct dependent cells of a formula, use Range.getDirectDependents.
Range.getDirectDependents works like Range.getDependents and returns a
WorkbookRangeAreas object containing the addresses of direct dependents.


The following screenshot shows the result of selecting the Trace Dependents button in
the Excel UI. This button draws an arrow from the selected cell to dependent cells. The
selected cell, D3, has cell E3 as a dependent. E3 contains the formula "=C3 * D3". Unlike
the Excel UI button, the getDependents and getDirectDependents methods don't draw
arrows.
   ï¼‰ Important

  The getDependents and getDirectDependents methods don't retrieve dependent
  cells across workbooks.


The following code sample shows how to work with the Range.getDependents and
Range.getDirectDependents methods. The sample gets the dependents for the active

range and then changes the background color of those dependent cells. The
background color of the direct dependent cells is set to yellow and the background
color of the other dependent cells is set to orange.

  JavaScript


  // This code sample shows how to find and highlight the dependents
  // and direct dependents of the currently selected cell.
  await Excel.run(async (context) => {
      let range = context.workbook.getActiveCell();
      // Dependents are all cells that contain formulas that refer to other
  cells.
      let dependents = range.getDependents();
      // Direct dependents are the child cells, or the first succeeding group
  of cells in a sequence of cells that refer to other cells.
      let directDependents = range.getDirectDependents();

       range.load("address");
       dependents.areas.load("address");
       directDependents.areas.load("address");

       await context.sync();

       console.log(`All dependent cells of ${range.address}:`);

      // Use the dependents API to loop through all dependents of the active
  cell.
      for (let i = 0; i < dependents.areas.items.length; i++) {
        // Highlight and print out the addresses of all dependent cells.
        dependents.areas.items[i].format.fill.color = "Orange";
        console.log(` ${dependents.areas.items[i].address}`);
      }

     console.log(`Direct dependent cells of ${range.address}:`);

     // Use the direct dependents API to loop through direct dependents of
 the active cell.
     for (let i = 0; i < directDependents.areas.items.length; i++) {
       // Highlight and print the address of each dependent cell.
       directDependents.areas.items[i].format.fill.color = "Yellow";
       console.log(` ${directDependents.areas.items[i].address}`);
     }
 });




 ï¼— Note

 The Range.getDependents and Range.getDirectDependents methods return an
 ItemNotFound error if no dependent cells are found.

  ï¼– Collaborate with us on
  GitHub                              Office Add-ins feedback
                                      Office Add-ins is an open source project.
  The source for this content can
                                      Select a link to provide feedback:
  be found on GitHub, where you
  can also create and review
                                      î¯¨ Open a documentation issue
  issues and pull requests. For
  more information, see our
                                      î´• Provide product feedback
  contributor guide.
 Delay execution while cell is being
edited
Article â€¢ 07/21/2022


Excel.run has an overload that takes in a Excel.RunOptions object. This contains a set of
properties that affect platform behavior when the function runs. The following property
is currently supported.

      delayForCellEdit : Determines whether Excel delays the batch request until the
      user exits cell edit mode. When true , the batch request is delayed and runs when
      the user exits cell edit mode. When false , the batch request automatically fails if
      the user is in cell edit mode (causing an error to reach the user). The default
      behavior with no delayForCellEdit property specified is equivalent to when it is
      false .


  JavaScript


  await Excel.run({ delayForCellEdit: true }, async (context) => { ... });
 Work with multiple ranges
simultaneously in Excel add-ins
Article â€¢ 03/22/2022


The Excel JavaScript library enables your add-in to perform operations, and set
properties, on multiple ranges simultaneously. The ranges do not have to be
contiguous. In addition to making your code simpler, this way of setting a property runs
much faster than setting the same property individually for each of the ranges.



RangeAreas
A set of (possibly discontiguous) ranges is represented by a RangeAreas object. It has
properties and methods similar to the Range type (many with the same, or similar,
names), but adjustments have been made to:

      The data types for properties and the behavior of the setters and getters.
      The data types of method parameters and the method behaviors.
      The data types of method return values.

Some examples:

      RangeAreas has an address property that returns a comma-delimited string of
      range addresses, instead of just one address as with the Range.address property.
      RangeAreas has a dataValidation property that returns a DataValidation object

      that represents the data validation of all the ranges in the RangeAreas , if it is
      consistent. The property is null if identical DataValidation objects are not applied
      to all the all the ranges in the RangeAreas . This is a general, but not universal,
      principle with the RangeAreas object: If a property does not have consistent values
      on all the all the ranges in the RangeAreas , then it is null . See Read properties of
      RangeAreas for more information and some exceptions.
      RangeAreas.cellCount gets the total number of cells in all the ranges in the
      RangeAreas .

      RangeAreas.calculate recalculates the cells of all the ranges in the RangeAreas .

      RangeAreas.getEntireColumn and RangeAreas.getEntireRow return another
      RangeAreas object that represents all of the columns (or rows) in all the ranges in

      the RangeAreas . For example, if the RangeAreas represents "A1:C4" and "F14:L15",
      then RangeAreas.getEntireColumn returns a RangeAreas object that represents
      "A:C" and "F:L".
      RangeAreas.copyFrom can take either a Range or a RangeAreas parameter

     representing the source ranges of the copy operation.


Complete list of Range members that are also available
on RangeAreas

Properties
Be familiar with Read properties of RangeAreas before you write code that reads any
properties listed. There are subtleties to what gets returned.

     address

     addressLocal
     cellCount

     conditionalFormats

     context
     dataValidation

     format
     isEntireColumn

     isEntireRow

     style
     worksheet



Methods
     calculate()

     clear()
     convertDataTypeToText()

     convertToLinkedDataType()

     copyFrom()
     getEntireColumn()

     getEntireRow()
     getIntersection()

     getIntersectionOrNullObject()

     getOffsetRange() (named getOffsetRangeAreas on the RangeAreas object)
     getSpecialCells()

     getSpecialCellsOrNullObject()
     getTables()
       getUsedRange() (named getUsedRangeAreas on the RangeAreas object)
      getUsedRangeOrNullObject() (named getUsedRangeAreasOrNullObject on the

      RangeAreas object)
      load()

      set()

      setDirty()
      toJSON()

      track()
      untrack()



RangeArea-specific properties and methods
The RangeAreas type has some properties and methods that are not on the Range
object. The following is a selection of them.

      areas : A RangeCollection object that contains all of the ranges represented by the

      RangeAreas object. The RangeCollection object is also new and is similar to other

     Excel collection objects. It has an items property which is an array of Range objects
     representing the ranges.
      areaCount : The total number of ranges in the RangeAreas .

      getOffsetRangeAreas : Works just like Range.getOffsetRange, except that a

      RangeAreas is returned and it contains ranges that are each offset from one of the

     ranges in the original RangeAreas .



Create RangeAreas
You can create RangeAreas object in two basic ways:

     Call Worksheet.getRanges() and pass it a string with comma-delimited range
     addresses. If any range you want to include has been made into a NamedItem, you
     can include the name, instead of the address, in the string.
     Call Workbook.getSelectedRanges() . This method returns a RangeAreas representing
     all the ranges that are selected on the currently active worksheet.

Once you have a RangeAreas object, you can create others using the methods on the
object that return RangeAreas such as getOffsetRangeAreas and getIntersection .


  ï¼— Note
   You cannot directly add additional ranges to a RangeAreas object. For example, the
  collection in RangeAreas.areas does not have an add method.



  ï¼’ Warning

  Do not attempt to directly add or delete members of the the
  RangeAreas.areas.items array. This will lead to undesirable behavior in your code.

  For example, it is possible to push an additional Range object onto the array, but
  doing so will cause errors because RangeAreas properties and methods behave as if
  the new item isn't there. For example, the areaCount property does not include
  ranges pushed in this way, and the RangeAreas.getItemAt(index) throws an error if
  index is larger than areasCount-1 . Similarly, deleting a Range object in the

  RangeAreas.areas.items array by getting a reference to it and calling its
  Range.delete method causes bugs: although the Range object is deleted, the

  properties and methods of the parent RangeAreas object behave, or try to, as if it is
  still in existence. For example, if your code calls RangeAreas.calculate , Office will
  try to calculate the range, but will error because the range object is gone.




Set properties on multiple ranges
Setting a property on a RangeAreas object sets the corresponding property on all the
ranges in the RangeAreas.areas collection.

The following is an example of setting a property on multiple ranges. The function
highlights the ranges F3:F5 and H3:H5.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getActiveWorksheet();
      let rangeAreas = sheet.getRanges("F3:F5, H3:H5");
      rangeAreas.format.fill.color = "pink";

        await context.sync();
  });



This example applies to scenarios in which you can hard code the range addresses that
you pass to getRanges or easily calculate them at runtime. Some of the scenarios in
which this would be true include:
      The code runs in the context of a known template.
     The code runs in the context of imported data where the schema of the data is
     known.



Get special cells from multiple ranges
The getSpecialCells and getSpecialCellsOrNullObject methods on the RangeAreas
object work analogously to methods of the same name on the Range object. These
methods return the cells with the specified characteristic from all of the ranges in the
RangeAreas.areas collection. For more details on special cells, see Find special cells

within a range.

When calling the getSpecialCells or getSpecialCellsOrNullObject method on a
RangeAreas object:


     If you pass Excel.SpecialCellType.sameConditionalFormat as the first parameter,
     the method returns all cells with the same conditional formatting as the upper-
     leftmost cell in the first range in the RangeAreas.areas collection.
     If you pass Excel.SpecialCellType.sameDataValidation as the first parameter, the
     method returns all cells with the same data validation rule as the upper-leftmost
     cell in the first range in the RangeAreas.areas collection.



Read properties of RangeAreas
Reading property values of RangeAreas requires care, because a given property may
have different values for different ranges within the RangeAreas . The general rule is that
if a consistent value can be returned it will be returned. For example, in the following
code, the RGB code for pink ( #FFC0CB ) and true will be logged to the console because
both the ranges in the RangeAreas object have a pink fill and both are entire columns.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getActiveWorksheet();

       // The ranges are the F column and the H column.
       let rangeAreas = sheet.getRanges("F:F, H:H");
       rangeAreas.format.fill.color = "pink";

       rangeAreas.load("format/fill/color, isEntireColumn");
       await context.sync();

       console.log(rangeAreas.format.fill.color); // #FFC0CB
         console.log(rangeAreas.isEntireColumn); // true
  });



Things get more complicated when consistency isn't possible. The behavior of
RangeAreas properties follows these three principles:


     A boolean property of a RangeAreas object returns false unless the property is
     true for all the member ranges.
     Non-boolean properties, with the exception of the address property, return null
     unless the corresponding property on all the member ranges has the same value.
     The address property returns a comma-delimited string of the addresses of the
     member ranges.

For example, the following code creates a RangeAreas in which only one range is an
entire column and only one is filled with pink. The console will show null for the fill
color, false for the isEntireRow property, and "Sheet1!F3:F5, Sheet1!H:H" (assuming
the sheet name is "Sheet1") for the address property.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getActiveWorksheet();
      let rangeAreas = sheet.getRanges("F3:F5, H:H");

        let pinkColumnRange = sheet.getRange("H:H");
        pinkColumnRange.format.fill.color = "pink";

        rangeAreas.load("format/fill/color, isEntireColumn, address");
        await context.sync();

        console.log(rangeAreas.format.fill.color); // null
        console.log(rangeAreas.isEntireColumn); // false
        console.log(rangeAreas.address); // "Sheet1!F3:F5, Sheet1!H:H"
  });

   ï¼– Collaborate with us on
   GitHub                                 Office Add-ins feedback
 The source for this content can   Office Add-ins is an open source project.
be found on GitHub, where you     Select a link to provide feedback:
can also create and review
issues and pull requests. For     î¯¨ Open a documentation issue
more information, see our
contributor guide.                î´• Provide product feedback
 Work with shapes using the Excel
JavaScript API
Article â€¢ 07/19/2022


Excel defines shapes as any object that sits on the drawing layer of Excel. That means
anything outside of a cell is a shape. This article describes how to use geometric shapes,
lines, and images in conjunction with the Shape and ShapeCollection APIs. Charts are
covered in their own article, Work with charts using the Excel JavaScript API.

The following image shows shapes which form a thermometer.




Create shapes
Shapes are created through and stored in a worksheet's shape collection
( Worksheet.shapes ). ShapeCollection has several .add* methods for this purpose. All
shapes have names and IDs generated for them when they are added to the collection.
These are the name and id properties, respectively. name can be set by your add-in for
easy retrieval with the ShapeCollection.getItem(name) method.

The following types of shapes are added using the associated method.

 Shape          Add Method          Signature

 Geometric      addGeometricShape   addGeometricShape(geometricShapeType:
 Shape                              Excel.GeometricShapeType): Excel.Shape


 Image          addImage            addImage(base64ImageString: string): Excel.Shape
 (either JPEG
 or PNG)

 Line           addLine             addLine(startLeft: number, startTop: number, endLeft:
                                    number, endTop: number, connectorType?:
                                    Excel.ConnectorType): Excel.Shape
  Shape         Add Method          Signature

 SVG           addSvg              addSvg(xml: string): Excel.Shape


 Text Box      addTextBox          addTextBox(text?: string): Excel.Shape




Geometric shapes
A geometric shape is created with ShapeCollection.addGeometricShape . That method
takes a GeometricShapeType enum as an argument.

The following code sample creates a 150x150-pixel rectangle named "Square" that is
positioned 100 pixels from the top and left sides of the worksheet.

  JavaScript


  // This sample creates a rectangle positioned 100 pixels from the top and
  left sides
  // of the worksheet and is 150x150 pixels.
  await Excel.run(async (context) => {
      let shapes = context.workbook.worksheets.getItem("MyWorksheet").shapes;

      let rectangle =
  shapes.addGeometricShape(Excel.GeometricShapeType.rectangle);
      rectangle.left = 100;
      rectangle.top = 100;
      rectangle.height = 150;
      rectangle.width = 150;
      rectangle.name = "Square";

        await context.sync();
  });




Images
JPEG, PNG, and SVG images can be inserted into a worksheet as shapes. The
ShapeCollection.addImage method takes a base64-encoded string as an argument. This
is either a JPEG or PNG image in string form. ShapeCollection.addSvg also takes in a
string, though this argument is XML that defines the graphic.

The following code sample shows an image file being loaded by a FileReader     as a
string. The string has the metadata "base64," removed before the shape is created.

  JavaScript
   // This sample creates an image as a Shape object in the worksheet.
  let myFile = document.getElementById("selectedFile");
  let reader = new FileReader();

  reader.onload = (event) => {
      Excel.run(function (context) {
          let startIndex = reader.result.toString().indexOf("base64,");
          let myBase64 = reader.result.toString().substr(startIndex + 7);
          let sheet = context.workbook.worksheets.getItem("MyWorksheet");
          let image = sheet.shapes.addImage(myBase64);
          image.name = "Image";
          return context.sync();
      }).catch(errorHandlerFunction);
  };

  // Read in the image file as a data URL.
  reader.readAsDataURL(myFile.files[0]);




Lines
A line is created with ShapeCollection.addLine . That method needs the left and top
margins of the line's start and end points. It also takes a ConnectorType enum to specify
how the line contorts between endpoints. The following code sample creates a straight
line on the worksheet.

  JavaScript


  // This sample creates a straight line from [200,50] to [300,150] on the
  worksheet.
  await Excel.run(async (context) => {
      let shapes = context.workbook.worksheets.getItem("MyWorksheet").shapes;
      let line = shapes.addLine(200, 50, 300, 150,
  Excel.ConnectorType.straight);
      line.name = "StraightLine";
      await context.sync();
  });



Lines can be connected to other Shape objects. The connectBeginShape and
connectEndShape methods attach the beginning and ending of a line to shapes at the

specified connection points. The locations of these points vary by shape, but the
Shape.connectionSiteCount can be used to ensure your add-in does not connect to a
point that's out-of-bounds. A line is disconnected from any attached shapes using the
disconnectBeginShape and disconnectEndShape methods.


The following code sample connects the "MyLine" line to two shapes named
"LeftShape" and "RightShape".
   JavaScript


  // This sample connects a line between two shapes at connection points '0'
  and '3'.
  await Excel.run(async (context) => {
      let shapes = context.workbook.worksheets.getItem("MyWorksheet").shapes;
      let line = shapes.getItem("MyLine").line;
      line.connectBeginShape(shapes.getItem("LeftShape"), 0);
      line.connectEndShape(shapes.getItem("RightShape"), 3);
      await context.sync();
  });




Move and resize shapes
Shapes sit on top of the worksheet. Their placement is defined by the left and top
property. These act as margins from worksheet's respective edges, with [0, 0] being the
upper-left corner. These can either be set directly or adjusted from their current position
with the incrementLeft and incrementTop methods. How much a shape is rotated from
the default position is also established in this manner, with the rotation property being
the absolute amount and the incrementRotation method adjusting the existing rotation.

A shape's depth relative to other shapes is defined by the zorderPosition property. This
is set using the setZOrder method, which takes a ShapeZOrder. setZOrder adjusts the
ordering of the current shape relative to the other shapes.

Your add-in has a couple options for changing the height and width of shapes. Setting
either the height or width property changes the specified dimension without changing
the other dimension. The scaleHeight and scaleWidth adjust the shape's respective
dimensions relative to either the current or original size (based on the value of the
provided ShapeScaleType). An optional ShapeScaleFrom parameter specifies from where
the shape scales (top-left corner, middle, or bottom-right corner). If the
lockAspectRatio property is true , the scale methods maintain the shape's current

aspect ratio by also adjusting the other dimension.


  ï¼— Note

  Direct changes to the height and width properties only affect that property,
  regardless of the lockAspectRatio property's value.


The following code sample shows a shape being scaled to 1.25 times its original size and
rotated 30 degrees.
   JavaScript


  // In this sample, the shape "Octagon" is rotated 30 degrees clockwise
  // and scaled 25% larger, with the upper-left corner remaining in place.
  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("MyWorksheet");

        let shape = sheet.shapes.getItem("Octagon");
        shape.incrementRotation(30);
        shape.lockAspectRatio = true;
        shape.scaleWidth(
            1.25,
            Excel.ShapeScaleType.currentSize,
            Excel.ShapeScaleFrom.scaleFromTopLeft);

        await context.sync();
  });




Text in shapes
Geometric Shapes can contain text. Shapes have a textFrame property of type
TextFrame. The TextFrame object manages the text display options (such as margins and
text overflow). TextFrame.textRange is a TextRange object with the text content and font
settings.

The following code sample creates a geometric shape named "Wave" with the text
"Shape Text". It also adjusts the shape and text colors, as well as sets the text's
horizontal alignment to the center.

  JavaScript


  // This sample creates a light-blue wave shape and adds the purple text
  "Shape text" to the center.
  await Excel.run(async (context) => {
      let shapes = context.workbook.worksheets.getItem("MyWorksheet").shapes;
      let wave = shapes.addGeometricShape(Excel.GeometricShapeType.wave);
      wave.left = 100;
      wave.top = 400;
      wave.height = 50;
      wave.width = 150;

        wave.name = "Wave";
        wave.fill.setSolidColor("lightblue");

      wave.textFrame.textRange.text = "Shape text";
      wave.textFrame.textRange.font.color = "purple";
      wave.textFrame.horizontalAlignment =
  Excel.ShapeTextHorizontalAlignment.center;
         await context.sync();
  });



The addTextBox method of ShapeCollection creates a GeometricShape of type Rectangle
with a white background and black text. This is the same as what is created by Excel's
Text Box button on the Insert tab. addTextBox takes a string argument to set the text of
the TextRange .

The following code sample shows the creation of a text box with the text "Hello!".

  JavaScript


  // This sample creates a text box with the text "Hello!" and sizes it
  appropriately.
  await Excel.run(async (context) => {
      let shapes = context.workbook.worksheets.getItem("MyWorksheet").shapes;
      let textbox = shapes.addTextBox("Hello!");
      textbox.left = 100;
      textbox.top = 100;
      textbox.height = 20;
      textbox.width = 45;
      textbox.name = "Textbox";
      await context.sync();
  });




Shape groups
Shapes can be grouped together. This allows a user to treat them as a single entity for
positioning, sizing, and other related tasks. A ShapeGroup is a type of Shape , so your
add-in treats the group as a single shape.

The following code sample shows three shapes being grouped together. The
subsequent code sample shows that shape group being moved to the right 50 pixels.

  JavaScript


  // This sample takes three previously-created shapes ("Square", "Pentagon",
  and "Octagon")
  // and groups them into a single ShapeGroup.
  await Excel.run(async (context) => {
      let shapes = context.workbook.worksheets.getItem("MyWorksheet").shapes;
      let square = shapes.getItem("Square");
      let pentagon = shapes.getItem("Pentagon");
      let octagon = shapes.getItem("Octagon");

        let shapeGroup = shapes.addGroup([square, pentagon, octagon]);
        shapeGroup.name = "Group";
         console.log("Shapes grouped");

        await context.sync();
  });

  // This sample moves the previously created shape group to the right by 50
  pixels.
  await Excel.run(async (context) => {
      let shapes = context.workbook.worksheets.getItem("MyWorksheet").shapes;
      let shapeGroup = shapes.getItem("Group");
      shapeGroup.incrementLeft(50);
      await context.sync();
  });




  ï¼‰ Important

  Individual shapes within the group are referenced through the ShapeGroup.shapes
  property, which is of type GroupShapeCollection. They are no longer accessible
  through the worksheet's shape collection after being grouped. As an example, if
  your worksheet had three shapes and they were all grouped together, the
  worksheet's shapes.getCount method would return a count of 1.




Export shapes as images
Any Shape object can be converted to an image. Shape.getAsImage returns base64-
encoded string. The image's format is specified as a PictureFormat enum passed to
getAsImage .


  JavaScript


  await Excel.run(async (context) => {
      let shapes = context.workbook.worksheets.getItem("MyWorksheet").shapes;
      let shape = shapes.getItem("Image");
      let stringResult = shape.getAsImage(Excel.PictureFormat.png);

        await context.sync();

      console.log(stringResult.value);
      // Instead of logging, your add-in may use the base64-encoded string to
  save the image as a file or insert it in HTML.
  });




Delete shapes
 Shapes are removed from the worksheet with the Shape object's delete method. No
other metadata is needed.

The following code sample deletes all the shapes from MyWorksheet.

  JavaScript


  // This deletes all the shapes from "MyWorksheet".
  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("MyWorksheet");
      let shapes = sheet.shapes;

      // We'll load all the shapes in the collection without loading their
  properties.
      shapes.load("items/$none");
      await context.sync();

        shapes.items.forEach(function (shape) {
            shape.delete();
        });

        await context.sync();
  });

This article provides code samples that show how to perform common tasks with tables
using the Excel JavaScript API. For the complete list of properties and methods that the
Table and TableCollection objects support, see Table Object (JavaScript API for Excel)

and TableCollection Object (JavaScript API for Excel).



Create a table
The following code sample creates a table in the worksheet named Sample. The table
has headers and contains four columns and seven rows of data. If the Excel application
where the code is running supports requirement set ExcelApi 1.2, the width of the
columns and height of the rows are set to best fit the current data in the table.


  ï¼— Note

  To specify a name for a table, you must first create the table and then set its name
  property, as shown in the following example.


  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      let expensesTable = sheet.tables.add("A1:D1", true /*hasHeaders*/);
      expensesTable.name = "ExpensesTable";

      expensesTable.getHeaderRowRange().values = [["Date", "Merchant",
  "Category", "Amount"]];

       expensesTable.rows.add(null /*add rows to the end of the table*/, [
           ["1/1/2017", "The Phone Company", "Communications", "$120"],
           ["1/2/2017", "Northwind Electric Cars", "Transportation", "$142"],
           ["1/5/2017", "Best For You Organics Company", "Groceries", "$27"],
           ["1/10/2017", "Coho Vineyard", "Restaurant", "$33"],
           ["1/11/2017", "Bellows College", "Education", "$350"],
           ["1/15/2017", "Trey Research", "Other", "$135"],
           ["1/15/2017", "Best For You Organics Company", "Groceries", "$97"]
       ]);

       if (Office.context.requirements.isSetSupported("ExcelApi", "1.2")) {
           sheet.getUsedRange().format.autofitColumns();
           sheet.getUsedRange().format.autofitRows();
         }

        sheet.activate();

        await context.sync();
  });




New table




Add rows to a table
The following code sample adds seven new rows to the table named ExpensesTable
within the worksheet named Sample. The index parameter of the add method is set to
null , which specifies that the rows be added after the existing rows in the table. The

alwaysInsert parameter is set to true , which indicates that the new rows be inserted
into the table, not below the table. The width of the columns and height of the rows are
then set to best fit the current data in the table.


  ï¼— Note

  The index property of a TableRow object indicates the index number of the row
  within the rows collection of the table. A TableRow object does not contain an id
  property that can be used as a unique key to identify the row.


  JavaScript


  // This code sample shows how to add rows to a table that already exists
  // on a worksheet named Sample.
  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      let expensesTable = sheet.tables.getItem("ExpensesTable");

        expensesTable.rows.add(
            null, // index, Adds rows to the end of the table.
              [
                 ["1/16/2017", "THE PHONE COMPANY", "Communications", "$120"],
                 ["1/20/2017", "NORTHWIND ELECTRIC CARS", "Transportation",
  "$142"],
                 ["1/20/2017", "BEST FOR YOU ORGANICS COMPANY", "Groceries",
  "$27"],
                 ["1/21/2017", "COHO VINEYARD", "Restaurant", "$33"],
                 ["1/25/2017", "BELLOWS COLLEGE", "Education", "$350"],
                 ["1/28/2017", "TREY RESEARCH", "Other", "$135"],
                 ["1/31/2017", "BEST FOR YOU ORGANICS COMPANY", "Groceries",
  "$97"]
          ],
          true, // alwaysInsert, Specifies that the new rows be inserted into
  the table.
      );

        sheet.getUsedRange().format.autofitColumns();
        sheet.getUsedRange().format.autofitRows();

        await context.sync();
  });




Table with new rows




Add a column to a table
These examples show how to add a column to a table. The first example populates the
new column with static values; the second example populates the new column with
formulas.
   ï¼— Note

  The index property of a TableColumn object indicates the index number of the
  column within the columns collection of the table. The id property of a
  TableColumn object contains a unique key that identifies the column.



Add a column that contains static values
The following code sample adds a new column to the table named ExpensesTable
within the worksheet named Sample. The new column is added after all existing
columns in the table and contains a header ("Day of the Week") as well as data to
populate the cells in the column. The width of the columns and height of the rows are
then set to best fit the current data in the table.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      let expensesTable = sheet.tables.getItem("ExpensesTable");

        expensesTable.columns.add(null /*add columns to the end of the table*/,
  [
               ["Day of the Week"],
               ["Saturday"],
               ["Friday"],
               ["Monday"],
               ["Thursday"],
               ["Sunday"],
               ["Saturday"],
               ["Monday"]
        ]);

        sheet.getUsedRange().format.autofitColumns();
        sheet.getUsedRange().format.autofitRows();

        await context.sync();
  });




Table with new column
 Add a column that contains formulas
The following code sample adds a new column to the table named ExpensesTable
within the worksheet named Sample. The new column is added to the end of the table,
contains a header ("Type of the Day"), and uses a formula to populate each data cell in
the column. The width of the columns and height of the rows are then set to best fit the
current data in the table.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      let expensesTable = sheet.tables.getItem("ExpensesTable");

        expensesTable.columns.add(null /*add columns to the end of the table*/,
  [
          ["Type of the Day"],
          ['=IF(OR((TEXT([DATE], "dddd") = "Saturday"), (TEXT([DATE], "dddd")
  = "Sunday")), "Weekend", "Weekday")'],
          ['=IF(OR((TEXT([DATE], "dddd") = "Saturday"), (TEXT([DATE], "dddd")
  = "Sunday")), "Weekend", "Weekday")'],
          ['=IF(OR((TEXT([DATE], "dddd") = "Saturday"), (TEXT([DATE], "dddd")
  = "Sunday")), "Weekend", "Weekday")'],
          ['=IF(OR((TEXT([DATE], "dddd") = "Saturday"), (TEXT([DATE], "dddd")
  = "Sunday")), "Weekend", "Weekday")'],
          ['=IF(OR((TEXT([DATE], "dddd") = "Saturday"), (TEXT([DATE], "dddd")
  = "Sunday")), "Weekend", "Weekday")'],
          ['=IF(OR((TEXT([DATE], "dddd") = "Saturday"), (TEXT([DATE], "dddd")
  = "Sunday")), "Weekend", "Weekday")'],
          ['=IF(OR((TEXT([DATE], "dddd") = "Saturday"), (TEXT([DATE], "dddd")
  = "Sunday")), "Weekend", "Weekday")']
      ]);

        sheet.getUsedRange().format.autofitColumns();
        sheet.getUsedRange().format.autofitRows();

        await context.sync();
  });
 Table with new calculated column




Resize a table
Your add-in can resize a table without adding data to the table or changing cell values.
To resize a table, use the Table.resize method. The following code sample shows how to
resize a table. This code sample uses the ExpensesTable from the Create a table section
earlier in this article and sets the new range of the table to A1:D20.

  JavaScript


  await Excel.run(async (context) => {
      // Retrieve the worksheet and a table on that worksheet.
      let sheet = context.workbook.worksheets.getItem("Sample");
      let expensesTable = sheet.tables.getItem("ExpensesTable");

        // Resize the table.
        expensesTable.resize("A1:D20");

        await context.sync();
  });




  ï¼‰ Important

  The new range of the table must overlap with the original range, and the headers
  (or the top of the table) must be in the same row.



Table after resize
 Update column name
The following code sample updates the name of the first column in the table to
Purchase date. The width of the columns and height of the rows are then set to best fit
the current data in the table.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");

       let expensesTable = sheet.tables.getItem("ExpensesTable");
       expensesTable.columns.load("items");

       await context.sync();

       expensesTable.columns.items[0].name = "Purchase date";

       sheet.getUsedRange().format.autofitColumns();
       sheet.getUsedRange().format.autofitRows();
         await context.sync();
  });




Table with new column name




Get data from a table
The following code sample reads data from a table named ExpensesTable in the
worksheet named Sample and then outputs that data below the table in the same
worksheet.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      let expensesTable = sheet.tables.getItem("ExpensesTable");

        // Get data from the header row.
        let headerRange = expensesTable.getHeaderRowRange().load("values");

        // Get data from the table.
        let bodyRange = expensesTable.getDataBodyRange().load("values");

      // Get data from a single column.
      let columnRange =
  expensesTable.columns.getItem("Merchant").getDataBodyRange().load("values");

        // Get data from a single row.
        let rowRange = expensesTable.rows.getItemAt(1).load("values");

        // Sync to populate proxy objects with data from Excel.
        await context.sync();

        let headerValues = headerRange.values;
        let bodyValues = bodyRange.values;
        let merchantColumnValues = columnRange.values;
        let secondRowValues = rowRange.values;
        // Write data from table back to the sheet
       sheet.getRange("A11:A11").values = [["Results"]];
       sheet.getRange("A13:D13").values = headerValues;
       sheet.getRange("A14:D20").values = bodyValues;
       sheet.getRange("B23:B29").values = merchantColumnValues;
       sheet.getRange("A32:D32").values = secondRowValues;

       // Sync to update the sheet in Excel.
       await context.sync();
 });




Table and data output




Detect data changes
 Your add-in may need to react to users changing the data in a table. To detect these
changes, you can register an event handler for the onChanged event of a table. Event
handlers for the onChanged event receive a TableChangedEventArgs object when the
event fires.

The TableChangedEventArgs object provides information about the changes and the
source. Since onChanged fires when either the format or value of the data changes, it can
be useful to have your add-in check if the values have actually changed. The details
property encapsulates this information as a ChangedEventDetail. The following code
sample shows how to display the before and after values and types of a cell that has
been changed.

  JavaScript


  // This function would be used as an event handler for the Table.onChanged
  event.
  async function onTableChanged(eventArgs) {
      await Excel.run(async (context) => {
          let details = eventArgs.details;
          let address = eventArgs.address;

          // Print the before and after types and values to the console.
          console.log(`Change at ${address}: was ${details.valueBefore}
  (${details.valueTypeBefore}),`
              + ` now is ${details.valueAfter}(${details.valueTypeAfter})`);
          await context.sync();
      });
  }




Sort data in a table
The following code sample sorts table data in descending order according to the values
in the fourth column of the table.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      let expensesTable = sheet.tables.getItem("ExpensesTable");

      // Queue a command to sort data by the fourth column of the table
  (descending).
      let sortRange = expensesTable.getDataBodyRange();
      sortRange.sort.apply([
          {
              key: 3,
              ascending: false,
                },
        ]);

        // Sync to run the queued command in Excel.
        await context.sync();
  });




Table data sorted by Amount (descending)




When data is sorted in a worksheet, an event notification fires. To learn more about sort-
related events and how your add-in can register event handlers to respond to such
events, see Handle sorting events.



Apply filters to a table
The following code sample applies filters to the Amount column and the Category
column within a table. As a result of the filters, only rows where Category is one of the
specified values and Amount is below the average value for all rows is shown.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      let expensesTable = sheet.tables.getItem("ExpensesTable");

        // Queue a command to apply a filter on the Category column.
        let categoryFilter = expensesTable.columns.getItem("Category").filter;
        categoryFilter.apply({
          filterOn: Excel.FilterOn.values,
          values: ["Restaurant", "Groceries"]
        });

        // Queue a command to apply a filter on the Amount column.
        let amountFilter = expensesTable.columns.getItem("Amount").filter;
        amountFilter.apply({
          filterOn: Excel.FilterOn.dynamic,
          dynamicCriteria: Excel.DynamicFilterCriteria.belowAverage
        });
         // Sync to run the queued commands in Excel.
        await context.sync();
  });




Table data with filters applied for Category and Amount




Clear table filters
The following code sample clears any filters currently applied on the table.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      let expensesTable = sheet.tables.getItem("ExpensesTable");

        expensesTable.clearFilters();

        await context.sync();
  });




Table data with no filters applied




Get the visible range from a filtered table
The following code sample gets a range that contains data only for cells that are
currently visible within the specified table, and then writes the values of that range to
 the console. You can use the getVisibleView() method as shown below to get the
visible contents of a table whenever column filters have been applied.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      let expensesTable = sheet.tables.getItem("ExpensesTable");

        let visibleRange = expensesTable.getDataBodyRange().getVisibleView();
        visibleRange.load("values");

        await context.sync();
        console.log(visibleRange.values);
  });




AutoFilter
An add-in can use the table's AutoFilter object to filter data. An AutoFilter object is the
entire filter structure of a table or range. All of the filter operations discussed earlier in
this article are compatible with the auto-filter. The single access point does make it
easier to access and manage multiple filters.

The following code sample shows the same data filtering as the earlier code sample, but
done entirely through the auto-filter.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      let expensesTable = sheet.tables.getItem("ExpensesTable");

        expensesTable.autoFilter.apply(expensesTable.getRange(), 2, {
            filterOn: Excel.FilterOn.values,
            values: ["Restaurant", "Groceries"]
        });
        expensesTable.autoFilter.apply(expensesTable.getRange(), 3, {
            filterOn: Excel.FilterOn.dynamic,
            dynamicCriteria: Excel.DynamicFilterCriteria.belowAverage
        });

        await context.sync();
  });



An AutoFilter can also be applied to a range at the worksheet level. See Work with
worksheets using the Excel JavaScript API for more information.
 Format a table
The following code sample applies formatting to a table. It specifies different fill colors
for the header row of the table, the body of the table, the second row of the table, and
the first column of the table. For information about the properties you can use to specify
format, see RangeFormat Object (JavaScript API for Excel).

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      let expensesTable = sheet.tables.getItem("ExpensesTable");

      expensesTable.getHeaderRowRange().format.fill.color = "#C70039";
      expensesTable.getDataBodyRange().format.fill.color = "#DAF7A6";
      expensesTable.rows.getItemAt(1).getRange().format.fill.color =
  "#FFC300";
      expensesTable.columns.getItemAt(0).getDataBodyRange().format.fill.color
  = "#FFA07A";

        await context.sync();
  });




Table after formatting is applied




Convert a range to a table
The following code sample creates a range of data and then converts that range to a
table. The width of the columns and height of the rows are then set to best fit the
current data in the table.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
        // Define values for the range.
       let values = [["Product", "Qtr1", "Qtr2", "Qtr3", "Qtr4"],
       ["Frames", 5000, 7000, 6544, 4377],
       ["Saddles", 400, 323, 276, 651],
       ["Brake levers", 12000, 8766, 8456, 9812],
       ["Chains", 1550, 1088, 692, 853],
       ["Mirrors", 225, 600, 923, 544],
       ["Spokes", 6005, 7634, 4589, 8765]];

       // Create the range.
       let range = sheet.getRange("A1:E7");
       range.values = values;

       sheet.getUsedRange().format.autofitColumns();
       sheet.getUsedRange().format.autofitRows();

       sheet.activate();

       // Convert the range to a table.
       let expensesTable = sheet.tables.add('A1:E7', true);
       expensesTable.name = "ExpensesTable";

       await context.sync();
 });




Data in the range (before the range is converted to a
table)




Data in the table (after the range is converted to a table)
 Import JSON data into a table
The following code sample creates a table in the worksheet named Sample and then
populates the table by using a JSON object that defines two rows of data. The width of
the columns and height of the rows are then set to best fit the current data in the table.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");

      let expensesTable = sheet.tables.add("A1:D1", true /*hasHeaders*/);
      expensesTable.name = "ExpensesTable";
      expensesTable.getHeaderRowRange().values = [["Date", "Merchant",
  "Category", "Amount"]];

        let transactions = [
           {
             "DATE": "1/1/2017",
             "MERCHANT": "The Phone Company",
             "CATEGORY": "Communications",
             "AMOUNT": "$120"
           },
           {
             "DATE": "1/1/2017",
             "MERCHANT": "Southridge Video",
             "CATEGORY": "Entertainment",
             "AMOUNT": "$40"
           }
        ];

        let newData = transactions.map(item =>
            [item.DATE, item.MERCHANT, item.CATEGORY, item.AMOUNT]);

        expensesTable.rows.add(null, newData);

        sheet.getUsedRange().format.autofitColumns();
        sheet.getUsedRange().format.autofitRows();

        sheet.activate();

        await context.sync();
  });

This article provides code samples that show how to perform common tasks with
workbooks using the Excel JavaScript API. For the complete list of properties and
methods that the Workbook object supports, see Workbook Object (JavaScript API for
Excel). This article also covers workbook-level actions performed through the
Application object.

The Workbook object is the entry point for your add-in to interact with Excel. It
maintains collections of worksheets, tables, PivotTables, and more, through which Excel
data is accessed and changed. The WorksheetCollection object gives your add-in access
to all the workbook's data through individual worksheets. Specifically, it lets your add-in
add worksheets, navigate among them, and assign handlers to worksheet events. The
article Work with worksheets using the Excel JavaScript API describes how to access and
edit worksheets.



Get the active cell or selected range
The Workbook object contains two methods that get a range of cells the user or add-in
has selected: getActiveCell() and getSelectedRange() . getActiveCell() gets the active
cell from the workbook as a Range object. The following example shows a call to
getActiveCell() , followed by the cell's address being printed to the console.


  JavaScript


  await Excel.run(async (context) => {
      let activeCell = context.workbook.getActiveCell();
      activeCell.load("address");
      await context.sync();

        console.log("The active cell is " + activeCell.address);
  });



The getSelectedRange() method returns the currently selected single range. If multiple
ranges are selected, an InvalidSelection error is thrown. The following example shows a
call to getSelectedRange() that then sets the range's fill color to yellow.

  JavaScript
   await Excel.run(async (context) => {
      let range = context.workbook.getSelectedRange();
      range.format.fill.color = "yellow";
      await context.sync();
  });




Create a workbook
Your add-in can create a new workbook, separate from the Excel instance in which the
add-in is currently running. The Excel object has the createWorkbook method for this
purpose. When this method is called, the new workbook is immediately opened and
displayed in a new instance of Excel. Your add-in remains open and running with the
previous workbook.

  JavaScript


  Excel.createWorkbook();



The createWorkbook method can also create a copy of an existing workbook. The
method accepts a base64-encoded string representation of an .xlsx file as an optional
parameter. The resulting workbook will be a copy of that file, assuming the string
argument is a valid .xlsx file.

You can get your add-in's current workbook as a base64-encoded string by using file
slicing. The FileReader    class can be used to convert a file into the required base64-
encoded string, as demonstrated in the following example.

  JavaScript


  // Retrieve the external workbook file and set up a `FileReader` object.
  let myFile = document.getElementById("file");
  let reader = new FileReader();

  reader.onload = (function (event) {
      Excel.run(function (context) {
          // Remove the metadata before the base64-encoded string.
          let startIndex = reader.result.toString().indexOf("base64,");
          let externalWorkbook = reader.result.toString().substr(startIndex +
  7);

               Excel.createWorkbook(externalWorkbook);
               return context.sync();
        });
  });
   // Read the file as a data URL so we can parse the base64-encoded string.
  reader.readAsDataURL(myFile.files[0]);




Insert a copy of an existing workbook into the current
one
The previous example shows a new workbook being created from an existing workbook.
You can also copy some or all of an existing workbook into the one currently associated
with your add-in. A Workbook has the insertWorksheetsFromBase64 method to insert
copies of the target workbook's worksheets into itself. The other workbook's file is
passed as a base64-encoded string, just like the Excel.createWorkbook call.

  TypeScript


  insertWorksheetsFromBase64(base64File: string, options?:
  Excel.InsertWorksheetOptions): OfficeExtension.ClientResult<string[]>;




  ï¼‰ Important

  The insertWorksheetsFromBase64 method is supported for Excel on the web, on
  Windows, and on Mac. It's not supported for iOS. Additionally, in Excel on the web,
  this method doesn't support source worksheets with PivotTable, Chart, Comment,
  or Slicer elements. If those objects are present, the insertWorksheetsFromBase64
  method returns the UnsupportedFeature error in Excel on the web.


The following code sample shows how to insert worksheets from another workbook into
the current workbook. This code sample first processes a workbook file with a FileReader
object and extracts a base64-encoded string, and then it inserts this base64-encoded
string into the current workbook. The new worksheets are inserted after the worksheet
named Sheet1. Note that [] is passed as the parameter for the
InsertWorksheetOptions.sheetNamesToInsert property. This means that all the
worksheets from the target workbook are inserted into the current workbook.

  JavaScript


  // Retrieve the external workbook file and set up a `FileReader` object.
  let myFile = document.getElementById("file");
  let reader = new FileReader();

  reader.onload = (event) => {
      Excel.run((context) => {
          // Remove the metadata before the base64-encoded string.
                let startIndex = reader.result.toString().indexOf("base64,");
               let externalWorkbook = reader.result.toString().substr(startIndex +
  7);

               // Retrieve the current workbook.
               let workbook = context.workbook;

          // Set up the insert options.
          let options = {
              sheetNamesToInsert: [], // Insert all the worksheets from the
  source workbook.
              positionType: Excel.WorksheetPositionType.after, // Insert after
  the `relativeTo` sheet.
              relativeTo: "Sheet1" // The sheet relative to which the other
  worksheets will be inserted. Used with `positionType`.
          };

                // Insert the new worksheets into the current workbook.
                workbook.insertWorksheetsFromBase64(externalWorkbook, options);
                return context.sync();
        });
  };

  // Read the file as a data URL so we can parse the base64-encoded string.
  reader.readAsDataURL(myFile.files[0]);




Protect the workbook's structure
Your add-in can control a user's ability to edit the workbook's structure. The Workbook
object's protection property is a WorkbookProtection object with a protect() method.
The following example shows a basic scenario toggling the protection of the workbook's
structure.

  JavaScript


  await Excel.run(async (context) => {
      let workbook = context.workbook;
      workbook.load("protection/protected");
      await context.sync();

        if (!workbook.protection.protected) {
            workbook.protection.protect();
        }
  });



The protect method accepts an optional string parameter. This string represents the
password needed for a user to bypass protection and change the workbook's structure.
 Protection can also be set at the worksheet level to prevent unwanted data editing. For
more information, see the Data protection section of the Work with worksheets using
the Excel JavaScript API article.


  ï¼— Note

  For more information about workbook protection in Excel, see the Protect a
  workbook      article.




Access document properties
Workbook objects have access to the Office file metadata, which is known as the
document properties        . The Workbook object's properties property is a
DocumentProperties object that contains some of these metadata values. The following
example shows how to set the author property.

  JavaScript


  await Excel.run(async (context) => {
      let docProperties = context.workbook.properties;
      docProperties.author = "Alex";
      await context.sync();
  });



You can also define custom properties. The DocumentProperties object contains a
custom property that represents a collection of key-value pairs for user-defined

properties. For an example of setting custom properties, see the Custom XML data in
Excel and Word section of the Persist add-in state and settings article.



Access document settings
A workbook's settings are similar to the collection of custom properties. The difference
is settings are unique to a single Excel file and add-in pairing, whereas properties are
solely connected to the file. The following example shows how to create and access a
setting.

  JavaScript


  await Excel.run(async (context) => {
      let settings = context.workbook.settings;
      settings.add("NeedsReview", true);
      let needsReview = settings.getItem("NeedsReview");
         needsReview.load("value");

        await context.sync();
        console.log("Workbook needs review : " + needsReview.value);
  });




Access application culture settings
A workbook has language and culture settings that affect how certain data is displayed.
These settings can help localize data when your add-in's users are sharing workbooks
across different languages and cultures. Your add-in can use string parsing to localize
the format of numbers, dates, and times based on the system culture settings so that
each user sees data in their own culture's format.

Application.cultureInfo defines the system culture settings as a CultureInfo object.

This contains settings like the numerical decimal separator or the date format.

Some culture settings can be changed through the Excel UI     . The system settings are
preserved in the CultureInfo object. Any local changes are kept as Application-level
properties, such as Application.decimalSeparator .

The following sample changes the decimal separator character of a numerical string
from a ',' to the character used by the system settings.

  JavaScript


  // This will convert a number like "14,37" to "14.37"
  // (assuming the system decimal separator is ".").
  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      let decimalSource = sheet.getRange("B2");

        decimalSource.load("values");

  context.application.cultureInfo.numberFormat.load("numberDecimalSeparator");
      await context.sync();

        let systemDecimalSeparator =
            context.application.cultureInfo.numberFormat.numberDecimalSeparator;
        let oldDecimalString = decimalSource.values[0][0];

      // This assumes the input column is standardized to use "," as the
  decimal separator.
      let newDecimalString = oldDecimalString.replace(",",
  systemDecimalSeparator);

        let resultRange = sheet.getRange("C2");
        resultRange.values = [[newDecimalString]];
         resultRange.format.autofitColumns();
        await context.sync();
  });




Control calculation behavior

Set calculation mode
By default, Excel recalculates formula results whenever a referenced cell is changed. Your
add-in's performance may benefit from adjusting this calculation behavior. The
Application object has a calculationMode property of type CalculationMode . It can be
set to the following values.

      automatic : The default recalculation behavior where Excel calculates new formula

     results every time the relevant data is changed.
      automaticExceptTables : Same as automatic , except any changes made to values in

     tables are ignored.
      manual : Calculations only occur when the user or add-in requests them.



Set calculation type
The Application object provides a method to force an immediate recalculation.
Application.calculate(calculationType) starts a manual recalculation based on the

specified calculationType . The following values can be specified.

      full : Recalculate all formulas in all open workbooks, regardless of whether they

     have changed since the last recalculation.
      fullRebuild : Check dependent formulas, and then recalculate all formulas in all

     open workbooks, regardless of whether they have changed since the last
     recalculation.
      recalculate : Recalculate formulas that have changed (or been programmatically

     marked for recalculation) since the last calculation, and formulas dependent on
     them, in all active workbooks.


  ï¼— Note

  For more information about recalculation, see the Change formula recalculation,
  iteration, or precision      article.
 Temporarily suspend calculations
The Excel API also lets add-ins turn off calculations until RequestContext.sync() is called.
This is done with suspendApiCalculationUntilNextSync() . Use this method when your
add-in is editing large ranges without needing to access the data between edits.

  JavaScript


  context.application.suspendApiCalculationUntilNextSync();




Detect workbook activation
Your add-in can detect when a workbook is activated. A workbook becomes inactive
when the user switches focus to another workbook, to another application, or (in Excel
on the web) to another tab of the web browser. A workbook is activated when the user
returns focus to the workbook. The workbook activation can trigger callback functions in
your add-in, such as refreshing workbook data.

To detect when a workbook is activated, register an event handler for the onActivated
event of a workbook. Event handlers for the onActivated event receive a
WorkbookActivatedEventArgs object when the event fires.


  ï¼‰ Important

  The onActivated event doesn't detect when a workbook is opened. This event only
  detects when a user switches focus back to an already open workbook.


The following code sample shows how to register the onActivated event handler and
set up a callback function.

  JavaScript


  async function run() {
      await Excel.run(async (context) => {
          // Retrieve the workbook.
          let workbook = context.workbook;

               // Register the workbook activated event handler.
               workbook.onActivated.add(workbookActivated);
               await context.sync();
       });
  }

  async function workbookActivated(event) {
        await Excel.run(async (context) => {
           // Retrieve the workbook and load the name.
           let workbook = context.workbook;
           workbook.load("name");
           await context.sync();

               // Callback function for when the workbook is activated.
               console.log(`The workbook ${workbook.name} was activated.`);
       });
  }




Save the workbook
Workbook.save saves the workbook to persistent storage. The save method takes a

single, optional saveBehavior parameter that can be one of the following values.

      Excel.SaveBehavior.save (default): The file is saved without prompting the user to

      specify file name and save location. If the file has not been saved previously, it's
      saved to the default location. If the file has been saved previously, it's saved to the
      same location.
      Excel.SaveBehavior.prompt : If file has not been saved previously, the user will be

      prompted to specify file name and save location. If the file has been saved
      previously, it will be saved to the same location and the user will not be prompted.


  ï¼µ Caution

  If the user is prompted to save and cancels the operation, save throws an
  exception.


  JavaScript


  context.workbook.save(Excel.SaveBehavior.prompt);




Close the workbook
Workbook.close closes the workbook, along with add-ins that are associated with the

workbook (the Excel application remains open). The close method takes a single,
optional closeBehavior parameter that can be one of the following values.

      Excel.CloseBehavior.save (default): The file is saved before closing. If the file has

      not been saved previously, the user will be prompted to specify file name and save
     location.
     Excel.CloseBehavior.skipSave : The file is immediately closed, without saving. Any

    unsaved changes will be lost.

 JavaScript


 context.workbook.close(Excel.CloseBehavior.save);

  ï¼– Collaborate with us on
  GitHub                                Office Add-ins feedback
                                        Office Add-ins is an open source project.
  The source for this content can
  be found on GitHub, where you         Select a link to provide feedback:
  can also create and review
                                        î¯¨ Open a documentation issue
  issues and pull requests. For
  more information, see our
                                        î´• Provide product feedback
  contributor guide.
 Work with worksheets using the Excel
JavaScript API
Article â€¢ 07/21/2022


This article provides code samples that show how to perform common tasks with
worksheets using the Excel JavaScript API. For the complete list of properties and
methods that the Worksheet and WorksheetCollection objects support, see Worksheet
Object (JavaScript API for Excel) and WorksheetCollection Object (JavaScript API for
Excel).


  ï¼— Note

  The information in this article applies only to regular worksheets; it does not apply
  to "chart" sheets or "macro" sheets.




Get worksheets
The following code sample gets the collection of worksheets, loads the name property of
each worksheet, and writes a message to the console.

  JavaScript


  await Excel.run(async (context) => {
      let sheets = context.workbook.worksheets;
      sheets.load("items/name");

          await context.sync();

      if (sheets.items.length > 1) {
          console.log(`There are ${sheets.items.length} worksheets in the
  workbook:`);
      } else {
          console.log(`There is one worksheet in the workbook:`);
      }

          sheets.items.forEach(function (sheet) {
              console.log(sheet.name);
          });
  });




  ï¼— Note
   The id property of a worksheet uniquely identifies the worksheet in a given
  workbook and its value will remain the same even when the worksheet is renamed
  or moved. When a worksheet is deleted from a workbook in Excel on Mac, the id
  of the deleted worksheet may be reassigned to a new worksheet that is
  subsequently created.




Get the active worksheet
The following code sample gets the active worksheet, loads its name property, and
writes a message to the console.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getActiveWorksheet();
      sheet.load("name");

        await context.sync();
        console.log(`The active worksheet is "${sheet.name}"`);
  });




Set the active worksheet
The following code sample sets the active worksheet to the worksheet named Sample,
loads its name property, and writes a message to the console. If there is no worksheet
with that name, the activate() method throws an ItemNotFound error.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      sheet.activate();
      sheet.load("name");

        await context.sync();
        console.log(`The active worksheet is "${sheet.name}"`);
  });




Reference worksheets by relative position
These examples show how to reference a worksheet by its relative position.
 Get the first worksheet
The following code sample gets the first worksheet in the workbook, loads its name
property, and writes a message to the console.

  JavaScript


  await Excel.run(async (context) => {
      let firstSheet = context.workbook.worksheets.getFirst();
      firstSheet.load("name");

         await context.sync();
         console.log(`The name of the first worksheet is "${firstSheet.name}"`);
  });




Get the last worksheet
The following code sample gets the last worksheet in the workbook, loads its name
property, and writes a message to the console.

  JavaScript


  await Excel.run(async (context) => {
      let lastSheet = context.workbook.worksheets.getLast();
      lastSheet.load("name");

         await context.sync();
         console.log(`The name of the last worksheet is "${lastSheet.name}"`);
  });




Get the next worksheet
The following code sample gets the worksheet that follows the active worksheet in the
workbook, loads its name property, and writes a message to the console. If there is no
worksheet after the active worksheet, the getNext() method throws an ItemNotFound
error.

  JavaScript


  await Excel.run(async (context) => {
      let currentSheet = context.workbook.worksheets.getActiveWorksheet();
      let nextSheet = currentSheet.getNext();
      nextSheet.load("name");

         await context.sync();
       console.log(`The name of the sheet that follows the active worksheet is
  "${nextSheet.name}"`);
  });




Get the previous worksheet
The following code sample gets the worksheet that precedes the active worksheet in the
workbook, loads its name property, and writes a message to the console. If there is no
worksheet before the active worksheet, the getPrevious() method throws an
ItemNotFound error.


  JavaScript


  await Excel.run(async (context) => {
      let currentSheet = context.workbook.worksheets.getActiveWorksheet();
      let previousSheet = currentSheet.getPrevious();
      previousSheet.load("name");

      await context.sync();
      console.log(`The name of the sheet that precedes the active worksheet is
  "${previousSheet.name}"`);
  });




Add a worksheet
The following code sample adds a new worksheet named Sample to the workbook,
loads its name and position properties, and writes a message to the console. The new
worksheet is added after all existing worksheets.

  JavaScript


  await Excel.run(async (context) => {
      let sheets = context.workbook.worksheets;

       let sheet = sheets.add("Sample");
       sheet.load("name, position");

      await context.sync();
      console.log(`Added worksheet named "${sheet.name}" in position
  ${sheet.position}`);
  });




Copy an existing worksheet
 Worksheet.copy adds a new worksheet that is a copy of an existing worksheet. The new

worksheet's name will have a number appended to the end, in a manner consistent with
copying a worksheet through the Excel UI (for example, MySheet (2)). Worksheet.copy
can take two parameters, both of which are optional:

      positionType - A WorksheetPositionType enum specifying where in the workbook

     the new worksheet is to be added.
      relativeTo - If the positionType is Before or After , you need to specify a
     worksheet relative to which the new sheet is to be added (this parameter answers
     the question "Before or after what?").

The following code sample copies the current worksheet and inserts the new sheet
directly after the current worksheet.

  JavaScript


  await Excel.run(async (context) => {
      let myWorkbook = context.workbook;
      let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();
      let copiedSheet = sampleSheet.copy(Excel.WorksheetPositionType.after,
  sampleSheet);
      await context.sync();
  });




Delete a worksheet
The following code sample deletes the final worksheet in the workbook (as long as it's
not the only sheet in the workbook) and writes a message to the console.

  JavaScript


  await Excel.run(async (context) => {
      let sheets = context.workbook.worksheets;
      sheets.load("items/name");

        await context.sync();
        if (sheets.items.length === 1) {
            console.log("Unable to delete the only worksheet in the workbook");
        } else {
            let lastSheet = sheets.items[sheets.items.length - 1];

               console.log(`Deleting worksheet named "${lastSheet.name}"`);
               lastSheet.delete();

               await context.sync();
        }
  });
   ï¼— Note

  A worksheet with a visibility of "Very Hidden" cannot be deleted with the delete
  method. If you wish to delete the worksheet anyway, you must first change the
  visibility.




Rename a worksheet
The following code sample changes the name of the active worksheet to New Name.

  JavaScript


  await Excel.run(async (context) => {
      let currentSheet = context.workbook.worksheets.getActiveWorksheet();
      currentSheet.name = "New Name";

        await context.sync();
  });




Move a worksheet
The following code sample moves a worksheet from the last position in the workbook to
the first position in the workbook.

  JavaScript


  await Excel.run(async (context) => {
      let sheets = context.workbook.worksheets;
      sheets.load("items");
      await context.sync();

        let lastSheet = sheets.items[sheets.items.length - 1];
        lastSheet.position = 0;
        await context.sync();
  });




Set worksheet visibility
These examples show how to set the visibility of a worksheet.
 Hide a worksheet
The following code sample sets the visibility of worksheet named Sample to hidden,
loads its name property, and writes a message to the console.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      sheet.visibility = Excel.SheetVisibility.hidden;
      sheet.load("name");

        await context.sync();
        console.log(`Worksheet with name "${sheet.name}" is hidden`);
  });




Unhide a worksheet
The following code sample sets the visibility of worksheet named Sample to visible,
loads its name property, and writes a message to the console.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      sheet.visibility = Excel.SheetVisibility.visible;
      sheet.load("name");

        await context.sync();
        console.log(`Worksheet with name "${sheet.name}" is visible`);
  });




Get a single cell within a worksheet
The following code sample gets the cell that is located in row 2, column 5 of the
worksheet named Sample, loads its address and values properties, and writes a
message to the console. The values that are passed into the getCell(row: number,
column:number) method are the zero-indexed row number and column number for the

cell that is being retrieved.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      let cell = sheet.getCell(1, 4);
        cell.load("address, values");

      await context.sync();
      console.log(`The value of the cell in row 2, column 5 is
  "${cell.values[0][0]}" and the address of that cell is "${cell.address}"`);
  });




Detect data changes
Your add-in may need to react to users changing the data in a worksheet. To detect
these changes, you can register an event handler for the onChanged event of a
worksheet. Event handlers for the onChanged event receive a
WorksheetChangedEventArgs object when the event fires.

The WorksheetChangedEventArgs object provides information about the changes and the
source. Since onChanged fires when either the format or value of the data changes, it can
be useful to have your add-in check if the values have actually changed. The details
property encapsulates this information as a ChangedEventDetail. The following code
sample shows how to display the before and after values and types of a cell that has
been changed.

  JavaScript


  // This function would be used as an event handler for the
  Worksheet.onChanged event.
  function onWorksheetChanged(eventArgs) {
      Excel.run(function (context) {
          let details = eventArgs.details;
          let address = eventArgs.address;

          // Print the before and after types and values to the console.
          console.log(`Change at ${address}: was ${details.valueBefore}
  (${details.valueTypeBefore}),`
              + ` now is ${details.valueAfter}(${details.valueTypeAfter})`);
          return context.sync();
      });
  }




Detect formula changes
Your add-in can track changes to formulas in a worksheet. This is useful when a
worksheet is connected to an external database. When the formula changes in the
worksheet, the event in this scenario triggers corresponding updates in the external
database.
 To detect changes to formulas, register an event handler for the onFormulaChanged
event of a worksheet. Event handlers for the onFormulaChanged event receive a
WorksheetFormulaChangedEventArgs object when the event fires.


  ï¼‰ Important

  The onFormulaChanged event detects when a formula itself changes, not the data
  value resulting from the formula's calculation.


The following code sample shows how to register the onFormulaChanged event handler,
use the WorksheetFormulaChangedEventArgs object to retrieve the formulaDetails array of
the changed formula, and then print out details about the changed formula with the
FormulaChangedEventDetail properties.


  ï¼— Note

  This code sample only works when a single formula is changed.


  JavaScript


  async function run() {
      await Excel.run(async (context) => {
          // Retrieve the worksheet named "Sample".
          let sheet = context.workbook.worksheets.getItem("Sample");

               // Register the formula changed event handler for this worksheet.
               sheet.onFormulaChanged.add(formulaChangeHandler);

               await context.sync();
       });
  }

  async function formulaChangeHandler(event) {
      await Excel.run(async (context) => {
          // Retrieve details about the formula change event.
          // Note: This method assumes only a single formula is changed at a
  time.
          let cellAddress = event.formulaDetails[0].cellAddress;
          let previousFormula = event.formulaDetails[0].previousFormula;
          let source = event.source;

               // Print out the change event details.
               console.log(
                 `The formula in cell ${cellAddress} changed.
                  The previous formula was: ${previousFormula}.
                  The source of the change was: ${source}.`
               );
        });
  }




Handle sorting events
The onColumnSorted and onRowSorted events indicate when any worksheet data is
sorted. These events are connected to individual Worksheet objects and to the
workbook's WorkbookCollection . They fire whether the sorting is done programmatically
or manually through the Excel user interface.


  ï¼— Note

   onColumnSorted fires when columns are sorted as the result of a left-to-right sort

  operation. onRowSorted fires when rows are sorted as the result of a top-to-bottom
  sort operation. Sorting a table using the drop-down menu on a column header
  results in an onRowSorted event. The event corresponds with what is moving, not
  what is being considered as the sorting criteria.


The onColumnSorted and onRowSorted events provide their callbacks with
WorksheetColumnSortedEventArgs or WorksheetRowSortedEventArgs, respectively.
These give more details about the event. In particular, both EventArgs have an address
property that represents the rows or columns moved as a result of the sort operation.
Any cell with sorted content is included, even if that cell's value was not part of the
sorting criteria.

The following images show the ranges returned by the address property for sort events.
First, here is the sample data before sorting:




If a top-to-bottom sort is performed on "Q1" (the values in "B"), the following
highlighted rows are returned by WorksheetRowSortedEventArgs.address .
 If a left-to-right sort is performed on "Quinces" (the values in "4") on the original data,
the following highlighted columns are returned by
WorksheetColumnsSortedEventArgs.address .




The following code sample shows how to register an event handler for the
Worksheet.onRowSorted event. The handler's callback clears the fill color for the range,
then fills the cells of the moved rows.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getActiveWorksheet();

      // This will fire whenever a row has been moved as the result of a sort
  action.
      sheet.onRowSorted.add(async (event) => {
          await Excel.run(async (context) => {
              console.log("Row sorted: " + event.address);
              let sheet = context.workbook.worksheets.getActiveWorksheet();

                     // Clear formatting for section, then highlight the sorted area.
                     sheet.getRange("A1:E5").format.fill.clear();
                     if (event.address !== "") {
                         sheet.getRanges(event.address).format.fill.color = "yellow";
                     }

                     await context.sync();
               });
        });

        await context.sync();
  });
 Find all cells with matching text
The Worksheet object has a findAll method to search for a specified string within the
worksheet. It returns a RangeAreas object, which is a collection of Range objects that can
be edited all at once.

The following code sample finds all cells with values equal to the string Complete and
colors them green. Note that findAll throws an ItemNotFound error if the specified
string doesn't exist in the worksheet. If you're uncertain whether the specified string
exists in the worksheet, use the findAllOrNullObject method to gracefully handle that
scenario.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getItem("Sample");
      let foundRanges = sheet.findAll("Complete", {
          completeMatch: true, /* Match the whole cell value, not any part of
  the text. */
          matchCase: false /* Make the search case-insensitive. */
      });

        await context.sync();
        foundRanges.format.fill.color = "green";
  });




  ï¼— Note

  This section describes how to find cells and ranges using the Worksheet object's
  methods. More range retrieval information can be found in object-specific articles.

        For examples that show how to get a range within a worksheet using the
         Range object, see Get a range using the Excel JavaScript API.

        For examples that show how to get ranges from a Table object, see Work
        with tables using the Excel JavaScript API.
        For examples that show how to search a large range for multiple sub-ranges
        based on cell characteristics, see Work with multiple ranges simultaneously
        in Excel add-ins.




Filter data
 An AutoFilter applies data filters across a range within the worksheet. This is created
with Worksheet.autoFilter.apply , which has the following parameters.

      range : The range to which the filter is applied, specified as either a Range object or

     a string.
      columnIndex : The zero-based column index against which the filter criteria is

     evaluated.
      criteria : A FilterCriteria object determining which rows should be filtered based
     on the column's cell.

The first code sample shows how to add a filter to the worksheet's used range. This filter
will hide entries that are not in the top 25%, based on the values in column 3.

  JavaScript


  // This method adds a custom AutoFilter to the active worksheet
  // and applies the filter to a column of the used range.
  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getActiveWorksheet();
      let farmData = sheet.getUsedRange();

      // This filter will only show the rows with the top 25% of values in
  column 3.
      sheet.autoFilter.apply(farmData, 3, { criterion1: "25", filterOn:
  Excel.FilterOn.topPercent });
      await context.sync();
  });



The next code sample shows how to refresh the auto-filter using the reapply method.
This should be done when the data in the range changes.

  JavaScript


  // This method refreshes the AutoFilter to ensure that changes are captured.
  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getActiveWorksheet();
      sheet.autoFilter.reapply();
      await context.sync();
  });



The following code sample shows how to use the clearColumnCriteria method to clear
the auto-filter from only one column, while leaving the filter active on other columns.

  JavaScript


  // This method clears the AutoFilter setting from one column.
  await Excel.run(async (context) => {
         // Retrieve the active worksheet.
        let sheet = context.workbook.worksheets.getActiveWorksheet();

        // Clear the filter from only column 3.
        sheet.autoFilter.clearColumnCriteria(3);
        await context.sync();
  });



The final auto-filter code sample shows how to remove the auto-filter from the
worksheet with the remove method.

  JavaScript


  // This method removes all AutoFilters from the active worksheet.
  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getActiveWorksheet();
      sheet.autoFilter.remove();
      await context.sync();
  });



An AutoFilter can also be applied to individual tables. See Work with tables using the
Excel JavaScript API for more information.



Data protection
Your add-in can control a user's ability to edit data in a worksheet. The worksheet's
protection property is a WorksheetProtection object with a protect() method. The

following example shows a basic scenario toggling the complete protection of the active
worksheet.

  JavaScript


  await Excel.run(async (context) => {
      let activeSheet = context.workbook.worksheets.getActiveWorksheet();
      activeSheet.load("protection/protected");
      await context.sync();

        if (!activeSheet.protection.protected) {
            activeSheet.protection.protect();
        }
  });



The protect method has two optional parameters:

      options : A WorksheetProtectionOptions object defining specific editing

     restrictions.
       password : A string representing the password needed for a user to bypass

      protection and edit the worksheet.

The article Protect a worksheet    has more information about worksheet protection and
how to change it through the Excel UI.


Detect changes to the worksheet protection state
The protection state of a worksheet can be changed by an add-in or through the Excel
UI. To detect changes to the protection state, register an event handler for the
onProtectionChanged event of a worksheet. Event handlers for the onProtectionChanged
event receive a WorksheetProtectionChangedEventArgs object when the event fires.

The following code sample shows how to register the onProtectionChanged event
handler and use the WorksheetProtectionChangedEventArgs object to retrieve the
isProtected , worksheetId , and source properties of the event.


  JavaScript


  // This function registers an event handler for the onProtectionChanged
  event of a worksheet.
  async function run() {
      await Excel.run(async (context) => {
          // Retrieve the worksheet named "Sample".
          let sheet = context.workbook.worksheets.getItem("Sample");

               // Register the onProtectionChanged event handler.
               sheet.onProtectionChanged.add(checkProtection);
               await context.sync();
       });
  }

  // This function is an event handler that returns the protection state of a
  worksheet
  // and information about the changed worksheet.
  async function checkProtection(event) {
      await Excel.run(async (context) => {
          // Retrieve the protection, worksheet ID, and source properties of
  the event.
          let protectionStatus = event.isProtected;
          let worksheetId = event.worksheetId;
          let source = event.source;

          // Print the event properties to the console.
          console.log("Protection status changed. Protection status is now: "
  + protectionStatus);
          console.log("    ID of changed worksheet: " + worksheetId);
          console.log("    Source of change event: " + source);
        });
  }




Page layout and print settings
Add-ins have access to page layout settings at a worksheet level. These control how the
sheet is printed. A Worksheet object has three layout-related properties:
horizontalPageBreaks , verticalPageBreaks , pageLayout .


Worksheet.horizontalPageBreaks and Worksheet.verticalPageBreaks are

PageBreakCollections. These are collections of PageBreaks, which specify ranges where
manual page breaks are inserted. The following code sample adds a horizontal page
break above row 21.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getActiveWorksheet();
      sheet.horizontalPageBreaks.add("A21:E21"); // The page break is added
  above this range.
      await context.sync();
  });



Worksheet.pageLayout is a PageLayout object. This object contains layout and print
settings that are not dependent any printer-specific implementation. These settings
include margins, orientation, page numbering, title rows, and print area.

The following code sample centers the page (both vertically and horizontally), sets a title
row that will be printed at the top of every page, and sets the printed area to a
subsection of the worksheet.

  JavaScript


  await Excel.run(async (context) => {
      let sheet = context.workbook.worksheets.getActiveWorksheet();

       // Center the page in both directions.
       sheet.pageLayout.centerHorizontally = true;
       sheet.pageLayout.centerVertically = true;

       // Set the first row as the title row for every page.
       sheet.pageLayout.setPrintTitleRows("$1:$1");

       // Limit the area to be printed to the range "A1:D100".
       sheet.pageLayout.setPrintArea("A1:D100");
        await context.sync();
 });

This article discusses troubleshooting issues that are unique to Excel. Please use the
feedback tool at the bottom of the page to suggest other issues that can be added to
the article.



API limitations when the active workbook
switches
Add-ins for Excel are intended to operate on a single workbook at a time. Errors can
arise when a workbook that is separate from the one running the add-in gains focus.
This only happens when particular methods are in the process of being called when the
focus changes.

The following APIs are affected by this workbook switch.

 Excel JavaScript API                                             Error thrown

 Chart.activate                                                   GeneralException

 Range.select                                                     GeneralException

 Table.clearFilters                                               GeneralException

 Workbook.getActiveCell                                           InvalidSelection

 Workbook.getSelectedRange                                        InvalidSelection

 Workbook.getSelectedRanges                                       InvalidSelection

 Worksheet.activate                                               GeneralException

 Worksheet.delete                                                 InvalidSelection

 Worksheet.gridlines                                              GeneralException

 Worksheet.showHeadings                                           GeneralException

 WorksheetCollection.add                                          GeneralException

 WorksheetFreezePanes.freezeAt                                    GeneralException

 WorksheetFreezePanes.freezeColumns                               GeneralException

 WorksheetFreezePanes.freezeRows                                  GeneralException
  Excel JavaScript API                                             Error thrown

 WorksheetFreezePanes.getLocationOrNullObject                     GeneralException

 WorksheetFreezePanes.unfreeze                                    GeneralException



  ï¼— Note

  This only applies to multiple Excel workbooks open on Windows or Mac.




Coauthoring
See Coauthoring in Excel add-ins for patterns to use with events in a coauthoring
environment. The article also discusses potential merge conflicts when using certain
APIs, such as TableRowCollection.add.



Known Issues

Binding events return temporary Binding objects
Both BindingDataChangedEventArgs.binding and
BindingSelectionChangedEventArgs.binding return a temporary Binding object that
contains the ID of the Binding object that raised the event. Use this ID with
BindingCollection.getItem(id) to retrieve the Binding object that raised the event.


The following code sample shows how to use this temporary binding ID to retrieve the
related Binding object. In the sample, an event listener is assigned to a binding. The
listener calls the getBindingId method when the onDataChanged event is triggered. The
getBindingId method uses the ID of the temporary Binding object to retrieve the
Binding object that raised the event.


  JavaScript


  async function run() {
      await Excel.run(async (context) => {
          // Retrieve your binding.
          let binding = context.workbook.bindings.getItemAt(0);

               await context.sync();

               // Register an event listener to detect changes to your binding
               // and then trigger the `getBindingId` method when the data changes.
              binding.onDataChanged.add(getBindingId);
             await context.sync();
       });
  }

  async function getBindingId(eventArgs) {
      await Excel.run(async (context) => {
          // Get the temporary binding object and load its ID.
          let tempBindingObject = eventArgs.binding;
          tempBindingObject.load("id");

          // Use the temporary binding object's ID to retrieve the original
  binding object.
          let originalBindingObject =
  context.workbook.bindings.getItem(tempBindingObject.id);

          // You now have the binding object that raised the event:
  `originalBindingObject`.
      });
  }




Cell format useStandardHeight and useStandardWidth
issues
The useStandardHeight property of CellPropertiesFormat doesn't work properly in
Excel on the web. Due to an issue in the Excel on the web UI, setting the
useStandardHeight property to true calculates height imprecisely on this platform. For

example, a standard height of 14 is modified to 14.25 in Excel on the web.

On all platforms, the useStandardHeight and useStandardWidth properties of
CellPropertiesFormat are only intended to be set to true . Setting these properties to
false has no effect.



Range getImage method unsupported on Excel for Mac
The Range getImage method isn't currently supported in Excel for Mac. See
OfficeDev/office-js Issue #235    for the current status.


Range return character limit
The Worksheet.getRange(address) and Worksheet.getRanges(address) methods have an
address string limit of 8192 characters. When this limit is exceeded, the address string is
truncated to 8192 characters.

Custom functions enable developers to add new functions to Excel by defining those
functions in JavaScript as part of an add-in. Users within Excel can access custom
functions just as they would any native function in Excel, such as SUM() .


  ï¼— Note

  Custom function is a general term that is interchangeable with user-defined
  function. Both terms apply to VBA, COM, and Office.js add-ins. The Office Add-ins
  documentation uses the term custom function when referring to custom functions
  that use Office JavaScript APIs.



  ï¼‰ Important

  Note that Excel custom functions are available on the following platforms.

        Office on the web
        Office on Windows
           Microsoft 365 subscription
           retail perpetual Office 2016 and later
           volume-licensed perpetual Office 2021 and later
        Office on Mac

  Excel custom functions aren't currently supported in the following:

        Office on iPad
        volume-licensed perpetual versions of Office 2019 or earlier on Windows


The following animated image shows your workbook calling a function you've created
with JavaScript or TypeScript. In this example, the custom function
=MYFUNCTION.SPHEREVOLUME calculates the volume of a sphere.
 The following code defines the custom function =MYFUNCTION.SPHEREVOLUME .

  JavaScript


  /**
    * Returns the volume of a sphere.
    * @customfunction
    * @param {number} radius
    */
  function sphereVolume(radius) {
     return Math.pow(radius, 3) * 4 * Math.PI / 3;
  }




How a custom function is defined in code
If you use the Yeoman generator for Office Add-ins to create an Excel custom functions
add-in project, it creates files which control your functions and task pane. We'll
concentrate on the files that are important to custom functions.


                                                                                   ï¾‰   Expand table


 File                             File         Description
                                  format

 ./src/functions/functions.js     JavaScript   Contains the code that defines custom functions.
 or                               or
 ./src/functions/functions.ts     TypeScript

 ./src/functions/functions.html   HTML         Provides a <script> reference to the JavaScript file
                                               that defines custom functions.

 ./manifest.xml                   XML          Specifies the location of multiple files that your
                                               custom function use, such as the custom functions
                                               JavaScript, JSON, and HTML files. It also lists the
                                               locations of task pane files, command files, and
  File                          File        Description
                               format

                                           specifies which runtime your custom functions
                                           should use.



  îª€ Tip

  The Yeoman generator for Office Add-ins offers multiple Excel Custom Functions
  projects. We recommend selecting the project type Excel Custom Functions using
  a Shared Runtime and the script type JavaScript.



Script file
The script file (./src/functions/functions.js or ./src/functions/functions.ts) contains the
code that defines custom functions and comments which define the function.

The following code defines the custom function add . The code comments are used to
generate a JSON metadata file that describes the custom function to Excel. The required
@customfunction comment is declared first, to indicate that this is a custom function.

Next, two parameters are declared, first and second , followed by their description
properties. Finally, a returns description is given. For more information about what
comments are required for your custom function, see Autogenerate JSON metadata for
custom functions.

  JavaScript


  /**
   * Adds two numbers.
   * @customfunction
   * @param first First number.
   * @param second Second number.
   * @returns The sum of the two numbers.
   */

  function add(first, second){
    return first + second;
  }




Manifest file
The add-in only manifest file for an add-in that defines custom functions (./manifest.xml
in the project that the Yeoman generator for Office Add-ins creates) does several things.
      Defines the namespace for your custom functions. A namespace prepends itself to
     your custom functions to help customers identify your functions as part of your
     add-in.
     Uses <ExtensionPoint> and <Resources> elements that are unique to a custom
     functions manifest. These elements contain the information about the locations of
     the JavaScript, JSON, and HTML files.
     Specifies which runtime to use for your custom function. We recommend always
     using a shared runtime unless you have a specific need for another runtime,
     because a shared runtime allows for the sharing of data between functions and the
     task pane.

To see a full working manifest from a sample add-in, see the manifest in the one of our
Office Add-in samples Github repositories .


  îª€ Tip

  If you'll be testing your add-in across multiple environments (for example, in
  development, staging, demo, etc.), we recommend that you maintain a different
  manifest file for each environment. In each manifest file, you can:

       Specify the URLs that correspond to the environment.
       Customize metadata values like DisplayName and labels within Resources to
       indicate the environment, so that end users will be able to identify a
       sideloaded add-in's corresponding environment.
       Customize the custom functions namespace to indicate the environment, if
       your add-in defines custom functions.

  By following this guidance, you'll streamline the testing process and avoid issues
  that would otherwise occur when an add-in is simultaneously sideloaded for
  multiple environments.




Coauthoring
Excel on the web and on Windows connected to a Microsoft 365 subscription allow end
users to coauthor in Excel. If an end user's workbook uses a custom function, that end
user's coauthoring colleague is prompted to load the corresponding custom functions
add-in. Once both users have loaded the add-in, the custom function shares results
through coauthoring.

For more information on coauthoring, see About coauthoring in Excel.
 Next steps
Want to try out custom functions? Check out the simple custom functions quick start or
the more in-depth custom functions tutorial if you haven't already.

Another easy way to try out custom functions is to use Script Lab     , an add-in that
allows you to experiment with custom functions right in Excel. You can try out creating
your own custom function or play with the provided samples.

   ï¼– Collaborate with us on
   GitHub                                Office Add-ins feedback
                                         Office Add-ins is an open source project.
   The source for this content can
                                         Select a link to provide feedback:
   be found on GitHub, where you
   can also create and review
                                         î¯¨ Open a documentation issue
   issues and pull requests. For
   more information, see our
                                         î´• Provide product feedback
   contributor guide.
 Get started developing Excel custom
functions
Article â€¢ 08/22/2024


With custom functions, developers can add new functions to Excel by defining them in
JavaScript or TypeScript as part of an add-in. Excel users can access custom functions
just as they would any native function in Excel, such as SUM() .



Prerequisites
      Node.js (the latest LTS version). Visit the Node.js site   to download and install the
      right version for your operating system.

      The latest version of Yeoman and the Yeoman generator for Office Add-ins. To
      install these tools globally, run the following command via the command prompt.

        command line


        npm install -g yo generator-office




        ï¼— Note

        Even if you've previously installed the Yeoman generator, we recommend you
        update your package to the latest version from npm.


      Office connected to a Microsoft 365 subscription (including Office on the web).


        ï¼— Note

        If you don't already have Office, you might qualify for a Microsoft 365 E5
        developer subscription through the Microsoft 365 Developer Program           ; for
        details, see the FAQ. Alternatively, you can sign up for a 1-month free trial
        or purchase a Microsoft 365 plan       .




Build your first custom functions project
To start, you'll use the Yeoman generator to create the custom functions project. This
will set up your project with the correct folder structure, source files, and dependencies
 to begin coding your custom functions.

  1. Run the following command to create an add-in project using the Yeoman
     generator. A folder that contains the project will be added to the current directory.

       command line


       yo office




       ï¼— Note

       When you run the yo office command, you may receive prompts about the
       data collection policies of Yeoman and the Office Add-in CLI tools. Use the
       information that's provided to respond to the prompts as you see fit.


     When prompted, provide the following information to create your add-in project.

          Choose a project type: Excel Custom Functions using a Shared Runtime
          Choose a script type: JavaScript
          What do you want to name your add-in? My custom functions add-in




     The Yeoman generator will create the project files and install supporting Node
     components.

  2. The Yeoman generator will give you some instructions in your command line about
     what to do with the project, but ignore them and continue to follow our
     instructions. Navigate to the root folder of the project.

       command line


       cd "My custom functions add-in"
  3. Build the project.

      command line


      npm run build



 4. Start the local web server, which runs in Node.js. You can try out the custom
   function add-in in Excel. You may be prompted to open the add-in's task pane,
   although this is optional. You can still run your custom functions without opening
   your add-in's task pane.


Excel on the web


To test your add-in in Excel on the web, run the following command. When you run
this command, the local web server will start. Replace "{url}" with the URL of an
Excel document on your OneDrive or a SharePoint library to which you have
permissions.


  ï¼— Note

  If you are developing on a Mac, enclose the {url} in single quotation marks.
  Do not do this on Windows.


  command line


  npm run start:web -- --document {url}



The following are examples.

      npm run start:web -- --document

      https://contoso.sharepoint.com/:t:/g/EZGxP7ksiE5DuxvY638G798BpuhwluxCMfF1W
      ZQj3VYhYQ?e=F4QM1R

      npm run start:web -- --document
      https://1drv.ms/x/s!jkcH7spkM4EGgcZUgqthk4IK3NOypVw?e=Z6G1qp

      npm run start:web -- --document https://contoso-my.sharepoint-
      df.com/:t:/p/user/EQda453DNTpFnl1bFPhOVR0BwlrzetbXvnaRYii2lDr_oQ?

      e=RSccmNP


If your add-in doesn't sideload in the document, manually sideload it by following
the instructions in Manually sideload add-ins to Office on the web.
     ï¼— Note

    Office Add-ins should use HTTPS, not HTTP, even while you're developing. If
    you're prompted to install a certificate after you run one of the following
    commands, accept the prompt to install the certificate that the Yeoman
    generator provides. You may also have to run your command prompt or
    terminal as an administrator for the changes to be made.




Try out a prebuilt custom function
The custom functions project that you created by using the Yeoman generator contains
some prebuilt custom functions, defined within the ./src/functions/functions.js file. The
./manifest.xml file in the root directory of the project specifies that all custom functions
belong to the CONTOSO namespace.

In your Excel workbook, try out the ADD custom function by completing the following
steps.

   1. Select a cell and type =CONTOSO . Notice that the autocomplete menu shows the list
     of all functions in the CONTOSO namespace.

   2. Run the CONTOSO.ADD function, using numbers 10 and 200 as input parameters, by
     typing the value =CONTOSO.ADD(10,200) in the cell and pressing enter.

The ADD custom function computes the sum of the two numbers that you specify as
input parameters. Typing =CONTOSO.ADD(10,200) should produce the result 210 in the cell
after you press enter.

If the CONTOSO namespace isn't available in the autocomplete menu, take the following
steps to register the add-in in Excel.


  Excel on the web



     1. In Excel, select Home > Add-ins, then select More Add-ins.

     2. In the MY ADD-INS tab, select Manage My Add-ins and choose Upload My
         Add-in.

     3. Choose Browse... and navigate to the root directory of the project that the
         Yeoman generator created.
      4. Select the file manifest.xml and choose Open, then choose Upload.

     5. Try out the new function. In cell B1, type the text
        =CONTOSO.GETSTARCOUNT("OfficeDev", "Excel-Custom-Functions") and
        press Enter. You should see that the result in cell B1 is the current number of
        stars given to the Excel-Custom-Functions Github repository     .



When you want to stop the local web server and uninstall the add-in, follow the
applicable instructions:

     To stop the server, run the following command. If you used npm start , the
     following command also uninstalls the add-in.

        command line


        npm stop



     If you manually sideloaded the add-in, see Remove a sideloaded add-in.



Next steps
Congratulations, you've successfully created a custom function in an Excel add-in! Next,
build a more complex add-in with streaming data capability. The following link takes
you through the next steps in the Excel add-in with custom functions tutorial.

 Excel custom functions add-in tutorial



Troubleshooting
     Ensure your environment is ready for Office development by following the
     instructions in Set up your development environment.

     Some of the sample code uses ES6 JavaScript. This isn't compatible with older
     versions of Office that use the Trident (Internet Explorer 11) browser engine. For
     information on how to support those platforms in your add-in, see Support older
     Microsoft webviews and Office versions. If you don't already have a Microsoft 365
     subscription to use for development, you might qualify for a Microsoft 365 E5
     developer subscription through the Microsoft 365 Developer Program          ; for
     details, see the FAQ. Alternatively, you can sign up for a 1-month free trial       or
     purchase a Microsoft 365 plan .
   The automatic npm install step Yo Office performs may fail. If you see errors when
  trying to run npm start , navigate to the newly created project folder in a
  command prompt and manually run npm install . For more information about Yo
  Office, see Create Office Add-in projects using the Yeoman Generator.

  You may encounter issues if you run the quick start multiple times. If the Office
  cache already has an instance of a function with the same name, your add-in gets
  an error when it sideloads. You can prevent this by clearing the Office cache before
  running npm run start and making sure to run npm stop before restarting the
  add-in.

Custom functions enable you to add new functions to Excel by defining those functions
in JavaScript as part of an add-in. Users within Excel can access custom functions as they
would any native function in Excel, such as SUM() . You can create custom functions that
perform simple tasks like calculations or more complex tasks such as streaming real-
time data from the web into a worksheet.

In this tutorial, you will:

 ï¼‚ Create a custom function add-in using the Yeoman generator for Office Add-ins.
 ï¼‚ Use a prebuilt custom function to perform a simple calculation.
 ï¼‚ Create a custom function that gets data from the web.
 ï¼‚ Create a custom function that streams real-time data from the web.



Prerequisites
      Node.js (the latest LTS version). Visit the Node.js site   to download and install the
      right version for your operating system.

      The latest version of Yeoman and the Yeoman generator for Office Add-ins. To
      install these tools globally, run the following command via the command prompt.

         command line


         npm install -g yo generator-office




         ï¼— Note

         Even if you've previously installed the Yeoman generator, we recommend you
         update your package to the latest version from npm.


      Office connected to a Microsoft 365 subscription (including Office on the web).


         ï¼— Note
         If you don't already have Office, you might qualify for a Microsoft 365 E5
        developer subscription through the Microsoft 365 Developer Program           ; for
        details, see the FAQ. Alternatively, you can sign up for a 1-month free trial
        or purchase a Microsoft 365 plan      .




Create a custom functions project
To start, create the code project to build your custom function add-in. The Yeoman
generator for Office Add-ins will set up your project with some prebuilt custom
functions that you can try out. If you've already run the custom functions quick start and
generated a project, continue to use that project and skip to this step instead.


  ï¼— Note

  If you recreate the Yo Office project, you may get an error because the Office cache
  already has an instance of a function with the same name. You can prevent this by
  clearing the Office cache before running npm run start .


   1. Run the following command to create an add-in project using the Yeoman
     generator. A folder that contains the project will be added to the current directory.

        command line


        yo office




        ï¼— Note

        When you run the yo office command, you may receive prompts about the
        data collection policies of Yeoman and the Office Add-in CLI tools. Use the
        information that's provided to respond to the prompts as you see fit.


     When prompted, provide the following information to create your add-in project.

           Choose a project type: Excel Custom Functions using a Shared Runtime
           Choose a script type: JavaScript
           What do you want to name your add-in? My custom functions add-in
   The Yeoman generator will create the project files and install supporting Node
  components.


     îª€ Tip

     You can ignore the next steps guidance that the Yeoman generator provides
     after the add-in project's been created. The step-by-step instructions within
     this article provide all of the guidance you'll need to complete this tutorial.


2. Navigate to the root folder of the project.

     command line


     cd "My custom functions add-in"



3. Build the project.

     command line


     npm run build




     ï¼— Note

     Office Add-ins should use HTTPS, not HTTP, even when you are developing. If
     you are prompted to install a certificate after you run npm run build , accept
     the prompt to install the certificate that the Yeoman generator provides.


4. Start the local web server, which runs in Node.js. You can try out the custom
  function add-in in Excel.
   Excel on Windows or Mac


  To test your add-in in Excel on Windows or Mac, run the following command. When
  you run this command, the local web server will start and Excel will open with your
  add-in loaded.

     command line


     npm run start:desktop




     ï¼— Note

     Office Add-ins should use HTTPS, not HTTP, even while you're developing. If
     you're prompted to install a certificate after you run one of the following
     commands, accept the prompt to install the certificate that the Yeoman
     generator provides. You may also have to run your command prompt or
     terminal as an administrator for the changes to be made.




Try out a prebuilt custom function
The custom functions project that you created contains some prebuilt custom functions,
defined within the ./src/functions/functions.js file. The ./manifest.xml file specifies that
all custom functions belong to the CONTOSO namespace. You'll use the CONTOSO
namespace to access the custom functions in Excel.

Next, try out the ADD custom function by completing the following steps.

   1. In Excel, go to any cell and enter =CONTOSO . Notice that the autocomplete menu
     shows the list of all functions in the CONTOSO namespace.

   2. Run the CONTOSO.ADD function, with numbers 10 and 200 as input parameters, by
     typing the value =CONTOSO.ADD(10,200) in the cell and pressing enter.

The ADD custom function computes the sum of the two numbers that you provided and
returns the result of 210.

If the CONTOSO namespace isn't available in the autocomplete menu, take the following
steps to register the add-in in Excel.


  Excel on Windows or on Mac
      1. In the Excel ribbon, select Home > Add-ins.

     2. Under the Developer Add-ins section, select My custom functions add-in to
       register it.




  ï¼— Note

  See the Troubleshooting section of this article if you encounter errors when
  sideloading the add-in.




Create a custom function that requests data
from the web
Integrating data from the Web is a great way to extend Excel through custom functions.
Next you'll create a custom function named getStarCount that shows how many stars a
given Github repository possesses.

   1. In the My custom functions add-in project, find the file
     ./src/functions/functions.js and open it in your code editor.
 2. In function.js, add the following code.

     JS


     /**
       * Gets the star count for a given Github repository.
       * @customfunction
       * @param {string} userName string name of Github user or
     organization.
       * @param {string} repoName string name of the Github repository.
       * @return {number} number of stars given to a Github repository.
       */
       async function getStarCount(userName, repoName) {
         try {
           //You can change this URL to any web request you want to work
     with.
           const url = "https://api.github.com/repos/" + userName + "/" +
     repoName;
           const response = await fetch(url);
           //Expect that status code is in 200-299 range
           if (!response.ok) {
             throw new Error(response.statusText)
           }
             const jsonResponse = await response.json();
             return jsonResponse.watchers_count;
         }
         catch (error) {
           return error;
         }
       }



3. Run the following command to rebuild the project.

     command line


     npm run build



4. Complete the following steps (for Excel on the web, Windows, or Mac) to re-
   register the add-in in Excel. You must complete these steps before the new
   function will be available.


Excel on Windows or Mac



   1. Close Excel and then reopen Excel.

   2. In the Excel ribbon, select Home > Add-ins.
      3. Under the Developer Add-ins section, select My custom functions add-in to
       register it.




     4. Try out the new function. In cell B1, type the text
       =CONTOSO.GETSTARCOUNT("OfficeDev", "Office-Add-in-Samples") and
       press Enter. You should see that the result in cell B1 is the current number of
       stars given to the Office-Add-in-Samples repository .




  ï¼— Note

  See the Troubleshooting section of this article if you encounter errors when
  sideloading the add-in.




Create a streaming asynchronous custom
function
The getStarCount function returns the number of stars a repository has at a specific
moment in time. Custom functions also return data that is continuously changing. These
functions are called streaming functions. They must include an invocation parameter
 which refers to the cell that called the function. The invocation parameter is used to
update the contents of the cell at any time.

In the following code sample, notice that there are two functions, currentTime and
clock . The currentTime function is a static function that doesn't use streaming. It

returns the date as a string. The clock function uses the currentTime function to
provide the new time every second to a cell in Excel. It uses invocation.setResult to
deliver the time to the Excel cell and invocation.onCanceled to handle function
cancellation.

The My custom functions add-in project already contains the following two functions in
the ./src/functions/functions.js file.

  JS


  /**
    * Returns the current time
    * @returns {string} String with the current time formatted for the current
  locale.
    */
  function currentTime() {
     return new Date().toLocaleTimeString();
  }

  /**
   * Displays the current time once a second
   * @customfunction
   * @param {CustomFunctions.StreamingInvocation<string>} invocation Custom
  function invocation
   */
  function clock(invocation) {
    const timer = setInterval(() => {
      const time = currentTime();
      invocation.setResult(time);
    }, 1000);

       invocation.onCanceled = () => {
         clearInterval(timer);
       };
  }



To try out the functions, type the text =CONTOSO.CLOCK() in cell C1 and press enter.
You should see the current date, which streams an update every second. While this clock
is just a timer on a loop, you can use the same idea of setting a timer on more complex
functions that make web requests for real-time data.



Troubleshooting
 You may encounter issues if you run the tutorial multiple times. If the Office cache
already has an instance of a function with the same name, your add-in gets an error
when it sideloads.

You can prevent this conflict by clearing the Office cache before running npm run start .
If your npm process is already running, enter npm stop , clear the Office cache, and then
restart npm.




Next steps
Congratulations! You've created a new custom functions project, tried out a prebuilt
function, created a custom function that requests data from the web, and created a
custom function that streams data. Next, learn how to Share custom function data with
the task pane.
 Tutorial: Share data and events between
Excel custom functions and the task
pane
Article â€¢ 03/28/2023


Share global data and send events between the task pane and custom functions of your
Excel add-in with a shared runtime.



Share a state between custom function and
task pane code
The following instructions show how to share a global variable between custom function
and task pane code. This tutorial assumes that you've completed the Excel custom
functions tutorial, with a Excel Custom Functions using a Shared Runtime project using
the script type JavaScript. Use the add-in you created in that tutorial to complete the
following instructions.


Create custom functions to get or store shared state
   1. In Visual Studio Code open the file src/functions/functions.js.

   2. On line 1, insert the following code at the very top. This will initialize a global
      variable named sharedState.

        JavaScript


        window.sharedState = "empty";



   3. Add the following code to create a custom function that stores values to the
      sharedState variable.

        JavaScript


        /**
         * Saves a string value to shared state with the task pane
         * @customfunction STOREVALUE
         * @param {string} value String to write to shared state with task
        pane.
         * @return {string} A success value
         */
        function storeValue(sharedValue) {
         window.sharedState = sharedValue;
         return "value stored";
       }



  4. Add the following code to create a custom function that gets the current value of
    the sharedState variable.

       JavaScript


       /**
         * Gets a string value from shared state with the task pane
         * @customfunction GETVALUE
         * @returns {string} String value of the shared state with task pane.
         */
       function getValue() {
          return window.sharedState;
       }



  5. Save the file.


Create task pane controls to work with global data
  1. Open the file src/taskpane/taskpane.html.

  2. After the closing </main> element, add the following HTML. The HTML creates two
    text boxes and buttons used to get or store global data.

       HTML


       <ol>
         <li>
            Enter a value to send to the custom function and select
            <strong>Store</strong>.
         </li>
         <li>
            Enter <strong>=CONTOSO.GETVALUE()</strong> into a cell to retrieve
       it.
         </li>
         <li>
            To send data to the task pane, in a cell, enter
            <strong>=CONTOSO.STOREVALUE("new value")</strong>
         </li>
         <li>Select <strong>Get</strong> to display the value in the task
       pane.</li>
       </ol>

       <p>Store new value to shared state</p>
       <div>
           <input type="text" id="storeBox" />
          <button onclick="storeSharedValue()">Store</button>
        </div>

        <p>Get shared state value</p>
        <div>
          <input type="text" id="getBox" />
          <button onclick="getSharedValue()">Get</button>
        </div>



   3. Before the closing </body> element, add the following script. This code will handle
     the button click events when the user wants to store or get global data.

        HTML


        <script>
          function storeSharedValue() {
            let sharedValue = document.getElementById('storeBox').value;
            window.sharedState = sharedValue;
          }

          function getSharedValue() {
            document.getElementById('getBox').value = window.sharedState;
          }
        </script>



   4. Save the file.

   5. Build the project.

        command line


        npm run build




Try sharing data between the custom functions and task
pane
     Start the project by using the following command.

        command line


        npm run start



Once Excel starts, you can use the task pane buttons to store or get shared data. Enter
=CONTOSO.GETVALUE() into a cell for the custom function to retrieve the same shared
 data. Or use =CONTOSO.STOREVALUE("new value") to change the shared data to a new
value.


  ï¼— Note

  Calling some Office APIs from custom functions using a shared runtime is possible.
  See Call Microsoft Excel APIs from a custom function for more details.

This article describes guidelines and best practices for naming custom functions. It also
shows how to localize custom function names to languages other than English.



Custom functions naming guidelines
A custom function is identified by an id and name property in the JSON metadata file.

      The function id is used to uniquely identify custom functions in your JavaScript
      code.
      The function name is used as the display name that appears to a user in Excel.


  ï¼‰ Important

  Note that Excel custom functions are available on the following platforms.

         Office on the web
         Office on Windows
             Microsoft 365 subscription
             retail perpetual Office 2016 and later
             volume-licensed perpetual Office 2021 and later
         Office on Mac

  Excel custom functions aren't currently supported in the following:

         Office on iPad
         volume-licensed perpetual versions of Office 2019 or earlier on Windows


A function name can differ from the function id , such as for localization purposes. In
general, a function's name should stay the same as the id if there is no reason for them
to differ.

A function's name and id share some common requirements.

      A function's id may only use characters A through Z, numbers zero through nine,
      underscores, and periods.
      A function's name may use any Unicode alphabetic characters, underscores, and
     periods.

     Both function name and id must start with a letter and have a minimum limit of
     three characters.

Excel uses uppercase letters for built-in function names (such as SUM ). Use uppercase
letters for your custom function's name and id as a best practice.

A function's name shouldn't be the same as:

     Any cells between A1 to XFD1048576 or any cells between R1C1 to
     R1048576C16384.

     Any Excel 4.0 Macro Function (such as RUN , ECHO ). For a full list of these functions,
     see this Excel Macro Functions Reference document        .



Naming conflicts
If your function name is the same as a function name in an add-in that already exists, the
#REF! error will appear in your workbook.

To fix a naming conflict, change the name in your add-in and try the function again. You
can also uninstall the add-in with the conflicting name. Or, if you're testing your add-in
in different environments, try using a different namespace to differentiate your function
(such as NAMESPACE_NAMEOFFUNCTION ).



Best practices
     Consider adding multiple arguments to a function rather than creating multiple
     functions with the same or similar names.
     Avoid ambiguous abbreviations in function names. Clarity is more important than
     brevity. Choose a name like =INCREASETIME rather than =INC .
     Function names should indicate the action of the function, such as =GETZIPCODE
     instead of ZIPCODE.
     Consistently use the same verbs for functions which perform similar actions. For
     example, use =DELETEZIPCODE and =DELETEADDRESS , rather than =DELETEZIPCODE and
     =REMOVEADDRESS .
     When naming a streaming function, consider adding a note to that effect in the
     description of the function or adding STREAM to the end of the function's name.
   îª€ Tip

  If you'll be testing your add-in across multiple environments (for example, in
  development, staging, demo, etc.), we recommend that you maintain a different
  manifest file for each environment. In each manifest file, you can:

        Specify the URLs that correspond to the environment.
        Customize metadata values like DisplayName and labels within Resources to
        indicate the environment, so that end users will be able to identify a
        sideloaded add-in's corresponding environment.
        Customize the custom functions namespace to indicate the environment, if
        your add-in defines custom functions.

  By following this guidance, you'll streamline the testing process and avoid issues
  that would otherwise occur when an add-in is simultaneously sideloaded for
  multiple environments.




Localize custom functions
You can localize both your add-in and your custom function names. To do so, provide
localized function names in the functions' JSON file and locale information in the add-in
only manifest file.


  ï¼‰ Important

  Autogenerated metadata doesn't work for localization so you need to update the
  JSON file manually. To learn how to do this, see Manually create JSON metadata
  for custom functions.



Localize function names
To localize your custom functions, create a new JSON metadata file for each language. In
each language JSON file, add name and description properties in the target language.
The default file for English is named functions.json. Use the locale in the filename for
each additional JSON file, such as functions-de.json to help identify them.

The name and description appear in Excel and are localized. However, the id of each
function isn't localized. The id property is how Excel identifies your function as unique
and shouldn't be changed once it is set.
   ï¼‰ Important

  Avoid giving your functions an id or name that is a built-in Excel function in
  another language as this conflicts with localized functions.


The following JSON shows how to define a function with the id property "MULTIPLY".
The name and description property of the function is localized for German. Each
parameter name and description is also localized for German.

  JSON


  {
         "id": "MULTIPLY",
         "name": "SUMME",
         "description": "Summe zwei Zahlen",
         "helpUrl": "http://www.contoso.com",
         "result": {
             "type": "number",
             "dimensionality": "scalar"
         },
         "parameters": [
             {
                 "name": "eins",
                 "description": "Erste Nummer",
                 "dimensionality": "scalar"
             },
             {
                 "name": "zwei",
                 "description": "Zweite Nummer",
                 "dimensionality": "scalar"
             },
         ],
  }



Compare the previous JSON with the following JSON for English.

  JSON


  {
         "id": "MULTIPLY",
         "name": "Multiply",
         "description": "Multiplies two numbers",
         "helpUrl": "http://www.contoso.com",
         "result": {
             "type": "number",
             "dimensionality": "scalar"
         },
         "parameters": [
             {
                   "name": "one",
                  "description": "first number",
                  "dimensionality": "scalar"
             },
             {
                  "name": "two",
                  "description": "second number",
                  "dimensionality": "scalar"
             },
        ],
  }




Localize your add-in
After creating a JSON file for each language, update your add-in only manifest file with
an override value for each locale that specifies the URL of each JSON metadata file. The
following manifest XML shows a default en-us locale with an override JSON file URL for
de-de (Germany). The functions-de.json file contains the localized German function

names and IDs.

  XML


  <DefaultLocale>en-us</DefaultLocale>
  ...
  <Resources>
       <bt:Urls>
          <bt:Url id="Contoso.Functions.Metadata.Url"
  DefaultValue="https://localhost:3000/dist/functions.json"/>
            <bt:Override Locale="de-de"
  Value="https://localhost:3000/dist/functions-de.json" />
          </bt:url>

       </bt:Urls>
  </Resources>



For more information on the process of localizing an add-in, see Localization for Office
Add-ins.



Next steps
Learn about error handling best practices.

ï¼– Collaborate with us on
GitHub                             Office Add-ins feedback
                                   Office Add-ins is an open source project.
The source for this content can
                                   Select a link to provide feedback:
be found on GitHub, where you
can also create and review
                                   î¯¨ Open a documentation issue
issues and pull requests. For
more information, see our
                                   î´• Provide product feedback
contributor guide.
 Custom functions parameter options
Article â€¢ 07/05/2023


Custom functions are configurable with many different parameter options.


  ï¼‰ Important

  Note that Excel custom functions are available on the following platforms.

        Office on Windows
              Microsoft 365 subscription
              retail perpetual Office 2016 and later
        Office on Mac
        Office on the web

  Excel custom functions are currently not supported in the following:

        Office on iPad
        volume-licensed perpetual versions of Office 2019 or earlier




Optional parameters
When a user invokes a function in Excel, optional parameters appear in brackets. In the
following sample, the add function can optionally add a third number. This function
appears as =CONTOSO.ADD(first, second, [third]) in Excel.


 JavaScript


     JavaScript


     /**
      * Calculates the sum of the specified numbers
      * @customfunction
      * @param {number} first First number.
      * @param {number} second Second number.
      * @param {number} [third] Third number to add. If omitted, third = 0.
      * @returns {number} The sum of the numbers.
      */
     function add(first, second, third) {
       if (third === null) {
         third = 0;
       }
          return first + second + third;
     }




  ï¼— Note

  When no value is specified for an optional parameter, Excel assigns it the value
  null . This means default-initialized parameters in TypeScript will not work as

  expected. Don't use the syntax function add(first:number, second:number,
  third=0):number because it will not initialize third to 0. Instead use the TypeScript

  syntax as shown in the previous example.


When you define a function that contains one or more optional parameters, specify
what happens when the optional parameters are null. In the following example, zipCode
and dayOfWeek are both optional parameters for the getWeatherReport function. If the
zipCode parameter is null, the default value is set to 98052 . If the dayOfWeek parameter

is null, it's set to Wednesday.


 JavaScript


     JavaScript


     /**
      * Gets a weather report for a specified zipCode and dayOfWeek
      * @customfunction
      * @param {number} [zipCode] Zip code. If omitted, zipCode = 98052.
      * @param {string} [dayOfWeek] Day of the week. If omitted, dayOfWeek =
     Wednesday.
      * @returns {string} Weather report for the day of the week in that zip
     code.
      */
     function getWeatherReport(zipCode, dayOfWeek) {
       if (zipCode === null) {
         zipCode = 98052;
       }

         if (dayOfWeek === null) {
           dayOfWeek = "Wednesday";
         }

         // Get weather report for specified zipCode and dayOfWeek.
         // ...
     }
 Range parameters
Your custom function may accept a range of cell data as an input parameter. A function
can also return a range of data. Excel will pass a range of cell data as a two-dimensional
array.

For example, suppose that your function returns the second highest value from a range
of numbers stored in Excel. The following function accepts the parameter values , and
the JSDOC syntax number[][] sets the parameter's dimensionality property to matrix
in the JSON metadata for this function.

  JavaScript


  /**
    * Returns the second highest value in a matrixed range of values.
    * @customfunction
    * @param {number[][]} values Multiple ranges of values.
    */
  function secondHighest(values) {
     let highest = values[0][0],
       secondHighest = values[0][0];
     for (let i = 0; i < values.length; i++) {
       for (let j = 0; j < values[i].length; j++) {
         if (values[i][j] >= highest) {
           secondHighest = highest;
           highest = values[i][j];
         } else if (values[i][j] >= secondHighest) {
           secondHighest = values[i][j];
         }
       }
     }
     return secondHighest;
  }




Repeating parameters
A repeating parameter allows a user to enter a series of optional arguments to a
function. When the function is called, the values are provided in an array for the
parameter. If the parameter name ends with a number, each argument's number will
increase incrementally, such as ADD(number1, [number2], [number3],â€¦) . This matches the
convention used for built-in Excel functions.

The following function sums the total of numbers, cell addresses, as well as ranges, if
entered.

  TS
   /**
  * The sum of all of the numbers.
  * @customfunction
  * @param operands A number (such as 1 or 3.1415), a cell address (such as A1
  or $E$11), or a range of cell addresses (such as B3:F12)
  */

  function ADD(operands: number[][][]): number {
    let total: number = 0;

       operands.forEach(range => {
         range.forEach(row => {
           row.forEach(num => {
             total += num;
           });
         });
       });

       return total;
  }



This function shows =CONTOSO.ADD([operands], [operands]...) in the Excel workbook.




Repeating single value parameter
A repeating single value parameter allows multiple single values to be passed. For
example, the user could enter ADD(1,B2,3). The following sample shows how to declare
a single value parameter.

  JS


  /**
   * @customfunction
   * @param {number[]} singleValue An array of numbers that are repeating
  parameters.
   */
  function addSingleValue(singleValue) {
    let total = 0;
    singleValue.forEach(value => {
       total += value;
    })

       return total;
  }
 Single range parameter
A single range parameter isn't technically a repeating parameter, but is included here
because the declaration is very similar to repeating parameters. It would appear to the
user as ADD(A2:B3) where a single range is passed from Excel. The following sample
shows how to declare a single range parameter.

  JS


  /**
    * @customfunction
    * @param {number[][]} singleRange
    */
  function addSingleRange(singleRange) {
     let total = 0;
     singleRange.forEach(setOfSingleValues => {
        setOfSingleValues.forEach(value => {
           total += value;
        })
     })
     return total;
  }




Repeating range parameter
A repeating range parameter allows multiple ranges or numbers to be passed. For
example, the user could enter ADD(5,B2,C3,8,E5:E8). Repeating ranges are usually
specified with the type number[][][] as they are three-dimensional matrices. For a
sample, see the main sample listed for repeating parameters.


Declaring repeating parameters
In Typescript, indicate that the parameter is multi-dimensional. For example, ADD(values:
number[]) would indicate a one-dimensional array, ADD(values:number[][]) would
indicate a two-dimensional array, and so on.

In JavaScript, use @param values {number[]} for one-dimensional arrays, @param <name>
{number[][]} for two-dimensional arrays, and so on for more dimensions.


For hand-authored JSON, ensure your parameter is specified as "repeating": true in
your JSON file, as well as check that your parameters are marked as "dimensionality":
matrix .
 Invocation parameter
Every custom function is automatically passed an invocation argument as the last input
parameter, even if it's not explicitly declared. This invocation parameter corresponds to
the Invocation object. The Invocation object can be used to retrieve additional context,
such as the address of the cell that invoked your custom function. To access the
Invocation object, you must declare invocation as the last parameter in your custom
function.


  ï¼— Note

  The invocation parameter doesn't appear as a custom function argument for users
  in Excel.


The following sample shows how to use the invocation parameter to return the address
of the cell that invoked your custom function. This sample uses the address property of
the Invocation object. To access the Invocation object, first declare
CustomFunctions.Invocation as a parameter in your JSDoc. Next, declare
@requiresAddress in your JSDoc to access the address property of the Invocation

object. Finally, within the function, retrieve and then return the address property.

  JavaScript


  /**
    * Return the address of the cell that invoked the custom function.
    * @customfunction
    * @param {number} first First parameter.
    * @param {number} second Second parameter.
    * @param {CustomFunctions.Invocation} invocation Invocation object.
    * @requiresAddress
    */
  function getAddress(first, second, invocation) {
     const address = invocation.address;
     return address;
  }



In Excel, a custom function calling the address property of the Invocation object will
return the absolute address following the format SheetName!RelativeCellAddress in the
cell that invoked the function. For example, if the input parameter is located on a sheet
called Prices in cell F6, the returned parameter address value will be Prices!F6 .


  ï¼— Note
   If a blank space or any of the following characters is in a worksheet name: ~ ` ! @ #
  $ % ^ & ( ) - _ = + { } | ; : , ' < . >, then the worksheet name in the returned address
  is enclosed in single quotation marks, so the format is
  'SheetName'!RelativeCellAddress ; for example, 'Latest Prices'!F6 . If the single
  quotation mark (apostrophe) character, ', is in the name, the returned address has
  two such characters in a row; for example, 'Bob''s Region'!F6 .


The invocation parameter can also be used to send information to Excel. See Make a
streaming function to learn more.



Detect the address of a parameter
In combination with the invocation parameter, you can use the Invocation object to
retrieve the address of a custom function input parameter. When invoked, the
parameterAddresses property of the Invocation object allows a function to return the
addresses of all input parameters.

This is useful in scenarios where input data types may vary. The address of an input
parameter can be used to check the number format of the input value. The number
format can then be adjusted prior to input, if necessary. The address of an input
parameter can also be used to detect whether the input value has any related properties
that may be relevant to subsequent calculations.


  ï¼— Note

  If you're working with manually-created JSON metadata to return parameter
  addresses instead of the Yeoman generator for Office Add-ins, the options object
  must have the requiresParameterAddresses property set to true , and the result
  object must have the dimensionality property set to matrix .


The following custom function takes in three input parameters, retrieves the
parameterAddresses property of the Invocation object for each parameter, and then

returns the addresses.

  JavaScript


  /**
   * Return the addresses of three parameters.
   * @customfunction
   * @param {string} firstParameter First parameter.
   * @param {string} secondParameter Second parameter.
     * @param {string} thirdParameter Third parameter.
    * @param {CustomFunctions.Invocation} invocation Invocation object.
    * @returns {string[][]} The addresses of the parameters, as a 2-dimensional
  array.
    * @requiresParameterAddresses
    */
  function getParameterAddresses(firstParameter, secondParameter,
  thirdParameter, invocation) {
     const addresses = [
        [invocation.parameterAddresses[0]],
        [invocation.parameterAddresses[1]],
        [invocation.parameterAddresses[2]]
     ];
     return addresses;
  }



When a custom function calling the parameterAddresses property runs, the parameter
address is returned following the format SheetName!RelativeCellAddress in the cell that
invoked the function. For example, if the input parameter is located on a sheet called
Costs in cell D8, the returned parameter address value will be Costs!D8 . If the custom
function has multiple parameters and more than one parameter address is returned, the
returned addresses will spill across multiple cells, descending vertically from the cell that
invoked the function.


  ï¼— Note

  If a blank space or any of the following characters is in a worksheet name: ~ ` ! @ #
  $ % ^ & ( ) - _ = + { } | ; : , ' < . >, then the worksheet name in the returned address
  is enclosed in single quotation marks, so the format is
  'SheetName'!RelativeCellAddress ; for example, 'Latest Prices'!F6 . If the single

  quotation mark (apostrophe) character, ', is in the name, the returned address has
  two such characters in a row; for example, 'Bob''s Region'!F6 .




Next steps
Learn how to use volatile values in your custom functions.

If something goes wrong while your custom function runs, return an error to inform the
user. If you have specific parameter requirements, such as only positive numbers, test
the parameters and throw an error if they aren't correct. You can also use a try...catch
block to catch any errors that occur while your custom function runs.



Detect and throw an error
Let's look at a case where you need to ensure that a zip code parameter is in the correct
format for the custom function to work. The following custom function uses a regular
expression to check the zip code. If the zip code format is correct, then it will look up
the city using another function and return the value. If the format isn't valid, the function
returns a #VALUE! error to the cell.

  TypeScript


  /**
  * Gets a city name for the given U.S. zip code.
  * @customfunction
  * @param {string} zipCode
  * @returns The city of the zip code.
  */
  function getCity(zipCode: string): string {
    let isValidZip = /(^\d{5}$)|(^\d{5}-\d{4}$)/.test(zipCode);
    if (isValidZip) return cityLookup(zipCode);
    let error = new
  CustomFunctions.Error(CustomFunctions.ErrorCode.invalidValue, "Please
  provide a valid U.S. zip code.");
    throw error;
  }




The CustomFunctions.Error object
The CustomFunctions.Error object is used to return an error back to the cell. When you
create the object, specify which error you want to use by choosing one of the following
ErrorCode enum values.
  ErrorCode enum     Excel     Description
 value              cell
                    value

 divisionByZero     #DIV/0    The function is attempting to divide by zero.

 invalidName        #NAME?    There is a typo in the function name. Note that this error is
                              supported as a custom function input error, but not as a custom
                              function output error.

 invalidNumber      #NUM!     There is a problem with a number in the formula.

 invalidReference   #REF!     The function refers to an invalid cell. Note that this error is
                              supported as a custom function input error, but not as a custom
                              function output error.

 invalidValue       #VALUE!   A value in the formula is of the wrong type.

 notAvailable       #N/A      The function or service isn't available.

 nullReference      #NULL!    The ranges in the formula don't intersect.


The following code sample shows how to create and return an error for an invalid
number ( #NUM! ).

  TypeScript


  let error = new
  CustomFunctions.Error(CustomFunctions.ErrorCode.invalidNumber);
  throw error;



The #VALUE! and #N/A errors also support custom error messages. Custom error
messages are displayed in the error indicator menu, which is accessed by hovering over
the error flag on each cell with an error. The following example shows how to return a
custom error message with the #VALUE! error.

  TypeScript


  // You can only return a custom error message with the #VALUE! and #N/A
  errors.
  let error = new
  CustomFunctions.Error(CustomFunctions.ErrorCode.invalidValue, "The parameter
  can only contain lowercase characters.");
  throw error;




Handle errors when working with dynamic arrays
 In addition to returning a single error, a custom function can output a dynamic array
that includes an error. For example, a custom function could output the array [1],
[#NUM!],[3] . The following code sample shows how to input three parameters into a

custom function, replace one of the input parameters with a #NUM! error, and then
return a 2-dimensional array with the results of processing each input parameter.

  JavaScript


  /**
  * Returns the #NUM! error as part of a 2-dimensional array.
  * @customfunction
  * @param {number} first First parameter.
  * @param {number} second Second parameter.
  * @param {number} third Third parameter.
  * @returns {number[][]} Three results, as a 2-dimensional array.
  */
  function returnInvalidNumberError(first, second, third) {
    // Use the `CustomFunctions.Error` object to retrieve an invalid number
  error.
    const error = new CustomFunctions.Error(
        CustomFunctions.ErrorCode.invalidNumber, // Corresponds to the #NUM!
  error in the Excel UI.
     );

    // Enter logic that processes the first, second, and third input
  parameters.
    // Imagine that the second calculation results in an invalid number error.
    const firstResult = first;
    const secondResult = error;
    const thirdResult = third;

    // Return the results of the first and third parameter calculations and a
  #NUM! error in place of the second result.
    return [[firstResult], [secondResult], [thirdResult]];
  }




Errors as custom function inputs
A custom function can evaluate even if the input range contains an error. For example, a
custom function can take the range A2:A7 as an input, even if A6:A7 contains an error.

To process inputs that contain errors, a custom function must have the JSON metadata
property allowErrorForDataTypeAny set to true . See Manually create JSON metadata for
custom functions for more information.


  ï¼‰ Important
   The allowErrorForDataTypeAny property can only be used with manually created
  JSON metadata. This property doesn't work with the autogenerated JSON
  metadata process.




Use try...catch blocks
In general, use try...catch   blocks in your custom function to catch any potential errors
that occur. If you don't handle exceptions in your code, they will be returned to Excel. By
default, Excel returns #VALUE! for unhandled errors or exceptions.

In the following code sample, the custom function makes a fetch call to a REST service.
It's possible that the call will fail, for example, if the REST service returns an error or the
network goes down. If this happens, the custom function will return #N/A to indicate
that the web call failed.

  TypeScript


  /**
    * Gets a comment from the hypothetical contoso.com/comments API.
    * @customfunction
    * @param {number} commentID ID of a comment.
    */
  function getComment(commentID) {
     let url = "https://www.contoso.com/comments/" + commentID;
     return fetch(url)
       .then(function (data) {
         return data.json();
       })
       .then(function (json) {
         return json.body;
       })
       .catch(function (error) {
         throw new
  CustomFunctions.Error(CustomFunctions.ErrorCode.notAvailable);
       })
  }




Next steps
Learn how to troubleshoot problems with your custom functions.

When an Excel custom function is written in JavaScript or TypeScript, JSDoc tags         are
used to provide extra information about the custom function. We provide a Webpack
plugin that uses these JSDoc tags to automatically create the JSON metadata file at
build time. Using the plugin saves you from the effort of manually editing the JSON
metadata file.


  ï¼‰ Important

  Note that Excel custom functions are available on the following platforms.

        Office on Windows
           Microsoft 365 subscription
           retail perpetual Office 2016 and later
        Office on Mac
        Office on the web

  Excel custom functions are currently not supported in the following:

        Office on iPad
        volume-licensed perpetual versions of Office 2019 or earlier




CustomFunctionsMetadataPlugin
The plugin is CustomFunctionsMetadataPlugin         . To install and configure it, use the
following steps.


  ï¼— Note

        The tool can be used only in a NodeJS-based project.
        These instructions assume that your project uses Webpack          and that you
        have it installed and configured.
        If your custom function add-in project is created with the Yeoman generator
        for Office Add-ins, Webpack is installed and all of these steps are done
         automatically, but when applicable, you must do the steps in Multiple custom
        function source files manually.


   1. Open a Command Prompt or bash shell and, in the root of the project, run npm
     install custom-functions-metadata-plugin .


   2. Open the webpack.config.js file and add the following line at the top: const
     CustomFunctionsMetadataPlugin = require("custom-functions-metadata-plugin"); .


   3. Scroll down to the plugins array and add the following to the top of the array.
     Change the input path and filename as needed to match your project, but the
      output value must be "functions.json". If you're using TypeScript, use the *.ts

     source file name, not the transpiled *.js file.

        JavaScript


        new CustomFunctionsMetadataPlugin({
            output: "functions.json",
            input: "./src/functions/functions.js",
        }),




Multiple custom function source files
If, and only if, you have organized your custom functions into multiple source files, there
are additional steps.

   1. In the webpack.config.js file, replace the string value of input with an array of
     string URLs that point to each of the files. The following is an example:

        JavaScript


        new CustomFunctionsMetadataPlugin({
            output: "functions.json",
            input: [
                     "./src/functions/someFunctions.js",
                     "./src/functions/otherFunctions.js"
                   ],
        }),



   2. Scroll to the entry.functions property, and replace its value with the same array
     you used in the preceding step. The following is an example:

        JavaScript
         entry: {
           polyfill: ["core-js/stable", "regenerator-runtime/runtime"],
           taskpane: ["./src/taskpane/taskpane.js",
        "./src/taskpane/taskpane.html"],
           functions: [
                    "./src/functions/someFunctions.js",
                    "./src/functions/otherFunctions.js"
                  ],
         },




Run the tool
You don't have to do anything to run the tool. When Webpack runs, it creates the
functions.json file and puts it in memory in development mode, or in the /dist folder in
production mode.



Basics of JSDoc tags
Add the @customfunction tag in the code comments for a JavaScript or TypeScript
function to mark it as a custom function.

The function parameter types may be provided using the @param tag in JavaScript, or
from the Function type    in TypeScript. For more information, see the @param tag and
Types sections.


Add a description to a function
The description is displayed to the user as help text when they need help to understand
what your custom function does. The description doesn't require any specific tag. Just
enter a short text description in the JSDoc comment. In general the description is placed
at the start of the JSDoc comment section, but it will work no matter where it is placed.

To see examples of the built-in function descriptions, open Excel, go to the Formulas
tab, and choose Insert function. You can then browse through all the function
descriptions, and also see your own custom functions listed.

In the following example, the phrase "Calculates the volume of a sphere." is the
description for the custom function.

  JavaScript


  /**
  /* Calculates the volume of a sphere.
   /* @customfunction VOLUME
  ...
   */




Supported JSDoc tags
The following JSDoc tags are supported in Excel custom functions.

     @cancelable
     @customfunction id name
     @helpurl url
     @param {type} name description
     @requiresAddress
     @requiresParameterAddresses
     @returns {type}
     @streaming
     @volatile



@cancelable
Indicates that a custom function performs an action when the function is canceled.

The last function parameter must be of type CustomFunctions.CancelableInvocation . The
function can assign a function to the oncanceled property to denote the result when the
function is canceled.

If the last function parameter is of type CustomFunctions.CancelableInvocation , it will be
considered @cancelable even if the tag isn't present.

A function can't have both @cancelable and @streaming tags.


@customfunction
Syntax: @customfunction id name

This tag indicates that the JavaScript/TypeScript function is an Excel custom function. It
is required to create metadata for the custom function.

The following shows an example of this tag.

  JavaScript
      /**
      * Increments a value once a second.
      * @customfunction
      * ...
      */




id
The id identifies a custom function.

       If id isn't provided, the JavaScript/TypeScript function name is converted to
       uppercase and disallowed characters are removed.
       The id must be unique for all custom functions.
       The allowed characters are limited to: A-Z, a-z, 0-9, underscores (_), and period (.).

In the following example, increment is the id and the name of the function.

  JavaScript


     /**
      * Increments a value once a second.
      * @customfunction INCREMENT
      * ...
      */




name
Provides the display name for the custom function.

       If name isn't provided, the id is also used as the name.
       Allowed characters: Letters Unicode Alphabetic character , numbers, period (.),
       and underscore (_).
       Must start with a letter.
       Maximum length is 128 characters.

In the following example, INC is the id of the function and increment is the name .

  JavaScript


     /**
      * Increments a value once a second.
      * @customfunction INC INCREMENT
    * ...
   */




description
A description appears to users in Excel as they are entering the function and specifies
what the function does. A description doesn't require any specific tag. Add a description
to a custom function by adding a phrase to describe what the function does inside the
JSDoc comment. By default, whatever text is untagged in the JSDoc comment section
will be the description of the function.

In the following example, the phrase "A function that adds two numbers" is the
description for the custom function with the id property of ADD .

  JavaScript


  /**
   * A function that adds two numbers.
   * @customfunction ADD
   * ...
   */




@helpurl
Syntax: @helpurl url

The provided url is displayed in Excel.

In the following example, the helpurl is http://www.contoso.com/weatherhelp .

  JavaScript


  /**
   * A function which streams the temperature in a town you specify.
   * @customfunction getTemperature
   * @helpurl http://www.contoso.com/weatherhelp
   * ...
   */




@param

JavaScript
 JavaScript Syntax: @param {type} name description

      {type} specifies the type info within curly braces. See the Types section for more

     information about the types which may be used. If no type is specified, the default
     type any will be used.
      name specifies the parameter that the @param tag applies to. It is required.

      description provides the description which appears in Excel for the function

     parameter. It is optional.

To denote a custom function parameter as optional, put square brackets around the
parameter name. For example, @param {string} [text] Optional text .


  ï¼— Note

  The default value for optional parameters is null .


The following example shows an ADD function that adds two or three numbers, with the
third number as an optional parameter.

  JavaScript


  /**
   * A function which sums two, or optionally three, numbers.
   * @customfunction ADDNUMBERS
   * @param firstNumber {number} First number to add.
   * @param secondNumber {number} Second number to add.
   * @param [thirdNumber] {number} Optional third number you wish to add.
   * ...
   */




TypeScript
TypeScript Syntax: @param name description

      name specifies the parameter that the @param tag applies to. It is required.

      description provides the description which appears in Excel for the function

     parameter. It is optional.

See the Types section for more information about the function parameter types which
may be used.

To denote a custom function parameter as optional, do one of the following:

     Use an optional parameter. For example: function f(text?: string)
        Give the parameter a default value. For example: function f(text: string =
       "abc")


For detailed description of the @param see: JSDoc


  ï¼— Note

  The default value for optional parameters is null .


The following example shows the add function that adds two numbers.

  ts


  /**
    * Adds two numbers.
    * @customfunction
    * @param first First number
    * @param second Second number
    * @returns The sum of the two numbers.
    */
  function add(first: number, second: number): number {
     return first + second;
  }




@requiresAddress
Indicates that the address of the cell where the function is being evaluated should be
provided.

The last function parameter must be of type CustomFunctions.Invocation or a derived
type to use @requiresAddress . When the function is called, the address property will
contain the address.

The following sample shows how to use the invocation parameter in combination with
@requiresAddress to return the address of the cell that invoked your custom function.
See Invocation parameter for more information.

  JavaScript


  /**
   * Return the address of the cell that invoked the custom function.
   * @customfunction
   * @param {number} first First parameter.
   * @param {number} second Second parameter.
   * @param {CustomFunctions.Invocation} invocation Invocation object.
     * @requiresAddress
    */
  function getAddress(first, second, invocation) {
     const address = invocation.address;
     return address;
  }




@requiresParameterAddresses
Indicates that the function should return the addresses of input parameters.

The last function parameter must be of type CustomFunctions.Invocation or a derived
type to use @requiresParameterAddresses . The JSDoc comment must also include an
@returns tag specifying that the return value be a matrix, such as @returns {string[]

[]} or @returns {number[][]} . See Matrix types for additional information.


When the function is called, the parameterAddresses property will contain the addresses
of the input parameters.

The following sample shows how to use the invocation parameter in combination with
@requiresParameterAddresses to return the addresses of three input parameters. See

Detect the address of a parameter for more information.

  JavaScript


  /**
    * Return the addresses of three parameters.
    * @customfunction
    * @param {string} firstParameter First parameter.
    * @param {string} secondParameter Second parameter.
    * @param {string} thirdParameter Third parameter.
    * @param {CustomFunctions.Invocation} invocation Invocation object.
    * @returns {string[][]} The addresses of the parameters, as a 2-dimensional
  array.
    * @requiresParameterAddresses
    */
  function getParameterAddresses(firstParameter, secondParameter,
  thirdParameter, invocation) {
     const addresses = [
       [invocation.parameterAddresses[0]],
       [invocation.parameterAddresses[1]],
       [invocation.parameterAddresses[2]]
     ];
     return addresses;
  }
 @returns
Syntax: @returns {type}

Provides the type for the return value.

If {type} is omitted, the TypeScript type info will be used. If there is no type info, the
type will be any .

The following example shows the add function that uses the @returns tag.

  ts


  /**
    * Adds two numbers.
    * @customfunction
    * @param first First number
    * @param second Second number
    * @returns The sum of the two numbers.
    */
  function add(first: number, second: number): number {
     return first + second;
  }




@streaming
Used to indicate that a custom function is a streaming function.

The last parameter is of type CustomFunctions.StreamingInvocation<ResultType> . The
function returns void .

Streaming functions don't return values directly, instead they call setResult(result:
ResultType) using the last parameter.


Exceptions thrown by a streaming function are ignored. setResult() may be called with
Error to indicate an error result. For an example of a streaming function and more
information, see Make a streaming function.

Streaming functions can't be marked as @volatile.


@volatile
A volatile function is one whose result isn't the same from one moment to the next,
even if it takes no arguments or the arguments haven't changed. Excel re-evaluates cells
that contain volatile functions, together with all dependents, every time that a
 calculation is done. For this reason, too much reliance on volatile functions can make
recalculation times slow, so use them sparingly.

Streaming functions can't be volatile.

The following function is volatile and uses the @volatile tag.

  JavaScript


  /**
    * Simulates rolling a 6-sided die.
    * @customfunction
    * @volatile
    */
  function roll6sided(): number {
     return Math.floor(Math.random() * 6) + 1;
  }




Types
By specifying a parameter type, Excel will convert values into that type before calling the
function. If the type is any , no conversion will be performed.



Value types
A single value may be represented using one of the following types: boolean , number ,
string .



Matrix type
Use a two-dimensional array type to have the parameter or return value be a matrix of
values. For example, the type number[][] indicates a matrix of numbers and string[][]
indicates a matrix of strings.


Error type
A non-streaming function can indicate an error by returning an Error type.

A streaming function can indicate an error by calling setResult() with an Error type.


Promise
 A custom function can return a promise that provides the value when the promise is
resolved. If the promise is rejected, then the custom function will throw an error.


Other types
Any other type will be treated as an error.



Next steps
Learn about naming and localization for custom functions.

   ï¼– Collaborate with us on
   GitHub                                Office Add-ins feedback
                                         Office Add-ins is an open source project.
   The source for this content can
   be found on GitHub, where you         Select a link to provide feedback:
   can also create and review
                                         î¯¨ Open a documentation issue
   issues and pull requests. For
   more information, see our
                                         î´• Provide product feedback
   contributor guide.
 Batch custom function calls for a remote
service
Article â€¢ 03/09/2023


If your custom functions call a remote service you can use a batching pattern to reduce
the number of network calls to the remote service. To reduce network round trips you
batch all the calls into a single call to the web service. This is ideal when the spreadsheet
is recalculated.

For example, if someone used your custom function in 100 cells in a spreadsheet, and
then recalculated the spreadsheet, your custom function would run 100 times and make
100 network calls. By using a batching pattern, the calls can be combined to make all
100 calculations in a single network call.


  ï¼‰ Important

  Note that Excel custom functions are available on the following platforms.

        Office on Windows
           Microsoft 365 subscription
           retail perpetual Office 2016 and later
        Office on Mac
        Office on the web

  Excel custom functions are currently not supported in the following:

        Office on iPad
        volume-licensed perpetual versions of Office 2019 or earlier




View the completed sample
To view the completed sample, follow this article and paste the code examples into your
own project. For example, to create a new custom function project for TypeScript use
the Yeoman generator for Office Add-ins, then add all the code from this article to the
project. Run the code and try it out.

Alternatively, download or view the complete sample project at Custom function
batching pattern . If you want to view the code in whole before reading any further,
take a look at the script file .
 Create the batching pattern in this article
To set up batching for your custom functions you'll need to write three main sections of
code.

   1. A push operation to add a new operation to the batch of calls each time Excel calls
     your custom function.
   2. A function to make the remote request when the batch is ready.
   3. Server code to respond to the batch request, calculate all of the operation results,
     and return the values.

In the following sections, you'll learn how to construct the code one example at a time.
It's recommended you create a brand-new custom functions project using the Yeoman
generator for Office Add-ins generator. To create a new project, see Get started
developing Excel custom functions. You can use TypeScript or JavaScript.



Batch each call to your custom function
Your custom functions work by calling a remote service to perform the operation and
calculate the result they need. This provides a way for them to store each requested
operation into a batch. Later you'll see how to create a _pushOperation function to batch
the operations. First, take a look at the following code example to see how to call
_pushOperation from your custom function.


In the following code, the custom function performs division but relies on a remote
service to do the actual calculation. It calls _pushOperation to batch the operation along
with other operations to the remote service. It names the operation div2. You can use
any naming scheme you want for operations as long as the remote service is also using
the same scheme (more on the remote service later). Also, the arguments the remote
service will need to run the operation are passed.


Add the div2 custom function
Add the following code to your functions.js or functions.ts file (depending on if you
used JavaScript or TypeScript).

  JavaScript


  /**
   * Divides two numbers using batching
   * @CustomFunction
   * @param dividend The number being divided
   * @param divisor The number the dividend is divided by
     * @returns The result of dividing the two numbers
    */
  function div2(dividend, divisor) {
     return _pushOperation("div2", [dividend, divisor]);
  }




Add global variables for tracking batch requests
Next, add two global variables to your functions.js or functions.ts file.
_isBatchedRequestScheduled is important later for timing batch calls to the remote

service.

  JavaScript


  let _batch = [];
  let _isBatchedRequestScheduled = false;




Add the _pushOperation function
When Excel calls your custom function, you need to push the operation into the batch
array. The following _pushOperation function code shows how to add a new operation
from a custom function. It creates a new batch entry, creates a new promise to resolve
or reject the operation, and pushes the entry into the batch array.

This code also checks to see if a batch is scheduled. In this example, each batch is
scheduled to run every 100ms. You can adjust this value as needed. Higher values result
in bigger batches being sent to the remote service, and a longer wait time for the user
to see results. Lower values tend to send more batches to the remote service, but with a
quick response time for users.

The function creates an invocationEntry object that contains the string name of which
operation to run. For example, if you had two custom functions named multiply and
divide , you could reuse those as the operation names in your batch entries. args holds

the arguments that were passed to your custom function from Excel. And finally,
resolve or reject methods store a promise holding the information the remote service
returns.

Add the following code to your functions.js or functions.ts file.

  JavaScript


  // This function encloses your custom functions as individual entries,
  // which have some additional properties so you can keep track of whether or
   not
  // a request has been resolved or rejected.
  function _pushOperation(op, args) {
    // Create an entry for your custom function.
    console.log("pushOperation");
    const invocationEntry = {
      operation: op, // e.g., sum
       args: args,
      resolve: undefined,
      reject: undefined,
    };

      // Create a unique promise for this invocation,
      // and save its resolve and reject functions into the invocation entry.
      const promise = new Promise((resolve, reject) => {
        invocationEntry.resolve = resolve;
        invocationEntry.reject = reject;
      });

      // Push the invocation entry into the next batch.
      _batch.push(invocationEntry);

      // If a remote request hasn't been scheduled yet,
      // schedule it after a certain timeout, e.g., 100 ms.
      if (!_isBatchedRequestScheduled) {
        console.log("schedule remote request");
        _isBatchedRequestScheduled = true;
        setTimeout(_makeRemoteRequest, 100);
      }

      // Return the promise for this invocation.
      return promise;
  }




Make the remote request
The purpose of the _makeRemoteRequest function is to pass the batch of operations to
the remote service, and then return the results to each custom function. It first creates a
copy of the batch array. This allows concurrent custom function calls from Excel to
immediately begin batching in a new array. The copy is then turned into a simpler array
that does not contain the promise information. It wouldn't make sense to pass the
promises to a remote service since they would not work. The _makeRemoteRequest will
either reject or resolve each promise based on what the remote service returns.

Add the following code to your functions.js or functions.ts file.

  JavaScript
  // This is a private helper function, used only within your custom function
 add-in.
 // You wouldn't call _makeRemoteRequest in Excel, for example.
 // This function makes a request for remote processing of the whole batch,
 // and matches the response batch to the request batch.
 function _makeRemoteRequest() {
   // Copy the shared batch and allow the building of a new batch while you
 are waiting for a response.
   // Note the use of "splice" rather than "slice", which will modify the
 original _batch array
   // to empty it out.
   try{
   console.log("makeRemoteRequest");
   const batchCopy = _batch.splice(0, _batch.length);
   _isBatchedRequestScheduled = false;

   // Build a simpler request batch that only contains the arguments for each
 invocation.
   const requestBatch = batchCopy.map((item) => {
     return { operation: item.operation, args: item.args };
   });
   console.log("makeRemoteRequest2");
   // Make the remote request.
   _fetchFromRemoteService(requestBatch)
     .then((responseBatch) => {
       console.log("responseBatch in fetchFromRemoteService");
       // Match each value from the response batch to its corresponding
 invocation entry from the request batch,
       // and resolve the invocation promise with its corresponding response
 value.
        responseBatch.forEach((response, index) => {
          if (response.error) {
            batchCopy[index].reject(new Error(response.error));
            console.log("rejecting promise");
          } else {
            console.log("fulfilling promise");
            console.log(response);

             batchCopy[index].resolve(response.result);
           }
         });
       });
       console.log("makeRemoteRequest3");
     } catch (error) {
       console.log("error name:" + error.name);
       console.log("error message:" + error.message);
       console.log(error);
     }
 }




Modify _makeRemoteRequest for your own solution
 The _makeRemoteRequest function calls _fetchFromRemoteService which, as you'll see
later, is just a mock representing the remote service. This makes it easier to study and
run the code in this article. But when you want to use this code for an actual remote
service you should make the following changes.

     Decide how to serialize the batch operations over the network. For example, you
     may want to put the array into a JSON body.
     Instead of calling _fetchFromRemoteService you need to make the actual network
     call to the remote service passing the batch of operations.



Process the batch call on the remote service
The last step is to handle the batch call in the remote service. The following code sample
shows the _fetchFromRemoteService function. This function unpacks each operation,
performs the specified operation, and returns the results. For learning purposes in this
article, the _fetchFromRemoteService function is designed to run in your web add-in and
mock a remote service. You can add this code to your functions.js or functions.ts file so
that you can study and run all the code in this article without having to set up an actual
remote service.

Add the following code to your functions.js or functions.ts file.

  JavaScript


  // This function simulates the work of a remote service. Because each
  service
  // differs, you will need to modify this function appropriately to work with
  the service you are using.
  // This function takes a batch of argument sets and returns a promise that
  may contain a batch of values.
  // NOTE: When implementing this function on a server, also apply an
  appropriate authentication mechanism
  //       to ensure only the correct callers can access it.
  async function _fetchFromRemoteService(requestBatch) {
    // Simulate a slow network request to the server.
    console.log("_fetchFromRemoteService");
    await pause(1000);
    console.log("postpause");
    return requestBatch.map((request) => {
      console.log("requestBatch server side");
      const { operation, args } = request;

       try {
         if (operation === "div2") {
           // Divide the first argument by the second argument.
           return {
             result: args[0] / args[1]
              };
          } else if (operation === "mul2") {
            // Multiply the arguments for the given entry.
            const myResult = args[0] * args[1];
            console.log(myResult);
            return {
               result: myResult
             };
          } else {
            return {
               error: `Operation not supported: ${operation}`
             };
          }
        } catch (error) {
          return {
            error: `Operation failed: ${operation}`
          };
        }
      });
  }

  function pause(ms) {
    console.log("pause");
    return new Promise((resolve) => setTimeout(resolve, ms));
  }




Modify _fetchFromRemoteService for your live remote
service
To modify the _fetchFromRemoteService function to run in your live remote service, make
the following changes.

      Depending on your server platform (Node.js or others) map the client network call
      to this function.
      Remove the pause function which simulates network latency as part of the mock.
      Modify the function declaration to work with the parameter passed if the
      parameter is changed for network purposes. For example, instead of an array, it
      may be a JSON body of batched operations to process.
      Modify the function to perform the operations (or call functions that do the
      operations).
      Apply an appropriate authentication mechanism. Ensure that only the correct
      callers can access the function.
      Place the code in the remote service.



Next steps
 Learn about the various parameters you can use in your custom functions. Or review the
basics behind making a web call through a custom function.

Data types expand the Excel JavaScript API to support data types beyond the original
four cell value types (string, number, boolean, and error). Data types include support for
web images, formatted number values, entities, and arrays within entities.

These data types amplify the power of custom functions, because custom functions
accept data types as both input and output values. You can generate data types through
custom functions, or take existing data types as function arguments into calculations.
Once the JSON schema of a data type is set, this schema is maintained throughout the
calculations.

To learn more about using data types with an Excel add-in, see Overview of data types in
Excel add-ins.



How custom functions handle data types
Custom functions can recognize data types and accept them as parameter values. A
custom function can create a new data type for a return value. Custom functions use the
same JSON schema for data types as the Excel JavaScript API, and this JSON schema is
maintained as custom functions calculate and evaluate.


  ï¼— Note

  Custom functions do not support the full functionality of the enhanced error
  objects offered by data types. A custom function can accept a data types error
  object, but it won't be maintained throughout calculation. At this time, custom
  functions only support the errors included in the CustomFunctions.Error object.




Enable data types for custom functions
Custom functions projects include a JSON metadata file. This JSON metadata file differs
from the JSON schema used by data types APIs. To use the data types integration with
custom functions, the custom functions JSON metadata file must be manually updated
to include the property allowCustomDataForDataTypeAny . Set this property to true .
 For a full description of the manual JSON metadata creation process, see Manually
create JSON metadata for custom functions. See allowCustomDataForDataTypeAny for
additional details about this property.



Output a formatted number value
The following code sample shows how to create a FormattedNumberCellValue data type
with a custom function. The function takes a basic number and a format setting as the
input parameters and returns a formatted number value data type as the output.

  JavaScript


  /**
    * Take a number as the input value and return a formatted number value as
  the output.
    * @customfunction
    * @param {number} value
    * @param {string} format (e.g. "0.00%")
    * @returns A formatted number value.
    */
  function createFormattedNumber(value, format) {
       return {
           type: "FormattedNumber",
           basicValue: value,
           numberFormat: format
       }
  }




Input an entity value
The following code sample shows a custom function that takes an EntityCellValue data
type as an input. If the attribute parameter is set to text , then the function returns the
text property of the entity value. Otherwise, the function returns the basicValue

property of the entity value.

  JavaScript


  /**
   * Accept an entity value data type as a function input.
   * @customfunction
   * @param {any} value
   * @param {string} attribute
   * @returns {any} The text value of the entity.
   */
  function getEntityAttribute(value, attribute) {
      if (value.type == "Entity") {
            if (attribute == "text") {
                return value.text;
           } else {
                return value.properties[attribute].basicValue;
           }
       } else {
           return JSON.stringify(value);
       }
  }




Next steps
To experiment with custom functions and data types, install Script Lab in Excel and try
out the Data types: Custom functions    snippet in our Samples library.

Call Excel JavaScript APIs from your custom functions to get range data and obtain more
context for your calculations. Calling Excel JavaScript APIs through a custom function
can be helpful when:

      A custom function needs to get information from Excel before calculation. This
      information might include document properties, range formats, custom XML parts,
      a workbook name, or other Excel-specific information.
      A custom function will set the cell's number format for the return values after
      calculation.


  ï¼‰ Important

  To call Excel JavaScript APIs from your custom function, you'll need to use a shared
  runtime. Use the Yeoman generator for Office Add-ins to install an Excel Custom
  Functions using a Shared Runtime project or see Configure your Office Add-in to
  use a shared runtime to learn more.




Code sample
To call Excel JavaScript APIs from a custom function, you first need a context. Use the
Excel.RequestContext object to get a context. Then use the context to call the APIs you
need in the workbook.

The following code sample shows how to use Excel.RequestContext to get a value from
a cell in the workbook. In this sample, the address parameter is passed into the Excel
JavaScript API Worksheet.getRange method and must be entered as a string. For
example, the custom function entered into the Excel UI must follow the pattern
=CONTOSO.GETRANGEVALUE("A1") , where "A1" is the address of the cell from which to

retrieve the value.

  JavaScript


  /**
   * @customfunction
   * @param {string} address The address of the cell from which to retrieve
  the value.
    * @returns The value of the cell at the input address.
   **/
  async function getRangeValue(address) {
   // Retrieve the context object.
   const context = new Excel.RequestContext();

   // Use the context object to access the cell at the input address.
   const range =
  context.workbook.worksheets.getActiveWorksheet().getRange(address);
   range.load("values");
   await context.sync();

   // Return the value of the cell at the input address.
   return range.values[0][0];
  }




Limitations of calling Excel JavaScript APIs
through a custom function
A custom functions add-in can call Excel JavaScript APIs, but you should be cautious
about which APIs it calls. Don't call Excel JavaScript APIs from a custom function that
change cells outside of the cell running the custom function. Changing other cells or the
Excel environment can result in poor performance, time outs, and infinite loops in the
Excel application. This means your custom functions shouldn't do any of the following:

     Insert, delete, or format cells on the spreadsheet.
     Change another cell's value.
     Move, rename, delete, or add sheets to a workbook.
     Add names to a workbook.
     Set properties.
     Change any of the Excel environment options, such as calculation mode or screen
     views.

Your custom functions add-in can read information from cells outside the cell running
the custom function, but it shouldn't perform write operations to other cells. Instead,
make changes to other cells or to the Excel environment from the context of a ribbon
button or a task pane. In addition, custom function calculations shouldn't run while an
Excel recalculation is taking place, as this scenario creates unpredictable results.

  ï¼— Note

  An XLL add-in is an Excel add-in file with the file extension .xll. An XLL file is a type
  of dynamic link library (DLL) file that can only be opened by Excel. XLL add-in files
  must be written in C or C++. See Developing Excel XLLs to learn more.


If you have existing Excel XLL add-ins, you can build equivalent custom function add-ins
using the Excel JavaScript API to extend your solution features to other platforms, such
as Excel on the web or on a Mac. However, Excel JavaScript API add-ins don't have all of
the functionality available in XLL add-ins. Depending on the functionality your solution
uses, the XLL add-in may provide a better experience in Excel on Windows than the
Excel JavaScript API add-in.


  ï¼‰ Important

  The equivalent add-in feature is supported by the following platform and
  applications. COM add-ins cannot be installed on any other platform, so on those
  platforms the manifest element that is discussed later in this article,
   EquivalentAddins , is ignored.


        Excel, Word, and PowerPoint on Windows (Version 1904 or later)
        Outlook on Windows (Version 2102 or later) against a supported Exchange
        server version
             Exchange Online
             Exchange 2019 Cumulative Update 10 or later (KB5003612 )
             Exchange 2016 Cumulative Update 21 or later (KB5003611         )




Specify equivalent XLL in the manifest
To enable compatibility with an existing XLL add-in, identify the equivalent XLL add-in in
the manifest of your Excel JavaScript API add-in. Excel then uses the XLL add-in
functions when running on Windows, instead of your Excel JavaScript API add-in custom
functions.
 To set the equivalent XLL add-in for your custom functions, specify the FileName of the
XLL file. When the user opens a workbook with functions from the XLL file, Excel
converts the functions to compatible functions. The workbook then uses the XLL file
when opened in Excel on Windows, but it continues to use custom functions from your
Excel JavaScript API add-in when opened on the web or on Mac.

The following example shows how to specify both a COM add-in and an XLL add-in as
equivalents in an Excel JavaScript API add-in manifest file. Often you specify both. For
completeness, this example shows both equivalents in context. They're identified by
their ProgId and FileName respectively. The EquivalentAddins element must be
positioned immediately before the closing VersionOverrides tag. For more information
on COM add-in compatibility, see Make your Office Add-in compatible with an existing
COM add-in.

  XML


  <VersionOverrides>
    ...
    <EquivalentAddins>
      <EquivalentAddin>
        <ProgId>ContosoCOMAddin</ProgId>
        <Type>COM</Type>
      </EquivalentAddin>

      <EquivalentAddin>
        <FileName>contosofunctions.xll</FileName>
        <Type>XLL</Type>
      </EquivalentAddin>
    </EquivalentAddins>
  </VersionOverrides>




  ï¼— Note

  If an Excel JavaScript API add-in declares its custom functions to be compatible
  with an XLL add-in, changing the manifest at a later time could break a user's
  workbook because it will change the file format.




Custom function behavior for XLL compatible
functions
An add-in's XLL functions are converted to XLL compatible custom functions when a
spreadsheet is opened and there is an equivalent add-in available. On the next save, the
XLL functions are written to the file in a compatible mode so that they work with both
 the XLL add-in and Excel JavaScript API add-in custom functions (when on platforms
unsupported by XLL).

The following table compares features across XLL user-defined functions, XLL
compatible custom functions, and Excel JavaScript API add-in custom functions.

                      XLL user-defined      XLL compatible custom      Excel JavaScript API
                      function              functions                  add-in custom
                                                                       function

 Supported            Windows               Windows, macOS, web        Windows, macOS, web
 platforms                                  browser                    browser

 Supported file       XLSX, XLSB, XLSM,     XLSX, XLSB, XLSM           XLSX, XLSB, XLSM
 formats              XLS

 Formula              No                    Yes                        Yes
 autocomplete

 Streaming            Possible via xlfRTD   Yes                        Yes
                      and XLL callback.

 Localization of      No                    No. The Name and ID        Yes
 functions                                  must match the existing
                                            XLL's functions.

 Volatile functions   Yes                   Yes                        Yes

 Multi-threaded       Yes                   Yes                        Yes
 recalculation
 support

 Calculation          No UI. Excel can be   Users see #BUSY! until a   Users see #BUSY! until
 behavior             unresponsive during   result is returned.        a result is returned.
                      calculation.

 Requirement sets     N/A                   CustomFunctions 1.1 and    CustomFunctions 1.1
                                            later                      and later

As described in the custom functions overview article, a custom functions project must
include both a JSON metadata file and a script (either JavaScript or TypeScript) file to
register a function, making it available for use. Custom functions are registered when
the user runs the add-in for the first time and after that are available to the same user in
all workbooks.


  ï¼‰ Important

  Note that Excel custom functions are available on the following platforms.

          Office on the web
          Office on Windows
            Microsoft 365 subscription
            retail perpetual Office 2016 and later
            volume-licensed perpetual Office 2021 and later
          Office on Mac

  Excel custom functions aren't currently supported in the following:

          Office on iPad
          volume-licensed perpetual versions of Office 2019 or earlier on Windows


We recommend using JSON autogeneration when possible instead of creating your own
JSON file. Autogeneration is less prone to user error and the yo office scaffolded files
already include this. For more information on JSDoc tags and the JSON autogeneration
process, see Autogenerate JSON metadata for custom functions.

However, you can make a custom functions project from scratch. This process requires
you to:

      Write your JSON file.
      Check that your manifest file is connected to your JSON file.
      Associate your functions' id and name properties in the script file in order to
      register your functions.
 The following image explains the differences between using yo office scaffold files and
writing JSON from scratch.




  ï¼— Note

  Remember to connect your manifest to the JSON file you create, through the
  <Resources> section in your add-in only manifest file if you do not use the
  Yeoman generator for Office Add-ins.




Authoring metadata and connecting to the
manifest
Create a JSON file in your project and provide all the details about your functions in it,
such as the function's parameters. See the following metadata example and the
metadata reference for a complete list of function properties.

Ensure your add-in only manifest file references your JSON file in the <Resources>
section, similar to the following example.

  JSON


  <Resources>
      <bt:Urls>
           <bt:Url id="JSON-URL"
  DefaultValue="https://subdomain.contoso.com/config/customfunctions.json"/>
          <bt:Url id="JS-URL"
  DefaultValue="https://subdomain.contoso.com/dist/win32/ship/index.win32.bund
  le"/>
               <bt:Url id="HTML-URL"
  DefaultValue="https://subdomain.contoso.com/index.html"/>
      </bt:Urls>
      <bt:ShortStrings>
          <bt:String id="namespace" DefaultValue="CONTOSO"/>
      </bt:ShortStrings>
  </Resources>




JSON metadata example
The following example shows the contents of a JSON metadata file for an add-in that
defines custom functions. The sections that follow this example provide detailed
information about the individual properties within this JSON example.

  JSON


  {
      "allowCustomDataForDataTypeAny": true,
      "allowErrorForDataTypeAny": true,
      "functions": [
        {
          "id": "ADD",
          "name": "ADD",
          "description": "Add two numbers",
          "helpUrl": "http://www.contoso.com/help",
          "result": {
            "type": "number",
            "dimensionality": "scalar"
          },
          "parameters": [
            {
               "name": "first",
               "description": "first number to add",
               "type": "number",
               "dimensionality": "scalar"
            },
            {
               "name": "second",
               "description": "second number to add",
               "type": "number",
               "dimensionality": "scalar"
            }
          ]
        },
        {
          "id": "GETDAY",
           "name": "GETDAY",
          "description": "Get the day of the week",
          "helpUrl": "http://www.contoso.com/help",
          "result": {
            "dimensionality": "scalar"
          },
          "parameters": []
        },
        {
          "id": "INCREMENTVALUE",
          "name": "INCREMENTVALUE",
          "description": "Count up from zero",
          "helpUrl": "http://www.contoso.com/help",
          "result": {
            "dimensionality": "scalar"
          },
          "parameters": [
            {
              "name": "increment",
              "description": "the number to be added each time",
              "type": "number",
              "dimensionality": "scalar"
            }
          ],
          "options": {
            "stream": true,
            "cancelable": true
          }
        },
        {
          "id": "SECONDHIGHEST",
          "name": "SECONDHIGHEST",
          "description": "Get the second highest number from a range",
          "helpUrl": "http://www.contoso.com/help",
          "result": {
            "dimensionality": "scalar"
          },
          "parameters": [
            {
              "name": "range",
              "description": "the input range",
              "type": "number",
              "dimensionality": "matrix"
            }
          ]
        }
    ]
}




ï¼— Note
   A complete sample JSON file is available in the OfficeDev/Excel-Custom-
  Functions    GitHub repository's commit history. As the project has been adjusted
  to automatically generate JSON, a full sample of handwritten JSON is only available
  in previous versions of the project.




Metadata reference

allowCustomDataForDataTypeAny
The allowCustomDataForDataTypeAny property is a boolean data type. Setting this value
to true allows a custom function to accept data types as parameters and return values.
To learn more, see Custom functions and data types.


  ï¼— Note

  Unlike most of the other JSON metadata properties,
  allowCustomDataForDataTypeAny is a top-level property and contains no sub-

  properties. See the preceding JSON metadata code sample for an example of how
  to format this property.



allowErrorForDataTypeAny
The allowErrorForDataTypeAny property is a boolean data type. Setting the value to
true allows a custom function to process errors as input values. All parameters with the

type any or any[][] can accept errors as input values when allowErrorForDataTypeAny
is set to true . The default allowErrorForDataTypeAny value is false .


  ï¼— Note

  Unlike the other JSON metadata properties, allowErrorForDataTypeAny is a top-
  level property and contains no sub-properties. See the preceding JSON metadata
  code sample for an example of how to format this property.



functions
The functions property is an array of custom function objects. The following table lists
the properties of each object.
                                                                                     ï¾‰   Expand table


 Property      Data     Required     Description
               type

 description   string   No           The description of the function that end users see in Excel. For
                                     example, Converts a Celsius value to Fahrenheit.

 helpUrl       string   No           URL that provides information about the function. (It is
                                     displayed in a task pane.) For example,
                                     http://contoso.com/help/convertcelsiustofahrenheit.html .


 id            string   Yes          A unique ID for the function. This ID can only contain
                                     alphanumeric characters and periods and should not be
                                     changed after it is set.

 name          string   Yes          The name of the function that end users see in Excel. In Excel,
                                     this function name is prefixed by the custom functions
                                     namespace that's specified in the add-in only manifest file.

 options       object   No           Enables you to customize some aspects of how and when
                                     Excel executes the function. See options for details.

 parameters    array    Yes          Array that defines the input parameters for the function. See
                                     parameters for details.

 result        object   Yes          Object that defines the type of information that is returned by
                                     the function. See result for details.



options
The options object enables you to customize some aspects of how and when Excel
executes the function. The following table lists the properties of the options object.


                                                                                    ï¾‰   Expand table


 Property                     Data         Required     Description
                              type

 cancelable                   boolean      No           If true , Excel calls the
                                                         CancelableInvocation handler whenever
                                           Default      the user takes an action that has the effect
                                           value is     of canceling the function; for example,
                                           false .      manually triggering recalculation or editing
                                                        a cell that is referenced by the function.
                                                        Cancelable functions are typically only used
                                                        for asynchronous functions that return a
                                                        single result and need to handle the
  Property                     Data      Required   Description
                              type

                                                   cancellation of a request for data. A
                                                   function can't use both the stream and
                                                    cancelable properties.


 requiresAddress              boolean   No         If true , your custom function can access
                                                   the address of the cell that invoked it. The
                                        Default     address property of the invocation
                                        value is   parameter contains the address of the cell
                                        false .    that invoked your custom function. A
                                                   function can't use both the stream and
                                                   requiresAddress properties.


 requiresParameterAddresses   boolean   No         If true , your custom function can access
                                                   the addresses of the function's input
                                        Default    parameters. This property must be used in
                                        value is   combination with the dimensionality
                                        false .    property of the result object, and
                                                    dimensionality must be set to matrix . See
                                                   Detect the address of a parameter for more
                                                   information.

 stream                       boolean   No         If true , the function can output repeatedly
                                                   to the cell even when invoked only once.
                                        Default    This option is useful for rapidly-changing
                                        value is   data sources, such as a stock price. The
                                        false .    function should have no return statement.
                                                   Instead, the result value is passed as the
                                                   argument of the
                                                    StreamingInvocation.setResult callback
                                                   function. For more information, see Make a
                                                   streaming function.

 volatile                     boolean   No         If true , the function recalculates each time
                                                   Excel recalculates, instead of only when the
                                        Default    formula's dependent values have changed.
                                        value is   A function can't use both the stream and
                                        false .    volatile properties. If the stream and
                                                   volatile properties are both set to true ,
                                                   the volatile property will be ignored.



parameters
The parameters property is an array of parameter objects. The following table lists the
properties of each object.
                                                                                    ï¾‰   Expand table


 Property         Data       Required    Description
                  type

 description      string     No          A description of the parameter. This is displayed in
                                         Excel's IntelliSense.

 dimensionality   string     No          Must be either scalar (a non-array value) or matrix (a
                                         2-dimensional array).

 name             string     Yes         The name of the parameter. This name is displayed in
                                         Excel's IntelliSense.

 type             string     No          The data type of the parameter. Can be boolean ,
                                          number , string , or any , which allows you to use of any
                                         of the previous three types. If this property is not
                                         specified, the data type defaults to any .

 optional         boolean    No          If true , the parameter is optional.

 repeating        boolean    No          If true , parameters populate from a specified array.
                                         Note that functions all repeating parameters are
                                         considered optional parameters by definition.



result
The result object defines the type of information that is returned by the function. The
following table lists the properties of the result object.


                                                                                   ï¾‰   Expand table


 Property         Data      Required    Description
                  type

 dimensionality   string    No          Must be either scalar (a non-array value) or matrix (a 2-
                                        dimensional array).

 type             string    No          The data type of the result. Can be boolean , number ,
                                        string , or any (which allows you to use of any of the
                                        previous three types). If this property is not specified, the
                                        data type defaults to any .




Associating function names with JSON
metadata
 For a function to work properly, you need to associate the function's id property with
the JavaScript implementation. Make sure there is an association, otherwise the function
won't be registered and isn't useable in Excel. The following code sample shows how to
make the association using the CustomFunctions.associate() function. The sample
defines the custom function add and associates it with the object in the JSON metadata
file where the value of the id property is ADD.

  JavaScript


  /**
    * Add two numbers
    * @customfunction
    * @param {number} first First number
    * @param {number} second Second number
    * @returns {number} The sum of the two numbers.
    */
  function add(first, second) {
     return first + second;
  }

  CustomFunctions.associate("ADD", add);



The following JSON shows the JSON metadata that is associated with the previous
custom function JavaScript code.

  JSON


  {
      "functions": [
        {
          "description": "Add two numbers",
          "id": "ADD",
          "name": "ADD",
          "parameters": [
            {
               "description": "First number",
               "name": "first",
               "type": "number"
            },
            {
               "description": "Second number",
               "name": "second",
               "type": "number"
            }
          ],
          "result": {
            "type": "number"
          }
        }
       ]
  }



Keep in mind the following best practices when creating custom functions in your
JavaScript file and specifying corresponding information in the JSON metadata file.

      In the JSON metadata file, ensure that the value of each id property contains only
      alphanumeric characters and periods.

      In the JSON metadata file, ensure that the value of each id property is unique
      within the scope of the file. That is, no two function objects in the metadata file
      should have the same id value.

      Do not change the value of an id property in the JSON metadata file after it's
      been associated with a corresponding JavaScript function name. You can change
      the function name that end users see in Excel by updating the name property
      within the JSON metadata file, but you should never change the value of an id
      property after it's been established.

      In the JavaScript file, specify a custom function association using
      CustomFunctions.associate after each function.


The following sample shows the JSON metadata that corresponds to the functions
defined in the preceding JavaScript code sample. The id and name property values are
in uppercase, which is a best practice when describing your custom functions. You only
need to add this JSON if you are preparing your own JSON file manually and not using
autogeneration. For more information on autogeneration, see Autogenerate JSON
metadata for custom functions.

  JSON


  {
    "$schema": "https://developer.microsoft.com/json-schemas/office-js/custom-
  functions.schema.json",
    "functions": [
      {
        "id": "ADD",
        "name": "ADD",
        ...
      },
      {
        "id": "INCREMENT",
        "name": "INCREMENT",
        ...
      }
       ]
  }




Next steps
Learn the best practices for naming your function or discover how to localize your
function using the previously described handwritten JSON method.

   ï¼– Collaborate with us on
   GitHub                                Office Add-ins feedback
                                         Office Add-ins is an open source project.
   The source for this content can
                                         Select a link to provide feedback:
   be found on GitHub, where you
   can also create and review
                                         î¯¨ Open a documentation issue
   issues and pull requests. For
   more information, see our
                                         î´• Provide product feedback
   contributor guide.
 Return multiple results from your
custom function
Article â€¢ 12/08/2022


You can return multiple results from your custom function which will be returned to
neighboring cells. This behavior is called spilling. When your custom function returns an
array of results, it's known as a dynamic array formula. For more information on dynamic
array formulas in Excel, see Dynamic arrays and spilled array behavior .

The following image shows how the SORT function spills down into neighboring cells.
Your custom function can also return multiple results like this.




To create a custom function that is a dynamic array formula, it must return a two-
dimensional array of values. If the results spill into neighboring cells that already have
values, the formula will display a #SPILL! error.



Code samples
The first example shows how to return a dynamic array that spills down.

  JavaScript


  /**
   * Get text values that spill down.
   * @customfunction
   * @returns {string[][]} A dynamic array with multiple results.
   */
  function spillDown() {
       return [['first'], ['second'], ['third']];
  }



The second example shows how to return a dynamic array that spills right.

  JavaScript


  /**
    * Get text values that spill to the right.
    * @customfunction
    * @returns {string[][]} A dynamic array with multiple results.
    */
  function spillRight() {
     return [['first', 'second', 'third']];
  }



The third example shows how to return a dynamic array that spills both down and right.

  JavaScript


  /**
    * Get text values that spill both right and down.
    * @customfunction
    * @returns {string[][]} A dynamic array with multiple results.
    */
  function spillRectangle() {
     return [
        ['apples', 1, 'pounds'],
        ['oranges', 3, 'pounds'],
        ['pears', 5, 'crates']
     ];
  }



The fourth example shows how to return a dynamic spill array from a streaming
function. The results spill down, like the first example, and increment once a second
based on the amount parameter. To learn more about streaming functions, see Make a
streaming function.

  JavaScript


  /**
   * Increment the cells with a given amount every second. Creates a dynamic
  spilled array with multiple results
   * @customfunction
   * @param {number} amount The amount to add to the cell value on each
  increment.
   * @param {CustomFunctions.StreamingInvocation<number[][]>} invocation
  Parameter to send results to Excel or respond to the user canceling the
  function. A dynamic array.
   */
 function increment(amount: number, invocation:
 CustomFunctions.StreamingInvocation<number[][]>): void {
   let firstResult = 0;
   let secondResult = 1;
   let thirdResult = 2;

     const timer = setInterval(() => {
       firstResult += amount;
       secondResult += amount;
       thirdResult += amount;
       invocation.setResult([[firstResult], [secondResult], [thirdResult]]);
     }, 1000);

     invocation.onCanceled = () => {
        clearInterval(timer);
     };
 }

In some scenarios, a custom function that doesn't use a shared runtime will need to
authenticate the user in order to access protected resources. Custom functions that
don't use a shared runtime run in a JavaScript-only runtime. Because of this, if the add-
in has a task pane, you'll need to pass data back and forth between the JavaScript-only
runtime and the HTML-supporting runtime used by the task pane. You do this by using
the OfficeRuntime.storage object and a special Dialog API.


  ï¼‰ Important

  Note that Excel custom functions are available on the following platforms.

        Office on Windows
           Microsoft 365 subscription
           retail perpetual Office 2016 and later
        Office on Mac
        Office on the web

  Excel custom functions are currently not supported in the following:

        Office on iPad
        volume-licensed perpetual versions of Office 2019 or earlier



  ï¼— Note

  We recommend using custom functions with a shared runtime, unless you have a
  specific reason not to use a shared runtime. Note that using a shared runtime
  means your add-in will use WebView2 (Microsoft Edge Chromium-based) if
  conditions are met, and otherwise your add-in will use Trident (Internet Explorer 11)
  regardless of the Windows or Microsoft 365 version. For a description of the
  WebView2 conditions, see Browsers and webview controls used by Office Add-ins.
  For more information about runtimes, see Runtimes in Office Add-ins and
  Runtimes.
 OfficeRuntime.storage object
The JavaScript-only runtime doesn't have a localStorage object available on the global
window, where you typically store data. Instead, your code should share data between
custom functions and task panes by using OfficeRuntime.storage to set and get data.


Suggested usage
When you need to authenticate from a custom function add-in that doesn't use a
shared runtime, your code should check OfficeRuntime.storage to see if the access
token was already acquired. If not, use OfficeRuntime.displayWebDialog to authenticate
the user, retrieve the access token, and then store the token in OfficeRuntime.storage
for future use.



Dialog API
If a token doesn't exist, you should use the OfficeRuntime.dialog API to ask the user to
sign in. After a user enters their credentials, the resulting access token can be stored as
an item in OfficeRuntime.storage .


  ï¼— Note

  The JavaScript-only runtime uses a dialog object that is slightly different from the
  dialog object in the browser runtime used by task panes. They're both referred to
  as the "Dialog API", but use OfficeRuntime.displayWebDialog to authenticate users
  in the JavaScript-only runtime, not Office.ui.displayDialogAsync.


The following diagram outlines this basic process. The dotted line indicates that custom
functions and your add-in's task pane are both part of your add-in as a whole, though
they use separate runtimes.

   1. You issue a custom function call from a cell in an Excel workbook.
   2. The custom function uses OfficeRuntime.dialog to pass your user credentials to a
     website.
   3. This website then returns an access token to the page in the dialog.
   4. Your JavaScript in the dialog calls the Office.ui.messageParent function to send the
     access token to the custom function. For more information about this function, see
     Send information from the dialog box to the host page.
   5. Your custom function then sets this access token to an item in the
      OfficeRuntime.storage .
    6. Your add-in's task pane accesses the token from OfficeRuntime.storage .




Storing the token
The following examples are from the Using OfficeRuntime.storage in custom functions
code sample. Refer to this code sample for a complete example of sharing data between
custom functions and the task pane in add-ins that don't use a shared runtime.

If the custom function authenticates, then it receives the access token and will need to
store it in OfficeRuntime.storage . The following code sample shows how to call the
storage.setItem method to store a value. The storeValue function is a custom function

that stores a value from the user. You can modify this to store any token value you need.

  JavaScript


  /**
   * Stores a key-value pair into OfficeRuntime.storage.
   * @customfunction
   * @param {string} key Key of item to put into storage.
   * @param {*} value Value of item to put into storage.
   */
  function storeValue(key, value) {
    return OfficeRuntime.storage.setItem(key, value).then(function (result) {
        return "Success: Item with key '" + key + "' saved to storage.";
    }, function (error) {
        return "Error: Unable to save item with key '" + key + "' to storage.
  " + error;
       });
  }



When the task pane needs the access token, it can retrieve the token from the
OfficeRuntime.storage item. The following code sample shows how to use the

storage.getItem method to retrieve the token.


  JavaScript


  /**
    * Read a token from storage.
    * @customfunction GETTOKEN
    */
  function receiveTokenFromCustomFunction() {
     const key = "token";
     const tokenSendStatus = document.getElementById('tokenSendStatus');
     OfficeRuntime.storage.getItem(key).then(function (result) {
         tokenSendStatus.value = "Success: Item with key '" + key + "' read from
  storage.";
         document.getElementById('tokenTextBox2').value = result;
     }, function (error) {
         tokenSendStatus.value = "Error: Unable to read item with key '" + key +
  "' from storage. " + error;
     });
  }




General guidance
Office Add-ins are web-based and you can use any web authentication technique. There
is no particular pattern or method you must follow to implement your own
authentication with custom functions. You may wish to consult the documentation
about various authentication patterns, starting with this article about authorizing via
external services.

Avoid using the following locations to store data when developing custom functions:

      localStorage : custom functions that don't use a shared runtime don't have access

      to the global window object and therefore have no access to data stored in
      localStorage .

      Office.context.document.settings : This location isn't secure and information can

      be extracted by anyone using the add-in.



Dialog box API example
 In the following code sample, the function getTokenViaDialog uses the
OfficeRuntime.displayWebDialog function to display a dialog box. This sample is

provided to show the capabilities of the method, not demonstrate how to authenticate.

  JavaScript


  /**
    * Function retrieves a cached token or opens a dialog box if there is no
  saved token. Note that this isn't a sufficient example of authentication but
  is intended to show the capabilities of the displayWebDialog method.
    * @param {string} url URL for a stored token.
    */
  function getTokenViaDialog(url) {
     return new Promise (function (resolve, reject) {
       if (_dialogOpen) {
         // Can only have one dialog box open at once. Wait for previous dialog
  box's token.
         let timeout = 5;
         let count = 0;
         const intervalId = setInterval(function () {
           count++;
           if(_cachedToken) {
              resolve(_cachedToken);
              clearInterval(intervalId);
           }
           if(count >= timeout) {
              reject("Timeout while waiting for token");
              clearInterval(intervalId);
           }
         }, 1000);
       } else {
         _dialogOpen = true;
         OfficeRuntime.displayWebDialog(url, {
           height: '50%',
           width: '50%',
           onMessage: function (message, dialog) {
              _cachedToken = message;
              resolve(message);
              dialog.close();
              return;
           },
           onRuntimeError: function(error, dialog) {
              reject(error);
           },
         }).catch(function (e) {
           reject(e);
         });
       }
     });
  }
 Next steps
Learn how to debug custom functions.

Custom functions that don't use a shared runtime use a JavaScript-only runtime that is
designed to optimize performance of calculations.


  ï¼‰ Important

  Note that Excel custom functions are available on the following platforms.

        Office on Windows
           Microsoft 365 subscription
           retail perpetual Office 2016 and later
        Office on Mac
        Office on the web

  Excel custom functions are currently not supported in the following:

        Office on iPad
        volume-licensed perpetual versions of Office 2019 or earlier



  ï¼— Note

  We recommend using custom functions with a shared runtime, unless you have a
  specific reason not to use a shared runtime. Note that using a shared runtime
  means your add-in will use WebView2 (Microsoft Edge Chromium-based) if
  conditions are met, and otherwise your add-in will use Trident (Internet Explorer 11)
  regardless of the Windows or Microsoft 365 version. For a description of the
  WebView2 conditions, see Browsers and webview controls used by Office Add-ins.
  For more information about runtimes, see Runtimes in Office Add-ins and
  Runtimes.


This JavaScript-only runtime provides access to APIs in the OfficeRuntime namespace
that can be used by custom functions and the task pane (which runs in a different
runtime) to store data.
 Request external data
Within a custom function, you can request external data by using an API like Fetch      or
by using XmlHttpRequest (XHR) , a standard web API that issues HTTP requests to
interact with servers.

Be aware that custom functions must use additional security measures when making
XmlHttpRequests, requiring Same Origin Policy       and simple CORS .

A simple CORS implementation cannot use cookies and only supports simple methods
(GET, HEAD, POST). Simple CORS accepts simple headers with field names Accept ,
Accept-Language , Content-Language . You can also use a Content-Type header in simple
CORS, provided that the content type is application/x-www-form-urlencoded ,
text/plain , or multipart/form-data .




Store and access data
Within a custom function that doesn't use a shared runtime, you can store and access
data by using the OfficeRuntime.storage object. The Storage object is a persistent,
unencrypted, key-value storage system that provides an alternative to localStorage ,
which cannot be used by custom functions that use the JavaScript-only runtime. The
Storage object offers 10 MB of data per domain. Domains can be shared by more than

one add-in.

The Storage object is a shared storage solution, meaning multiple parts of an add-in are
able to access the same data. For example, tokens for user authentication may be stored
in the Storage object because it can be accessed by both a custom function (using the
JavaScript-only runtime) and a task pane (using a full webview runtime). Similarly, if two
add-ins share the same domain (for example, www.contoso.com/addin1 ,
www.contoso.com/addin2 ), they are also permitted to share information back and forth

through the Storage object. Note that add-ins which have different subdomains will
have different instances of Storage (for example, subdomain.contoso.com/addin1 ,
differentsubdomain.contoso.com/addin2 ).


Because the Storage object can be a shared location, it is important to realize that it is
possible to override key-value pairs.

The following methods are available on the Storage object.

      getItem
      getItems
       setItem

      setItems
      removeItem

      removeItems
      getKeys



  ï¼— Note

  There's no method for clearing all information (such as clear ). Instead, you should
  instead use removeItems to remove multiple entries at a time.




OfficeRuntime.storage example
The following code sample calls the OfficeRuntime.storage.setItem method to set a key
and value into storage .

  JavaScript


  function StoreValue(key, value) {

    return OfficeRuntime.storage.setItem(key, value).then(function (result) {
        return "Success: Item with key '" + key + "' saved to storage.";
    }, function (error) {
        return "Error: Unable to save item with key '" + key + "' to storage.
  " + error;
    });
  }




Next steps
Learn how to debug custom functions.

This article discusses debugging only for custom functions that don't use a shared
runtime. To debug custom functions add-ins that use a shared runtime, see Configure
your Office Add-in to use a shared runtime: Debug.


  ï¼‰ Important

  Note that Excel custom functions are available on the following platforms.

        Office on the web
        Office on Windows
           Microsoft 365 subscription
           retail perpetual Office 2016 and later
           volume-licensed perpetual Office 2021 and later
        Office on Mac

  Excel custom functions aren't currently supported in the following:

        Office on iPad
        volume-licensed perpetual versions of Office 2019 or earlier on Windows



  ï¼— Note

  We recommend using custom functions with a shared runtime, unless you have a
  specific reason not to use a shared runtime. Note that using a shared runtime
  means your add-in will use WebView2 (Microsoft Edge Chromium-based) if
  conditions are met, and otherwise your add-in will use Trident (Internet Explorer 11)
  regardless of the Windows or Microsoft 365 version. For a description of the
  WebView2 conditions, see Browsers and webview controls used by Office Add-ins.
  For more information about runtimes, see Runtimes in Office Add-ins and
  Runtimes.



  îª€ Tip

  The debugging techniques that are described in this article don't work with projects
  that are created with the Office Add-in project containing the manifest only
  option in the Yeoman generator. The scripts that are referred to later in this article
   aren't installed with that option. To debug an add-in that is created with this
  option, see the instructions in one of the following articles, as appropriate.

         Debug add-ins using developer tools in Microsoft Edge (Chromium-based)
         Debug add-ins using developer tools in Internet Explorer
         Debug Office Add-ins on a Mac


The process of debugging a custom function for add-ins that don't use a shared runtime
varies depending on the target platform (Windows, Mac, or web) and on whether you
are using Visual Studio Code or a different IDE. Use the links in the following table to
visit sections of this article that are relevant to your debugging scenario. In this table,
"CF-NSR" refers to custom functions in a non-shared runtime.


                                                                            ï¾‰   Expand table


 Target       Visual Studio Code                      Other IDE
 platform

 Excel on     Use VS Code and the browser             Use the command line tools
 the web      development tools

 Excel on     Use VS Code and the browser             Debugging CF-NSR that are running in
 Windows      development tools                       Excel on Windows outside VS Code isn't
                                                      supported. Debug against Excel on the
                                                      web.

 Excel on     VS Code debugging of CF-NSR that are    Use the command line tools
 Mac          running in Excel on Mac isn't
              supported. Debug against Excel on the
              web.




Use the browser developer tools to debug
custom functions in Excel on the web
You can use the browser developer tools to debug custom functions that don't use a
shared runtime in Excel on the web. The following steps work for both Windows and
macOS.


Run your add-in from Visual Studio Code
   1. Open your custom functions root project folder in Visual Studio Code (VS Code)           .
  2. Choose Terminal > Run Task and type or select Watch. This will monitor and
   rebuild for any file changes.
 3. Choose Terminal > Run Task and type or select Dev Server.


Sideload your add-in
 1. Open Office on the web .

 2. Open a new Excel workbook.

 3. Select Home > Add-ins, then select Get Add-ins.

 4. On the Office Add-ins dialog, select the MY ADD-INS tab, choose Manage My
   Add-ins, and then Upload My Add-in.




 5. Browse to the add-in manifest file, and then select Upload.
   ï¼— Note

  Once you've sideloaded to the document, it will remain sideloaded each time you
  open the document.



Start debugging
   1. Open developer tools in the browser. For Chrome and most browsers F12 will open
        the developer tools.
   2. In developer tools, open your source code script file using Cmd+P or Ctrl+P
        (functions.js or functions.ts).
   3. Set a breakpoint      in the custom function source code.

If you need to change the code you can make edits in VS Code and save the changes.
Refresh the browser to see the changes loaded.



Use the command line tools to debug
If you aren't using VS Code, you can use the command line (such as bash, or PowerShell)
to run your add-in. You'll need to use the browser developer tools to debug your code
in Excel on the web. You cannot debug the desktop version of Excel using the command
line.

   1. From the command line run npm run watch to watch for and rebuild when code
        changes occur.

   2. Open a second command line window (the first one will be blocked while running
        the watch.)

   3. If you want to start your add-in in the desktop version of Excel, run the following
        command.

        npm run start:desktop


        Or if you prefer to start your add-in in Excel on the web run the following
        command.

        npm run start:web -- --document {url} (where {url} is the URL of an Excel file on

        OneDrive or SharePoint)


          ï¼— Note
         If you are developing on a Mac, enclose the {url} in single quotation marks.
        Do not do this on Windows.


     If your add-in doesn't sideload in the document, follow the steps in Sideload your
     add-in to sideload your add-in. Then continue to the next section to start
     debugging.

   4. Open developer tools in the browser. For Chrome and most browsers F12 will open
     the developer tools.

   5. In developer tools, open your source code script file (functions.js or functions.ts).
     Your custom functions code may be located near the end of the file.

   6. In the custom function source code, apply a breakpoint by selecting a line of code.

If you need to change the code you can make edits in Visual Studio and save the
changes. Refresh the browser to see the changes loaded.


Commands for building and running your add-in
There are several build tasks available.

      npm run watch : builds for development and automatically rebuilds when a source

     file is saved
      npm run build-dev : builds for development once

      npm run build : builds for production

      npm run dev-server : runs the web server used for development


You can use the following tasks to start debugging on desktop or online.

      npm run start:desktop : Starts Excel on desktop and sideloads your add-in.


      npm run start:web -- --document {url} (where {url} is the URL of an Excel file on

     OneDrive or SharePoint): Starts Excel on the web and sideloads your add-in.


        ï¼— Note

        If you are developing on a Mac, enclose the {url} in single quotation marks.
        Do not do this on Windows.


      npm run stop : Stops Excel and debugging.
 Next steps
Learn about Authentication for custom functions without a shared runtime.

   ï¼– Collaborate with us on
   GitHub                               Office Add-ins feedback
                                        Office Add-ins is an open source project.
   The source for this content can
                                        Select a link to provide feedback:
   be found on GitHub, where you
   can also create and review
                                        î¯¨ Open a documentation issue
   issues and pull requests. For
   more information, see our
                                        î´• Provide product feedback
   contributor guide.
 Volatile values in functions
Article â€¢ 03/22/2022


Volatile functions are functions in which the value changes each time the cell is
calculated. The value can change even if none of the function's arguments change.
These functions recalculate every time Excel recalculates. For example, imagine a cell
that calls the function NOW . Every time NOW is called, it will automatically return the
current date and time.


  ï¼‰ Important

  Note that Excel custom functions are available on the following platforms.

        Office on Windows
            Microsoft 365 subscription
            retail perpetual Office 2016 and later
        Office on Mac
        Office on the web

  Excel custom functions are currently not supported in the following:

        Office on iPad
        volume-licensed perpetual versions of Office 2019 or earlier


Excel contains several built-in volatile functions, such as RAND and TODAY . For a
comprehensive list of Excel's volatile functions, see Volatile and Non-Volatile Functions.

Custom functions allow you to create your own volatile functions, which may be useful
when handling dates, times, random numbers, and modeling. For example, Monte Carlo
simulations    require the generation of random inputs to determine an optimal
solution.

If choosing to autogenerate your JSON file, declare a volatile function with the JSDoc
comment tag @volatile . From more information on autogeneration, see Autogenerate
JSON metadata for custom functions.

An example of a volatile custom function follows, which simulates rolling a six-sided
dice.
  JS


 /**
   * Simulates rolling a 6-sided dice.
   * @customfunction
   * @volatile
   */
 function roll6sided() {
    return Math.floor(Math.random() * 6) + 1;
 }




Next steps
      Learn about custom functions parameter options.

One of the ways that custom functions enhances Excel's power is by receiving data from
locations other than the workbook, such as the web or a server (through WebSockets      ).
You can request external data through an API like Fetch    or by using XmlHttpRequest
(XHR) , a standard web API that issues HTTP requests to interact with servers.


  ï¼‰ Important

  Note that Excel custom functions are available on the following platforms.

        Office on Windows
           Microsoft 365 subscription
           retail perpetual Office 2016 and later
        Office on Mac
        Office on the web

  Excel custom functions are currently not supported in the following:

        Office on iPad
        volume-licensed perpetual versions of Office 2019 or earlier




Functions that return data from external
sources
If a custom function retrieves data from an external source such as the web, it must:
    1. Return a JavaScript Promise   to Excel.
   2. Resolve the Promise with the final value using the callback function.


Fetch example
In the following code sample, the webRequest function reaches out to a hypothetical
external API that tracks the number of people currently on the International Space
Station. The function returns a JavaScript Promise and uses fetch to request
information from the hypothetical API. The resulting data is transformed into JSON and
the names property is converted into a string, which is used to resolve the promise.

When developing your own functions, you may want to perform an action if the web
request does not complete in a timely manner or consider batching up multiple API
requests.

  JS


  /**
    * Requests the names of the people currently on the International Space
  Station.
    * Note: This function requests data from a hypothetical URL. In practice,
  replace the URL with a data source for your scenario.
    * @customfunction
    */
  function webRequest() {
     let url = "https://www.contoso.com/NumberOfPeopleInSpace"; // This is a
  hypothetical URL.
     return new Promise(function (resolve, reject) {
        fetch(url)
          .then(function (response){
            return response.json();
             }
          )
          .then(function (json) {
             resolve(JSON.stringify(json.names));
          })
     })
  }




  ï¼— Note

  Using fetch avoids nested callbacks and may be preferable to XHR in some cases.




XHR example
 In the following code sample, the getStarCount function calls the Github API to discover
the amount of stars given to a particular user's repository. This is an asynchronous
function which returns a JavaScript Promise . When data is obtained from the web call,
the promise is resolved which returns the data to the cell.

  TS


  /**
   * Gets the star count for a given Github organization or user and
  repository.
   * @customfunction
   * @param userName string name of organization or user.
   * @param repoName string name of the repository.
   * @return number of stars.
   */
  async function getStarCount(userName: string, repoName: string) {

       const url = "https://api.github.com/repos/" + userName + "/" + repoName;

       let xhttp = new XMLHttpRequest();

       return new Promise(function(resolve, reject) {
         xhttp.onreadystatechange = function() {
           if (xhttp.readyState !== 4) return;

          if (xhttp.status == 200) {
            resolve(JSON.parse(xhttp.responseText).watchers_count);
          } else {
            reject({
              status: xhttp.status,

                 statusText: xhttp.statusText
               });
           }
         };

         xhttp.open("GET", url, true);

         xhttp.send();
       });
  }




Make a streaming function
Streaming custom functions enable you to output data to cells that updates repeatedly,
without requiring a user to explicitly refresh anything. This can be useful to check live
data from a service online, like the function in the custom functions tutorial.

To declare a streaming function, you can use either of the following two options.
        The @streaming JSDoc tag.
       The CustomFunctions.StreamingInvocation invocation parameter.

The following code sample is a custom function that adds a number to the result every
second. Note the following about this code.

       Excel displays each new value automatically using the setResult method.
       The second input parameter, invocation , is not displayed to end users in Excel
       when they select the function from the autocomplete menu.
       The onCanceled callback defines the function that runs when the function is
       canceled.
       Streaming isn't necessarily tied to making a web request. In this case, the function
       isn't making a web request but is still getting data at set intervals, so it requires the
       use of the streaming invocation parameter.

  JS


  /**
   * Increments a value once a second.
   * @customfunction INC increment
   * @param {number} incrementBy Amount to increment
   * @param {CustomFunctions.StreamingInvocation<number>} invocation
   */
  function increment(incrementBy, invocation) {
    let result = 0;
    const timer = setInterval(() => {
      result += incrementBy;
      invocation.setResult(result);
    }, 1000);

       invocation.onCanceled = () => {
          clearInterval(timer);
       };
  }




  ï¼— Note

  For an example of how to return a dynamic spill array from a streaming function,
  see Return multiple results from your custom function: Code samples.




Cancel a function
Excel cancels the execution of a function in the following situations.
      When the user edits or deletes a cell that references the function.
     When one of the arguments (inputs) for the function changes. In this case, a new
     function call is triggered following the cancellation.
     When the user triggers recalculation manually. In this case, a new function call is
     triggered following the cancellation.

You can also consider setting a default streaming value to handle cases when a request
is made but you are offline.


  ï¼— Note

  There is also a category of functions called cancelable functions which use the
  @cancelable JSDoc tag. Cancelable functions allow a web request to be terminated

  in the middle of the request.

  A streaming function can't use the @cancelable tag, but streaming functions can
  include an onCanceled callback function. Only asynchronous custom functions
  which return one value can use the @cancelable JSDoc tag. See Autogenerate
  JSON metadata: @cancelable to learn more about the @cancelable tag.




Use an invocation parameter
The invocation parameter is the last parameter of any custom function by default. The
invocation parameter gives context about the cell (such as its address and contents)

and allows you to use the setResult method and onCanceled event to define what a
function does when it streams ( setResult ) or is canceled ( onCanceled ).

The invocation handler needs to be of type CustomFunctions.StreamingInvocation or
CustomFunctions.CancelableInvocation to process web requests.

See Invocation parameter to learn about other potential uses of the invocation
argument and how it corresponds with the Invocation object.



Receiving data via WebSockets
Within a custom function, you can use WebSockets        to exchange data over a persistent
connection with a server. Using WebSockets, your custom function can open a
connection with a server and then automatically receive messages from the server when
certain events occur, without having to explicitly poll the server for data.
 WebSockets example
The following code sample establishes a WebSocket connection and then logs each
incoming message from the server.

  JavaScript


  let ws = new WebSocket('wss://bundles.office.com');

  ws.onmessage(message) {
      console.log(`Received: ${message}`);
  }

  ws.onerror(error){
      console.err(`Failed: ${error}`);
  }




Next steps
     Learn about different parameter types your functions can use.
     Discover how to batch multiple API calls.


When developing custom functions, you may encounter errors in the product while
creating and testing your functions.


  ï¼‰ Important

  Note that Excel custom functions are available on the following platforms.

        Office on the web
        Office on Windows
           Microsoft 365 subscription
           retail perpetual Office 2016 and later
           volume-licensed perpetual Office 2021 and later
        Office on Mac

  Excel custom functions aren't currently supported in the following:

        Office on iPad
        volume-licensed perpetual versions of Office 2019 or earlier on Windows


To resolve issues, you can enable runtime logging to capture errors and refer to Excel's
native error messages. Also, check for common mistakes such as leaving promises
unresolved.



Debugging custom functions
To debug custom functions add-ins that use a shared runtime, see Configure your Office
Add-in to use a shared runtime: Debug.

To debug custom functions add-ins that don't use a shared runtime, see Custom
functions debugging.



Enable runtime logging
If you're testing your add-in in Office on Windows, you should enable runtime logging.
Runtime logging delivers console.log statements to a separate log file you create to
help you uncover issues. The statements cover a variety of errors, including errors
 pertaining to your add-in's manifest file, runtime conditions, or installation of your
custom functions. For more information about runtime logging, see Debug your add-in
with runtime logging.


Check for Excel error messages
Excel has a number of built-in error messages which are returned to a cell if there is
calculation error. Custom functions only use the following error messages: #NULL! ,
#DIV/0! , #VALUE! , #REF! , #NAME? , #NUM! , #N/A , and #BUSY! .


Generally, these errors correspond to the errors you might already be familiar with in
Excel. The are only a few exceptions specific to custom functions, listed here:

      A #NAME error generally means there has been an issue registering your functions.
      A #N/A error is also maybe a sign that that function while registered could not be
      run. This is typically due to a missing CustomFunctions.associate command.
      A #VALUE error typically indicates an error in the functions' script file.
      A #REF! error may indicate that your function name is the same as a function
      name in an add-in that already exists.



Clear the Office cache
Information about custom functions is cached by Office. Sometimes while developing
and repeatedly reloading an add-in with custom functions your changes may not
appear. You can fix this by clearing the Office cache. For more information, see Clear the
Office cache.



Common problems and solutions

Can't open add-in from localhost: Use a local loopback
exemption
If you see the error "We can't open this add-in from localhost," you will need to enable a
local loopback exemption. For details on how to do this, see this Microsoft support
article.


Runtime logging reports "TypeError: Network request
failed" on Excel on Windows
 If you see the error "TypeError: Network request failed" in your runtime log while
making calls to your localhost server, you'll need to enable a local loopback exception.
For details on how to do this, see Option #2 in this Microsoft support article.


Ensure promises return
When Excel is waiting for a custom function to complete, it displays #BUSY! in the cell. If
your custom function code returns a promise, but the promise does not return a result,
Excel will continue showing #BUSY! . Check your functions to make sure that any
promises are properly returning a result to a cell.


Error: The dev server is already running on port 3000
Sometimes when running npm start you may see an error that the dev server is already
running on port 3000 (or whichever port your add-in uses). You can stop the dev server
by running npm stop or by closing the Node.js window. In some cases, it can take a few
minutes for the dev server to stop running.


My functions won't load: associate functions
In cases where your JSON has not been registered and you have authored your own
JSON metadata, you may see a #VALUE! error or receive a notification that your add-in
cannot be loaded. This usually means you need to associate each custom function with
its id property specified in the JSON metadata file. This is done by using the
CustomFunctions.associate() function. Typically this function call is made after each

function or at the end of the script file. If a custom function is not associated, it will not
work.

The following example shows an add function, followed by the function's name add
being associated with the corresponding JSON id ADD .

  JavaScript


  /**
    * Add two numbers.
    * @customfunction
    * @param {number} first First number.
    * @param {number} second Second number.
    * @returns {number} The sum of the two numbers.
    */
  function add(first, second) {
     return first + second;
  }
   CustomFunctions.associate("ADD", add);
 